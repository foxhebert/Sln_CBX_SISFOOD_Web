/*
------------------------------------------
    JavaScript INDEX
    ===================

    1. General functions
    2. Unidad Organizacional
    3. Cargo
    4. Categoría
    5. Tipo Personal
    6. Grupo
    7. Planilla
    8. Centro de Costos
    9. Marcador
    10. Feriado
    11. Variable
    12. Jornada diaria
    13. Horario
    14. Regla de Negocio
    

    
    11. Jerarquía Organizacional
    14. Empleado
    15. Cambio Documento de Identidad
    16. Perfil
    17. Periodo de Pago
    18. Grupo de Liquidación
    19. Pagina Principal
    20. Papeleta de Salida
    21. Campos Adicionales
    
*/

//#region FUNCIONES 

/******/ (function (modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if (installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
            /******/
        }
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
            /******/
        };
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
        /******/
    }
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function (exports, name, getter) {
/******/ 		if (!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
            /******/
        }
        /******/
    };
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function (exports) {
/******/ 		if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
            /******/
        }
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
        /******/
    };
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function (value, mode) {
/******/ 		if (mode & 1) value = __webpack_require__(value);
/******/ 		if (mode & 8) return value;
/******/ 		if ((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if (mode & 2 && typeof value != 'string') for (var key in value) __webpack_require__.d(ns, key, function (key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
        /******/
    };
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function (module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
        /******/
    };
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function (object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
    /******/
})
/************************************************************************/
/******/({

/***/ "./Resources/vendor/app.js":
/*!*********************************!*\
  !*** ./Resources/vendor/app.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                window.axios = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
                window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';

                /***/
            }),

/***/ "./node_modules/axios/index.js":
/*!*************************************!*\
  !*** ./node_modules/axios/index.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                module.exports = __webpack_require__(/*! ./lib/axios */ "./node_modules/axios/lib/axios.js");

                /***/
            }),

/***/ "./node_modules/axios/lib/adapters/xhr.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
                var settle = __webpack_require__(/*! ./../core/settle */ "./node_modules/axios/lib/core/settle.js");
                var buildURL = __webpack_require__(/*! ./../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
                var buildFullPath = __webpack_require__(/*! ../core/buildFullPath */ "./node_modules/axios/lib/core/buildFullPath.js");
                var parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ "./node_modules/axios/lib/helpers/parseHeaders.js");
                var isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ "./node_modules/axios/lib/helpers/isURLSameOrigin.js");
                var createError = __webpack_require__(/*! ../core/createError */ "./node_modules/axios/lib/core/createError.js");
                var lengua_esp = {
                    "sProcessing": "Procesando...",
                    "sLengthMenu": "Mostrar _MENU_ registros",
                    "sZeroRecords": "No se encontraron resultados",
                    "sEmptyTable": "Ningún dato disponible en esta tabla",
                    "sInfo": "Mostrando registros del _START_ al _END_ de un total de _TOTAL_ registros",
                    "sInfoEmpty": "Mostrando registros del 0 al 0 de un total de 0 registros",
                    "sInfoFiltered": "(filtrado de un total de _MAX_ registros)",
                    "sInfoPostFix": "",
                    "sSearch": "Buscar:",
                    "sUrl": "",
                    "sInfoThousands": ",",
                    "sLoadingRecords": "Cargando...",
                    "oPaginate": {
                        "sFirst": "Primero",
                        "sLast": "Último",
                        "sNext": "Siguiente",
                        "sPrevious": "Anterior"
                    },
                    "oAria": {
                        "sSortAscending": ": Activar para ordenar la columna de manera ascendente",
                        "sSortDescending": ": Activar para ordenar la columna de manera descendente"
                    },
                    "buttons": {
                        "copy": "Copiar",
                        "colvis": "Visibilidad"
                    }
                }

                module.exports = function xhrAdapter(config) {
                    return new Promise(function dispatchXhrRequest(resolve, reject) {
                        var requestData = config.data;
                        var requestHeaders = config.headers;

                        if (utils.isFormData(requestData)) {
                            delete requestHeaders['Content-Type']; // Let the browser set it
                        }

                        var request = new XMLHttpRequest();

                        // HTTP basic authentication
                        if (config.auth) {
                            var username = config.auth.username || '';
                            var password = config.auth.password || '';
                            requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
                        }

                        var fullPath = buildFullPath(config.baseURL, config.url);
                        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

                        // Set the request timeout in MS
                        request.timeout = config.timeout;

                        // Listen for ready state
                        request.onreadystatechange = function handleLoad() {
                            if (!request || request.readyState !== 4) {
                                return;
                            }

                            // The request errored out and we didn't get a response, this will be
                            // handled by onerror instead
                            // With one exception: request that using file: protocol, most browsers
                            // will return status as 0 even though it's a successful request
                            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
                                return;
                            }

                            // Prepare the response
                            var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
                            var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
                            var response = {
                                data: responseData,
                                status: request.status,
                                statusText: request.statusText,
                                headers: responseHeaders,
                                config: config,
                                request: request
                            };

                            settle(resolve, reject, response);

                            // Clean up request
                            request = null;
                        };

                        // Handle browser request cancellation (as opposed to a manual cancellation)
                        request.onabort = function handleAbort() {
                            if (!request) {
                                return;
                            }

                            reject(createError('Request aborted', config, 'ECONNABORTED', request));

                            // Clean up request
                            request = null;
                        };

                        // Handle low level network errors
                        request.onerror = function handleError() {
                            // Real errors are hidden from us by the browser
                            // onerror should only fire if it's a network error
                            reject(createError('Network Error', config, null, request));

                            // Clean up request
                            request = null;
                        };

                        // Handle timeout
                        request.ontimeout = function handleTimeout() {
                            var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';
                            if (config.timeoutErrorMessage) {
                                timeoutErrorMessage = config.timeoutErrorMessage;
                            }
                            reject(createError(timeoutErrorMessage, config, 'ECONNABORTED',
                                request));

                            // Clean up request
                            request = null;
                        };

                        // Add xsrf header
                        // This is only done if running in a standard browser environment.
                        // Specifically not if we're in a web worker, or react-native.
                        if (utils.isStandardBrowserEnv()) {
                            var cookies = __webpack_require__(/*! ./../helpers/cookies */ "./node_modules/axios/lib/helpers/cookies.js");

                            // Add xsrf header
                            var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
                                cookies.read(config.xsrfCookieName) :
                                undefined;

                            if (xsrfValue) {
                                requestHeaders[config.xsrfHeaderName] = xsrfValue;
                            }
                        }

                        // Add headers to the request
                        if ('setRequestHeader' in request) {
                            utils.forEach(requestHeaders, function setRequestHeader(val, key) {
                                if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
                                    // Remove Content-Type if data is undefined
                                    delete requestHeaders[key];
                                } else {
                                    // Otherwise add header to the request
                                    request.setRequestHeader(key, val);
                                }
                            });
                        }

                        // Add withCredentials to request if needed
                        if (!utils.isUndefined(config.withCredentials)) {
                            request.withCredentials = !!config.withCredentials;
                        }

                        // Add responseType to request if needed
                        if (config.responseType) {
                            try {
                                request.responseType = config.responseType;
                            } catch (e) {
                                // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
                                // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
                                if (config.responseType !== 'json') {
                                    throw e;
                                }
                            }
                        }

                        // Handle progress if needed
                        if (typeof config.onDownloadProgress === 'function') {
                            request.addEventListener('progress', config.onDownloadProgress);
                        }

                        // Not all browsers support upload events
                        if (typeof config.onUploadProgress === 'function' && request.upload) {
                            request.upload.addEventListener('progress', config.onUploadProgress);
                        }

                        if (config.cancelToken) {
                            // Handle cancellation
                            config.cancelToken.promise.then(function onCanceled(cancel) {
                                if (!request) {
                                    return;
                                }

                                request.abort();
                                reject(cancel);
                                // Clean up request
                                request = null;
                            });
                        }

                        if (requestData === undefined) {
                            requestData = null;
                        }

                        // Send the request
                        request.send(requestData);
                    });
                };


                /***/
            }),

/***/ "./node_modules/axios/lib/axios.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
                var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");
                var Axios = __webpack_require__(/*! ./core/Axios */ "./node_modules/axios/lib/core/Axios.js");
                var mergeConfig = __webpack_require__(/*! ./core/mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");
                var defaults = __webpack_require__(/*! ./defaults */ "./node_modules/axios/lib/defaults.js");

                /**
                 * Create an instance of Axios
                 *
                 * @param {Object} defaultConfig The default config for the instance
                 * @return {Axios} A new instance of Axios
                 */
                function createInstance(defaultConfig) {
                    var context = new Axios(defaultConfig);
                    var instance = bind(Axios.prototype.request, context);

                    // Copy axios.prototype to instance
                    utils.extend(instance, Axios.prototype, context);

                    // Copy context to instance
                    utils.extend(instance, context);

                    return instance;
                }

                // Create the default instance to be exported
                var axios = createInstance(defaults);

                // Expose Axios class to allow class inheritance
                axios.Axios = Axios;

                // Factory for creating new instances
                axios.create = function create(instanceConfig) {
                    return createInstance(mergeConfig(axios.defaults, instanceConfig));
                };

                // Expose Cancel & CancelToken
                axios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");
                axios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ "./node_modules/axios/lib/cancel/CancelToken.js");
                axios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");

                // Expose all/spread
                axios.all = function all(promises) {
                    return Promise.all(promises);
                };
                axios.spread = __webpack_require__(/*! ./helpers/spread */ "./node_modules/axios/lib/helpers/spread.js");

                module.exports = axios;

                // Allow use of default import syntax in TypeScript
                module.exports.default = axios;


                /***/
            }),

/***/ "./node_modules/axios/lib/cancel/Cancel.js":
/*!*************************************************!*\
  !*** ./node_modules/axios/lib/cancel/Cancel.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                /**
                 * A `Cancel` is an object that is thrown when an operation is canceled.
                 *
                 * @class
                 * @param {string=} message The message.
                 */
                function Cancel(message) {
                    this.message = message;
                }

                Cancel.prototype.toString = function toString() {
                    return 'Cancel' + (this.message ? ': ' + this.message : '');
                };

                Cancel.prototype.__CANCEL__ = true;

                module.exports = Cancel;


                /***/
            }),

/***/ "./node_modules/axios/lib/cancel/CancelToken.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                var Cancel = __webpack_require__(/*! ./Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");

                /**
                 * A `CancelToken` is an object that can be used to request cancellation of an operation.
                 *
                 * @class
                 * @param {Function} executor The executor function.
                 */
                function CancelToken(executor) {
                    if (typeof executor !== 'function') {
                        throw new TypeError('executor must be a function.');
                    }

                    var resolvePromise;
                    this.promise = new Promise(function promiseExecutor(resolve) {
                        resolvePromise = resolve;
                    });

                    var token = this;
                    executor(function cancel(message) {
                        if (token.reason) {
                            // Cancellation has already been requested
                            return;
                        }

                        token.reason = new Cancel(message);
                        resolvePromise(token.reason);
                    });
                }

                /**
                 * Throws a `Cancel` if cancellation has been requested.
                 */
                CancelToken.prototype.throwIfRequested = function throwIfRequested() {
                    if (this.reason) {
                        throw this.reason;
                    }
                };

                /**
                 * Returns an object that contains a new `CancelToken` and a function that, when called,
                 * cancels the `CancelToken`.
                 */
                CancelToken.source = function source() {
                    var cancel;
                    var token = new CancelToken(function executor(c) {
                        cancel = c;
                    });
                    return {
                        token: token,
                        cancel: cancel
                    };
                };

                module.exports = CancelToken;


                /***/
            }),

/***/ "./node_modules/axios/lib/cancel/isCancel.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                module.exports = function isCancel(value) {
                    return !!(value && value.__CANCEL__);
                };


                /***/
            }),

/***/ "./node_modules/axios/lib/core/Axios.js":
/*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
                var buildURL = __webpack_require__(/*! ../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
                var InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ "./node_modules/axios/lib/core/InterceptorManager.js");
                var dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ "./node_modules/axios/lib/core/dispatchRequest.js");
                var mergeConfig = __webpack_require__(/*! ./mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");

                /**
                 * Create a new instance of Axios
                 *
                 * @param {Object} instanceConfig The default config for the instance
                 */
                function Axios(instanceConfig) {
                    this.defaults = instanceConfig;
                    this.interceptors = {
                        request: new InterceptorManager(),
                        response: new InterceptorManager()
                    };
                }

                /**
                 * Dispatch a request
                 *
                 * @param {Object} config The config specific for this request (merged with this.defaults)
                 */
                Axios.prototype.request = function request(config) {
                    /*eslint no-param-reassign:0*/
                    // Allow for axios('example/url'[, config]) a la fetch API
                    if (typeof config === 'string') {
                        config = arguments[1] || {};
                        config.url = arguments[0];
                    } else {
                        config = config || {};
                    }

                    config = mergeConfig(this.defaults, config);

                    // Set config.method
                    if (config.method) {
                        config.method = config.method.toLowerCase();
                    } else if (this.defaults.method) {
                        config.method = this.defaults.method.toLowerCase();
                    } else {
                        config.method = 'get';
                    }

                    // Hook up interceptors middleware
                    var chain = [dispatchRequest, undefined];
                    var promise = Promise.resolve(config);

                    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
                        chain.unshift(interceptor.fulfilled, interceptor.rejected);
                    });

                    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
                        chain.push(interceptor.fulfilled, interceptor.rejected);
                    });

                    while (chain.length) {
                        promise = promise.then(chain.shift(), chain.shift());
                    }

                    return promise;
                };

                Axios.prototype.getUri = function getUri(config) {
                    config = mergeConfig(this.defaults, config);
                    return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
                };

                // Provide aliases for supported request methods
                utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
                    /*eslint func-names:0*/
                    Axios.prototype[method] = function (url, config) {
                        return this.request(utils.merge(config || {}, {
                            method: method,
                            url: url
                        }));
                    };
                });

                utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
                    /*eslint func-names:0*/
                    Axios.prototype[method] = function (url, data, config) {
                        return this.request(utils.merge(config || {}, {
                            method: method,
                            url: url,
                            data: data
                        }));
                    };
                });

                module.exports = Axios;


                /***/
            }),

/***/ "./node_modules/axios/lib/core/InterceptorManager.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

                function InterceptorManager() {
                    this.handlers = [];
                }

                /**
                 * Add a new interceptor to the stack
                 *
                 * @param {Function} fulfilled The function to handle `then` for a `Promise`
                 * @param {Function} rejected The function to handle `reject` for a `Promise`
                 *
                 * @return {Number} An ID used to remove interceptor later
                 */
                InterceptorManager.prototype.use = function use(fulfilled, rejected) {
                    this.handlers.push({
                        fulfilled: fulfilled,
                        rejected: rejected
                    });
                    return this.handlers.length - 1;
                };

                /**
                 * Remove an interceptor from the stack
                 *
                 * @param {Number} id The ID that was returned by `use`
                 */
                InterceptorManager.prototype.eject = function eject(id) {
                    if (this.handlers[id]) {
                        this.handlers[id] = null;
                    }
                };

                /**
                 * Iterate over all the registered interceptors
                 *
                 * This method is particularly useful for skipping over any
                 * interceptors that may have become `null` calling `eject`.
                 *
                 * @param {Function} fn The function to call for each interceptor
                 */
                InterceptorManager.prototype.forEach = function forEach(fn) {
                    utils.forEach(this.handlers, function forEachHandler(h) {
                        if (h !== null) {
                            fn(h);
                        }
                    });
                };

                module.exports = InterceptorManager;


                /***/
            }),

/***/ "./node_modules/axios/lib/core/buildFullPath.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/buildFullPath.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                var isAbsoluteURL = __webpack_require__(/*! ../helpers/isAbsoluteURL */ "./node_modules/axios/lib/helpers/isAbsoluteURL.js");
                var combineURLs = __webpack_require__(/*! ../helpers/combineURLs */ "./node_modules/axios/lib/helpers/combineURLs.js");

                /**
                 * Creates a new URL by combining the baseURL with the requestedURL,
                 * only when the requestedURL is not already an absolute URL.
                 * If the requestURL is absolute, this function returns the requestedURL untouched.
                 *
                 * @param {string} baseURL The base URL
                 * @param {string} requestedURL Absolute or relative URL to combine
                 * @returns {string} The combined full path
                 */
                module.exports = function buildFullPath(baseURL, requestedURL) {
                    if (baseURL && !isAbsoluteURL(requestedURL)) {
                        return combineURLs(baseURL, requestedURL);
                    }
                    return requestedURL;
                };


                /***/
            }),

/***/ "./node_modules/axios/lib/core/createError.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/createError.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                var enhanceError = __webpack_require__(/*! ./enhanceError */ "./node_modules/axios/lib/core/enhanceError.js");

                /**
                 * Create an Error with the specified message, config, error code, request and response.
                 *
                 * @param {string} message The error message.
                 * @param {Object} config The config.
                 * @param {string} [code] The error code (for example, 'ECONNABORTED').
                 * @param {Object} [request] The request.
                 * @param {Object} [response] The response.
                 * @returns {Error} The created error.
                 */
                module.exports = function createError(message, config, code, request, response) {
                    var error = new Error(message);
                    return enhanceError(error, config, code, request, response);
                };


                /***/
            }),

/***/ "./node_modules/axios/lib/core/dispatchRequest.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
                var transformData = __webpack_require__(/*! ./transformData */ "./node_modules/axios/lib/core/transformData.js");
                var isCancel = __webpack_require__(/*! ../cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");
                var defaults = __webpack_require__(/*! ../defaults */ "./node_modules/axios/lib/defaults.js");

                /**
                 * Throws a `Cancel` if cancellation has been requested.
                 */
                function throwIfCancellationRequested(config) {
                    if (config.cancelToken) {
                        config.cancelToken.throwIfRequested();
                    }
                }

                /**
                 * Dispatch a request to the server using the configured adapter.
                 *
                 * @param {object} config The config that is to be used for the request
                 * @returns {Promise} The Promise to be fulfilled
                 */
                module.exports = function dispatchRequest(config) {
                    throwIfCancellationRequested(config);

                    // Ensure headers exist
                    config.headers = config.headers || {};

                    // Transform request data
                    config.data = transformData(
                        config.data,
                        config.headers,
                        config.transformRequest
                    );

                    // Flatten headers
                    config.headers = utils.merge(
                        config.headers.common || {},
                        config.headers[config.method] || {},
                        config.headers
                    );

                    utils.forEach(
                        ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
                        function cleanHeaderConfig(method) {
                            delete config.headers[method];
                        }
                    );

                    var adapter = config.adapter || defaults.adapter;

                    return adapter(config).then(function onAdapterResolution(response) {
                        throwIfCancellationRequested(config);

                        // Transform response data
                        response.data = transformData(
                            response.data,
                            response.headers,
                            config.transformResponse
                        );

                        return response;
                    }, function onAdapterRejection(reason) {
                        if (!isCancel(reason)) {
                            throwIfCancellationRequested(config);

                            // Transform response data
                            if (reason && reason.response) {
                                reason.response.data = transformData(
                                    reason.response.data,
                                    reason.response.headers,
                                    config.transformResponse
                                );
                            }
                        }

                        return Promise.reject(reason);
                    });
                };


                /***/
            }),

/***/ "./node_modules/axios/lib/core/enhanceError.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/core/enhanceError.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                /**
                 * Update an Error with the specified config, error code, and response.
                 *
                 * @param {Error} error The error to update.
                 * @param {Object} config The config.
                 * @param {string} [code] The error code (for example, 'ECONNABORTED').
                 * @param {Object} [request] The request.
                 * @param {Object} [response] The response.
                 * @returns {Error} The error.
                 */
                module.exports = function enhanceError(error, config, code, request, response) {
                    error.config = config;
                    if (code) {
                        error.code = code;
                    }

                    error.request = request;
                    error.response = response;
                    error.isAxiosError = true;

                    error.toJSON = function () {
                        return {
                            // Standard
                            message: this.message,
                            name: this.name,
                            // Microsoft
                            description: this.description,
                            number: this.number,
                            // Mozilla
                            fileName: this.fileName,
                            lineNumber: this.lineNumber,
                            columnNumber: this.columnNumber,
                            stack: this.stack,
                            // Axios
                            config: this.config,
                            code: this.code
                        };
                    };
                    return error;
                };


                /***/
            }),

/***/ "./node_modules/axios/lib/core/mergeConfig.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/mergeConfig.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

                /**
                 * Config-specific merge-function which creates a new config-object
                 * by merging two configuration objects together.
                 *
                 * @param {Object} config1
                 * @param {Object} config2
                 * @returns {Object} New object resulting from merging config2 to config1
                 */
                module.exports = function mergeConfig(config1, config2) {
                    // eslint-disable-next-line no-param-reassign
                    config2 = config2 || {};
                    var config = {};

                    var valueFromConfig2Keys = ['url', 'method', 'params', 'data'];
                    var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy'];
                    var defaultToConfig2Keys = [
                        'baseURL', 'url', 'transformRequest', 'transformResponse', 'paramsSerializer',
                        'timeout', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',
                        'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress',
                        'maxContentLength', 'validateStatus', 'maxRedirects', 'httpAgent',
                        'httpsAgent', 'cancelToken', 'socketPath'
                    ];

                    utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
                        if (typeof config2[prop] !== 'undefined') {
                            config[prop] = config2[prop];
                        }
                    });

                    utils.forEach(mergeDeepPropertiesKeys, function mergeDeepProperties(prop) {
                        if (utils.isObject(config2[prop])) {
                            config[prop] = utils.deepMerge(config1[prop], config2[prop]);
                        } else if (typeof config2[prop] !== 'undefined') {
                            config[prop] = config2[prop];
                        } else if (utils.isObject(config1[prop])) {
                            config[prop] = utils.deepMerge(config1[prop]);
                        } else if (typeof config1[prop] !== 'undefined') {
                            config[prop] = config1[prop];
                        }
                    });

                    utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
                        if (typeof config2[prop] !== 'undefined') {
                            config[prop] = config2[prop];
                        } else if (typeof config1[prop] !== 'undefined') {
                            config[prop] = config1[prop];
                        }
                    });

                    var axiosKeys = valueFromConfig2Keys
                        .concat(mergeDeepPropertiesKeys)
                        .concat(defaultToConfig2Keys);

                    var otherKeys = Object
                        .keys(config2)
                        .filter(function filterAxiosKeys(key) {
                            return axiosKeys.indexOf(key) === -1;
                        });

                    utils.forEach(otherKeys, function otherKeysDefaultToConfig2(prop) {
                        if (typeof config2[prop] !== 'undefined') {
                            config[prop] = config2[prop];
                        } else if (typeof config1[prop] !== 'undefined') {
                            config[prop] = config1[prop];
                        }
                    });

                    return config;
                };


                /***/
            }),

/***/ "./node_modules/axios/lib/core/settle.js":
/*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                var createError = __webpack_require__(/*! ./createError */ "./node_modules/axios/lib/core/createError.js");

                /**
                 * Resolve or reject a Promise based on response status.
                 *
                 * @param {Function} resolve A function that resolves the promise.
                 * @param {Function} reject A function that rejects the promise.
                 * @param {object} response The response.
                 */
                module.exports = function settle(resolve, reject, response) {
                    var validateStatus = response.config.validateStatus;
                    if (!validateStatus || validateStatus(response.status)) {
                        resolve(response);
                    } else {
                        reject(createError(
                            'Request failed with status code ' + response.status,
                            response.config,
                            null,
                            response.request,
                            response
                        ));
                    }
                };


                /***/
            }),

/***/ "./node_modules/axios/lib/core/transformData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

                /**
                 * Transform the data for a request or a response
                 *
                 * @param {Object|String} data The data to be transformed
                 * @param {Array} headers The headers for the request or response
                 * @param {Array|Function} fns A single function or Array of functions
                 * @returns {*} The resulting transformed data
                 */
                module.exports = function transformData(data, headers, fns) {
                    /*eslint no-param-reassign:0*/
                    utils.forEach(fns, function transform(fn) {
                        data = fn(data, headers);
                    });

                    return data;
                };


                /***/
            }),

/***/ "./node_modules/axios/lib/defaults.js":
/*!********************************************!*\
  !*** ./node_modules/axios/lib/defaults.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";
/* WEBPACK VAR INJECTION */(function (process) {

                    var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
                    var normalizeHeaderName = __webpack_require__(/*! ./helpers/normalizeHeaderName */ "./node_modules/axios/lib/helpers/normalizeHeaderName.js");

                    var DEFAULT_CONTENT_TYPE = {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    };

                    function setContentTypeIfUnset(headers, value) {
                        if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
                            headers['Content-Type'] = value;
                        }
                    }

                    function getDefaultAdapter() {
                        var adapter;
                        if (typeof XMLHttpRequest !== 'undefined') {
                            // For browsers use XHR adapter
                            adapter = __webpack_require__(/*! ./adapters/xhr */ "./node_modules/axios/lib/adapters/xhr.js");
                        } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
                            // For node use HTTP adapter
                            adapter = __webpack_require__(/*! ./adapters/http */ "./node_modules/axios/lib/adapters/xhr.js");
                        }
                        return adapter;
                    }

                    var defaults = {
                        adapter: getDefaultAdapter(),

                        transformRequest: [function transformRequest(data, headers) {
                            normalizeHeaderName(headers, 'Accept');
                            normalizeHeaderName(headers, 'Content-Type');
                            if (utils.isFormData(data) ||
                                utils.isArrayBuffer(data) ||
                                utils.isBuffer(data) ||
                                utils.isStream(data) ||
                                utils.isFile(data) ||
                                utils.isBlob(data)
                            ) {
                                return data;
                            }
                            if (utils.isArrayBufferView(data)) {
                                return data.buffer;
                            }
                            if (utils.isURLSearchParams(data)) {
                                setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
                                return data.toString();
                            }
                            if (utils.isObject(data)) {
                                setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
                                return JSON.stringify(data);
                            }
                            return data;
                        }],

                        transformResponse: [function transformResponse(data) {
                            /*eslint no-param-reassign:0*/
                            if (typeof data === 'string') {
                                try {
                                    data = JSON.parse(data);
                                } catch (e) { /* Ignore */ }
                            }
                            return data;
                        }],

                        /**
                         * A timeout in milliseconds to abort a request. If set to 0 (default) a
                         * timeout is not created.
                         */
                        timeout: 0,

                        xsrfCookieName: 'XSRF-TOKEN',
                        xsrfHeaderName: 'X-XSRF-TOKEN',

                        maxContentLength: -1,

                        validateStatus: function validateStatus(status) {
                            return status >= 200 && status < 300;
                        }
                    };

                    defaults.headers = {
                        common: {
                            'Accept': 'application/json, text/plain, */*'
                        }
                    };

                    utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
                        defaults.headers[method] = {};
                    });

                    utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
                        defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
                    });

                    module.exports = defaults;

                    /* WEBPACK VAR INJECTION */
                }.call(this, __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js")))

                /***/
            }),

/***/ "./node_modules/axios/lib/helpers/bind.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                module.exports = function bind(fn, thisArg) {
                    return function wrap() {
                        var args = new Array(arguments.length);
                        for (var i = 0; i < args.length; i++) {
                            args[i] = arguments[i];
                        }
                        return fn.apply(thisArg, args);
                    };
                };


                /***/
            }),

/***/ "./node_modules/axios/lib/helpers/buildURL.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

                function encode(val) {
                    return encodeURIComponent(val).
                        replace(/%40/gi, '@').
                        replace(/%3A/gi, ':').
                        replace(/%24/g, '$').
                        replace(/%2C/gi, ',').
                        replace(/%20/g, '+').
                        replace(/%5B/gi, '[').
                        replace(/%5D/gi, ']');
                }

                /**
                 * Build a URL by appending params to the end
                 *
                 * @param {string} url The base of the url (e.g., http://www.google.com)
                 * @param {object} [params] The params to be appended
                 * @returns {string} The formatted url
                 */
                module.exports = function buildURL(url, params, paramsSerializer) {
                    /*eslint no-param-reassign:0*/
                    if (!params) {
                        return url;
                    }

                    var serializedParams;
                    if (paramsSerializer) {
                        serializedParams = paramsSerializer(params);
                    } else if (utils.isURLSearchParams(params)) {
                        serializedParams = params.toString();
                    } else {
                        var parts = [];

                        utils.forEach(params, function serialize(val, key) {
                            if (val === null || typeof val === 'undefined') {
                                return;
                            }

                            if (utils.isArray(val)) {
                                key = key + '[]';
                            } else {
                                val = [val];
                            }

                            utils.forEach(val, function parseValue(v) {
                                if (utils.isDate(v)) {
                                    v = v.toISOString();
                                } else if (utils.isObject(v)) {
                                    v = JSON.stringify(v);
                                }
                                parts.push(encode(key) + '=' + encode(v));
                            });
                        });

                        serializedParams = parts.join('&');
                    }

                    if (serializedParams) {
                        var hashmarkIndex = url.indexOf('#');
                        if (hashmarkIndex !== -1) {
                            url = url.slice(0, hashmarkIndex);
                        }

                        url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
                    }

                    return url;
                };


                /***/
            }),

/***/ "./node_modules/axios/lib/helpers/combineURLs.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                /**
                 * Creates a new URL by combining the specified URLs
                 *
                 * @param {string} baseURL The base URL
                 * @param {string} relativeURL The relative URL
                 * @returns {string} The combined URL
                 */
                module.exports = function combineURLs(baseURL, relativeURL) {
                    return relativeURL
                        ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
                        : baseURL;
                };


                /***/
            }),

/***/ "./node_modules/axios/lib/helpers/cookies.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

                module.exports = (
                    utils.isStandardBrowserEnv() ?

                        // Standard browser envs support document.cookie
                        (function standardBrowserEnv() {
                            return {
                                write: function write(name, value, expires, path, domain, secure) {
                                    var cookie = [];
                                    cookie.push(name + '=' + encodeURIComponent(value));

                                    if (utils.isNumber(expires)) {
                                        cookie.push('expires=' + new Date(expires).toGMTString());
                                    }

                                    if (utils.isString(path)) {
                                        cookie.push('path=' + path);
                                    }

                                    if (utils.isString(domain)) {
                                        cookie.push('domain=' + domain);
                                    }

                                    if (secure === true) {
                                        cookie.push('secure');
                                    }

                                    document.cookie = cookie.join('; ');
                                },

                                read: function read(name) {
                                    var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
                                    return (match ? decodeURIComponent(match[3]) : null);
                                },

                                remove: function remove(name) {
                                    this.write(name, '', Date.now() - 86400000);
                                }
                            };
                        })() :

                        // Non standard browser env (web workers, react-native) lack needed support.
                        (function nonStandardBrowserEnv() {
                            return {
                                write: function write() { },
                                read: function read() { return null; },
                                remove: function remove() { }
                            };
                        })()
                );


                /***/
            }),

/***/ "./node_modules/axios/lib/helpers/isAbsoluteURL.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                /**
                 * Determines whether the specified URL is absolute
                 *
                 * @param {string} url The URL to test
                 * @returns {boolean} True if the specified URL is absolute, otherwise false
                 */
                module.exports = function isAbsoluteURL(url) {
                    // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
                    // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
                    // by any combination of letters, digits, plus, period, or hyphen.
                    return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
                };


                /***/
            }),

/***/ "./node_modules/axios/lib/helpers/isURLSameOrigin.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

                module.exports = (
                    utils.isStandardBrowserEnv() ?

                        // Standard browser envs have full support of the APIs needed to test
                        // whether the request URL is of the same origin as current location.
                        (function standardBrowserEnv() {
                            var msie = /(msie|trident)/i.test(navigator.userAgent);
                            var urlParsingNode = document.createElement('a');
                            var originURL;

                            /**
                          * Parse a URL to discover it's components
                          *
                          * @param {String} url The URL to be parsed
                          * @returns {Object}
                          */
                            function resolveURL(url) {
                                var href = url;

                                if (msie) {
                                    // IE needs attribute set twice to normalize properties
                                    urlParsingNode.setAttribute('href', href);
                                    href = urlParsingNode.href;
                                }

                                urlParsingNode.setAttribute('href', href);

                                // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
                                return {
                                    href: urlParsingNode.href,
                                    protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
                                    host: urlParsingNode.host,
                                    search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
                                    hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
                                    hostname: urlParsingNode.hostname,
                                    port: urlParsingNode.port,
                                    pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
                                        urlParsingNode.pathname :
                                        '/' + urlParsingNode.pathname
                                };
                            }

                            originURL = resolveURL(window.location.href);

                            /**
                          * Determine if a URL shares the same origin as the current location
                          *
                          * @param {String} requestURL The URL to test
                          * @returns {boolean} True if URL shares the same origin, otherwise false
                          */
                            return function isURLSameOrigin(requestURL) {
                                var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
                                return (parsed.protocol === originURL.protocol &&
                                    parsed.host === originURL.host);
                            };
                        })() :

                        // Non standard browser envs (web workers, react-native) lack needed support.
                        (function nonStandardBrowserEnv() {
                            return function isURLSameOrigin() {
                                return true;
                            };
                        })()
                );


                /***/
            }),

/***/ "./node_modules/axios/lib/helpers/normalizeHeaderName.js":
/*!***************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/normalizeHeaderName.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

                module.exports = function normalizeHeaderName(headers, normalizedName) {
                    utils.forEach(headers, function processHeader(value, name) {
                        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
                            headers[normalizedName] = value;
                            delete headers[name];
                        }
                    });
                };


                /***/
            }),

/***/ "./node_modules/axios/lib/helpers/parseHeaders.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

                // Headers whose duplicates are ignored by node
                // c.f. https://nodejs.org/api/http.html#http_message_headers
                var ignoreDuplicateOf = [
                    'age', 'authorization', 'content-length', 'content-type', 'etag',
                    'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
                    'last-modified', 'location', 'max-forwards', 'proxy-authorization',
                    'referer', 'retry-after', 'user-agent'
                ];

                /**
                 * Parse headers into an object
                 *
                 * ```
                 * Date: Wed, 27 Aug 2014 08:58:49 GMT
                 * Content-Type: application/json
                 * Connection: keep-alive
                 * Transfer-Encoding: chunked
                 * ```
                 *
                 * @param {String} headers Headers needing to be parsed
                 * @returns {Object} Headers parsed into an object
                 */
                module.exports = function parseHeaders(headers) {
                    var parsed = {};
                    var key;
                    var val;
                    var i;

                    if (!headers) { return parsed; }

                    utils.forEach(headers.split('\n'), function parser(line) {
                        i = line.indexOf(':');
                        key = utils.trim(line.substr(0, i)).toLowerCase();
                        val = utils.trim(line.substr(i + 1));

                        if (key) {
                            if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
                                return;
                            }
                            if (key === 'set-cookie') {
                                parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
                            } else {
                                parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
                            }
                        }
                    });

                    return parsed;
                };


                /***/
            }),

/***/ "./node_modules/axios/lib/helpers/spread.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                /**
                 * Syntactic sugar for invoking a function and expanding an array for arguments.
                 *
                 * Common use case would be to use `Function.prototype.apply`.
                 *
                 *  ```js
                 *  function f(x, y, z) {}
                 *  var args = [1, 2, 3];
                 *  f.apply(null, args);
                 *  ```
                 *
                 * With `spread` this example can be re-written.
                 *
                 *  ```js
                 *  spread(function(x, y, z) {})([1, 2, 3]);
                 *  ```
                 *
                 * @param {Function} callback
                 * @returns {Function}
                 */
                module.exports = function spread(callback) {
                    return function wrap(arr) {
                        return callback.apply(null, arr);
                    };
                };


                /***/
            }),

/***/ "./node_modules/axios/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                "use strict";


                var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");

                /*global toString:true*/

                // utils is a library of generic helper functions non-specific to axios

                var toString = Object.prototype.toString;

                /**
                 * Determine if a value is an Array
                 *
                 * @param {Object} val The value to test
                 * @returns {boolean} True if value is an Array, otherwise false
                 */
                function isArray(val) {
                    return toString.call(val) === '[object Array]';
                }

                /**
                 * Determine if a value is undefined
                 *
                 * @param {Object} val The value to test
                 * @returns {boolean} True if the value is undefined, otherwise false
                 */
                function isUndefined(val) {
                    return typeof val === 'undefined';
                }

                /**
                 * Determine if a value is a Buffer
                 *
                 * @param {Object} val The value to test
                 * @returns {boolean} True if value is a Buffer, otherwise false
                 */
                function isBuffer(val) {
                    return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
                        && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
                }

                /**
                 * Determine if a value is an ArrayBuffer
                 *
                 * @param {Object} val The value to test
                 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
                 */
                function isArrayBuffer(val) {
                    return toString.call(val) === '[object ArrayBuffer]';
                }

                /**
                 * Determine if a value is a FormData
                 *
                 * @param {Object} val The value to test
                 * @returns {boolean} True if value is an FormData, otherwise false
                 */
                function isFormData(val) {
                    return (typeof FormData !== 'undefined') && (val instanceof FormData);
                }

                /**
                 * Determine if a value is a view on an ArrayBuffer
                 *
                 * @param {Object} val The value to test
                 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
                 */
                function isArrayBufferView(val) {
                    var result;
                    if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
                        result = ArrayBuffer.isView(val);
                    } else {
                        result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
                    }
                    return result;
                }

                /**
                 * Determine if a value is a String
                 *
                 * @param {Object} val The value to test
                 * @returns {boolean} True if value is a String, otherwise false
                 */
                function isString(val) {
                    return typeof val === 'string';
                }

                /**
                 * Determine if a value is a Number
                 *
                 * @param {Object} val The value to test
                 * @returns {boolean} True if value is a Number, otherwise false
                 */
                function isNumber(val) {
                    return typeof val === 'number';
                }

                /**
                 * Determine if a value is an Object
                 *
                 * @param {Object} val The value to test
                 * @returns {boolean} True if value is an Object, otherwise false
                 */
                function isObject(val) {
                    return val !== null && typeof val === 'object';
                }

                /**
                 * Determine if a value is a Date
                 *
                 * @param {Object} val The value to test
                 * @returns {boolean} True if value is a Date, otherwise false
                 */
                function isDate(val) {
                    return toString.call(val) === '[object Date]';
                }

                /**
                 * Determine if a value is a File
                 *
                 * @param {Object} val The value to test
                 * @returns {boolean} True if value is a File, otherwise false
                 */
                function isFile(val) {
                    return toString.call(val) === '[object File]';
                }

                /**
                 * Determine if a value is a Blob
                 *
                 * @param {Object} val The value to test
                 * @returns {boolean} True if value is a Blob, otherwise false
                 */
                function isBlob(val) {
                    return toString.call(val) === '[object Blob]';
                }

                /**
                 * Determine if a value is a Function
                 *
                 * @param {Object} val The value to test
                 * @returns {boolean} True if value is a Function, otherwise false
                 */
                function isFunction(val) {
                    return toString.call(val) === '[object Function]';
                }

                /**
                 * Determine if a value is a Stream
                 *
                 * @param {Object} val The value to test
                 * @returns {boolean} True if value is a Stream, otherwise false
                 */
                function isStream(val) {
                    return isObject(val) && isFunction(val.pipe);
                }

                /**
                 * Determine if a value is a URLSearchParams object
                 *
                 * @param {Object} val The value to test
                 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
                 */
                function isURLSearchParams(val) {
                    return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
                }

                /**
                 * Trim excess whitespace off the beginning and end of a string
                 *
                 * @param {String} str The String to trim
                 * @returns {String} The String freed of excess whitespace
                 */
                function trim(str) {
                    return str.replace(/^\s*/, '').replace(/\s*$/, '');
                }

                /**
                 * Determine if we're running in a standard browser environment
                 *
                 * This allows axios to run in a web worker, and react-native.
                 * Both environments support XMLHttpRequest, but not fully standard globals.
                 *
                 * web workers:
                 *  typeof window -> undefined
                 *  typeof document -> undefined
                 *
                 * react-native:
                 *  navigator.product -> 'ReactNative'
                 * nativescript
                 *  navigator.product -> 'NativeScript' or 'NS'
                 */
                function isStandardBrowserEnv() {
                    if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                        navigator.product === 'NativeScript' ||
                        navigator.product === 'NS')) {
                        return false;
                    }
                    return (
                        typeof window !== 'undefined' &&
                        typeof document !== 'undefined'
                    );
                }

                /**
                 * Iterate over an Array or an Object invoking a function for each item.
                 *
                 * If `obj` is an Array callback will be called passing
                 * the value, index, and complete array for each item.
                 *
                 * If 'obj' is an Object callback will be called passing
                 * the value, key, and complete object for each property.
                 *
                 * @param {Object|Array} obj The object to iterate
                 * @param {Function} fn The callback to invoke for each item
                 */
                function forEach(obj, fn) {
                    // Don't bother if no value provided
                    if (obj === null || typeof obj === 'undefined') {
                        return;
                    }

                    // Force an array if not already something iterable
                    if (typeof obj !== 'object') {
                        /*eslint no-param-reassign:0*/
                        obj = [obj];
                    }

                    if (isArray(obj)) {
                        // Iterate over array values
                        for (var i = 0, l = obj.length; i < l; i++) {
                            fn.call(null, obj[i], i, obj);
                        }
                    } else {
                        // Iterate over object keys
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key)) {
                                fn.call(null, obj[key], key, obj);
                            }
                        }
                    }
                }

                /**
                 * Accepts varargs expecting each argument to be an object, then
                 * immutably merges the properties of each object and returns result.
                 *
                 * When multiple objects contain the same key the later object in
                 * the arguments list will take precedence.
                 *
                 * Example:
                 *
                 * ```js
                 * var result = merge({foo: 123}, {foo: 456});
                 * console.log(result.foo); // outputs 456
                 * ```
                 *
                 * @param {Object} obj1 Object to merge
                 * @returns {Object} Result of all merge properties
                 */
                function merge(/* obj1, obj2, obj3, ... */) {
                    var result = {};
                    function assignValue(val, key) {
                        if (typeof result[key] === 'object' && typeof val === 'object') {
                            result[key] = merge(result[key], val);
                        } else {
                            result[key] = val;
                        }
                    }

                    for (var i = 0, l = arguments.length; i < l; i++) {
                        forEach(arguments[i], assignValue);
                    }
                    return result;
                }

                /**
                 * Function equal to merge with the difference being that no reference
                 * to original objects is kept.
                 *
                 * @see merge
                 * @param {Object} obj1 Object to merge
                 * @returns {Object} Result of all merge properties
                 */
                function deepMerge(/* obj1, obj2, obj3, ... */) {
                    var result = {};
                    function assignValue(val, key) {
                        if (typeof result[key] === 'object' && typeof val === 'object') {
                            result[key] = deepMerge(result[key], val);
                        } else if (typeof val === 'object') {
                            result[key] = deepMerge({}, val);
                        } else {
                            result[key] = val;
                        }
                    }

                    for (var i = 0, l = arguments.length; i < l; i++) {
                        forEach(arguments[i], assignValue);
                    }
                    return result;
                }

                /**
                 * Extends object a by mutably adding to it the properties of object b.
                 *
                 * @param {Object} a The object to be extended
                 * @param {Object} b The object to copy properties from
                 * @param {Object} thisArg The object to bind function to
                 * @return {Object} The resulting value of object a
                 */
                function extend(a, b, thisArg) {
                    forEach(b, function assignValue(val, key) {
                        if (thisArg && typeof val === 'function') {
                            a[key] = bind(val, thisArg);
                        } else {
                            a[key] = val;
                        }
                    });
                    return a;
                }

                module.exports = {
                    isArray: isArray,
                    isArrayBuffer: isArrayBuffer,
                    isBuffer: isBuffer,
                    isFormData: isFormData,
                    isArrayBufferView: isArrayBufferView,
                    isString: isString,
                    isNumber: isNumber,
                    isObject: isObject,
                    isUndefined: isUndefined,
                    isDate: isDate,
                    isFile: isFile,
                    isBlob: isBlob,
                    isFunction: isFunction,
                    isStream: isStream,
                    isURLSearchParams: isURLSearchParams,
                    isStandardBrowserEnv: isStandardBrowserEnv,
                    forEach: forEach,
                    merge: merge,
                    deepMerge: deepMerge,
                    extend: extend,
                    trim: trim
                };


                /***/
            }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function (module, exports) {

                // shim for using process in browser
                var process = module.exports = {};

                // cached from whatever global is present so that test runners that stub it
                // don't break things.  But we need to wrap it in a try catch in case it is
                // wrapped in strict mode code which doesn't define any globals.  It's inside a
                // function because try/catches deoptimize in certain engines.

                var cachedSetTimeout;
                var cachedClearTimeout;

                function defaultSetTimout() {
                    throw new Error('setTimeout has not been defined');
                }
                function defaultClearTimeout() {
                    throw new Error('clearTimeout has not been defined');
                }
                (function () {
                    try {
                        if (typeof setTimeout === 'function') {
                            cachedSetTimeout = setTimeout;
                        } else {
                            cachedSetTimeout = defaultSetTimout;
                        }
                    } catch (e) {
                        cachedSetTimeout = defaultSetTimout;
                    }
                    try {
                        if (typeof clearTimeout === 'function') {
                            cachedClearTimeout = clearTimeout;
                        } else {
                            cachedClearTimeout = defaultClearTimeout;
                        }
                    } catch (e) {
                        cachedClearTimeout = defaultClearTimeout;
                    }
                }())
                function runTimeout(fun) {
                    if (cachedSetTimeout === setTimeout) {
                        //normal enviroments in sane situations
                        return setTimeout(fun, 0);
                    }
                    // if setTimeout wasn't available but was latter defined
                    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                        cachedSetTimeout = setTimeout;
                        return setTimeout(fun, 0);
                    }
                    try {
                        // when when somebody has screwed with setTimeout but no I.E. maddness
                        return cachedSetTimeout(fun, 0);
                    } catch (e) {
                        try {
                            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                            return cachedSetTimeout.call(null, fun, 0);
                        } catch (e) {
                            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                            return cachedSetTimeout.call(this, fun, 0);
                        }
                    }


                }
                function runClearTimeout(marker) {
                    if (cachedClearTimeout === clearTimeout) {
                        //normal enviroments in sane situations
                        return clearTimeout(marker);
                    }
                    // if clearTimeout wasn't available but was latter defined
                    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                        cachedClearTimeout = clearTimeout;
                        return clearTimeout(marker);
                    }
                    try {
                        // when when somebody has screwed with setTimeout but no I.E. maddness
                        return cachedClearTimeout(marker);
                    } catch (e) {
                        try {
                            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                            return cachedClearTimeout.call(null, marker);
                        } catch (e) {
                            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                            return cachedClearTimeout.call(this, marker);
                        }
                    }



                }
                var queue = [];
                var draining = false;
                var currentQueue;
                var queueIndex = -1;

                function cleanUpNextTick() {
                    if (!draining || !currentQueue) {
                        return;
                    }
                    draining = false;
                    if (currentQueue.length) {
                        queue = currentQueue.concat(queue);
                    } else {
                        queueIndex = -1;
                    }
                    if (queue.length) {
                        drainQueue();
                    }
                }

                function drainQueue() {
                    if (draining) {
                        return;
                    }
                    var timeout = runTimeout(cleanUpNextTick);
                    draining = true;

                    var len = queue.length;
                    while (len) {
                        currentQueue = queue;
                        queue = [];
                        while (++queueIndex < len) {
                            if (currentQueue) {
                                currentQueue[queueIndex].run();
                            }
                        }
                        queueIndex = -1;
                        len = queue.length;
                    }
                    currentQueue = null;
                    draining = false;
                    runClearTimeout(timeout);
                }

                process.nextTick = function (fun) {
                    var args = new Array(arguments.length - 1);
                    if (arguments.length > 1) {
                        for (var i = 1; i < arguments.length; i++) {
                            args[i - 1] = arguments[i];
                        }
                    }
                    queue.push(new Item(fun, args));
                    if (queue.length === 1 && !draining) {
                        runTimeout(drainQueue);
                    }
                };

                // v8 likes predictible objects
                function Item(fun, array) {
                    this.fun = fun;
                    this.array = array;
                }
                Item.prototype.run = function () {
                    this.fun.apply(null, this.array);
                };
                process.title = 'browser';
                process.browser = true;
                process.env = {};
                process.argv = [];
                process.version = ''; // empty string to avoid regexp issues
                process.versions = {};

                function noop() { }

                process.on = noop;
                process.addListener = noop;
                process.once = noop;
                process.off = noop;
                process.removeListener = noop;
                process.removeAllListeners = noop;
                process.emit = noop;
                process.prependListener = noop;
                process.prependOnceListener = noop;

                process.listeners = function (name) { return [] }

                process.binding = function (name) {
                    throw new Error('process.binding is not supported');
                };

                process.cwd = function () { return '/' };
                process.chdir = function (dir) {
                    throw new Error('process.chdir is not supported');
                };
                process.umask = function () { return 0; };


                /***/
            }),

/***/ 0:
/*!***************************************!*\
  !*** multi ./Resources/vendor/app.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                module.exports = __webpack_require__(/*! D:\visual studio\Tecflex\SISCOP\Sln_CBX_Web_SISCOP\CBX_Web_SISCOP\Resources\vendor\app.js */"./Resources/vendor/app.js");


                /***/
            })

        /******/
    });

//#endregion FUNCIONES


/* 1. General functions */
/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
//#region FUNCIONES GENERALES
const queryString = window.location.search;
const urlParams = new URLSearchParams(queryString);
const product = urlParams.get('intIdMenu')

const capitalize = (s) => {
    if (typeof s !== 'string') return ''
    return s.charAt(0).toUpperCase() + s.slice(1)
}

window.SISCOP.profile.forEach(e => {
    var item = e.menu.find(x => x.intIdMenu === parseInt(product))
    if (item) {
        $("#PadreMenu_txt").html(item.strNomMenu)
        $("#HijoMenu_txt").html(item.strSubMenu)
    }
})

//all ready functions
$(document).ready(function () {
    //if (typeof Date.prototype.GetHora !== 'function') { timeStamp.prototype.GetHora = function () { if (this === null) return ''; return ('00' + this. .getHours()).slice(-2) + ":" + ('00' + this.getMinutes()).slice(-2); } }
    //global functions
    init_sidebar();
    navCurrentHistory();
    init_ProgresBar();
    init_InputMask();
    init_TagsInput();
    switcheryLoad();
    cargarDaterangePicker();
    init_daterangepicker();
    //añadido pruebas 10.03.2021 ES:
    init_daterangepicker_custom();
    init_checkBox_styles();
    init_datatables_net();
    init_SmartWizard();
    init_compose();
    init_charts();
    //calcu_one();
    calcu_two();
    calcu_third();
    calcu_one_reportes();
    //calcu_two_reportes();
    //calcu_third_reportes();
    //habilitar_check();
    DescargarUnidades();
    //LlenarPeriodo();


    //_datatableCargo();

    //$('#Legal').keypress(function () {
    //    console.log("Handler for .keypress() called.");
    //});

    //$('#chk1').change(function () {
    //    alert($(this).prop('checked'))
    //})

    let arrayCheckedConsumos = [];
    let dataConsumoGlobal = null;
    let dataConsumoGlobal7 = null;
    let datahorariocheck3 = [];
    let dataCheckConsumos = [];
    let dataConsumosCheckBackup = [];
});

let arrayCheckedConsumos = [];
let dataCheckConsumos = [];

function GetCampJerar() {
    $.post(
        '/Organizacion/GetCampJerar',
        {},
        (response) => {
            response.forEach(element => {
                $('#campJerar').append(
                    ' <option value="' + element.IntIdJerOrg + '">' + element.strNomJerOrg + '</option>'
                );
            });
        }
    );
}


(function ($, sr) {
    // debouncing function from John Hann
    // http://unscriptable.com/index.php/2009/03/20/debouncing-javascript-methods/
    var debounce = function (func, threshold, execAsap) {
        var timeout;

        return function debounced() {
            var obj = this, args = arguments;
            function delayed() {
                if (!execAsap)
                    func.apply(obj, args);
                timeout = null;
            }

            if (timeout)
                clearTimeout(timeout);
            else if (execAsap)
                func.apply(obj, args);

            timeout = setTimeout(delayed, threshold || 100);
        };
    };

    // smartresize
    jQuery.fn[sr] = function (fn) { return fn ? this.bind('resize', debounce(fn)) : this.trigger(sr); };

})(jQuery, 'smartresize');
/**
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

const APPCONFIG = {
    "loaderHtml": `<div class="container-loadin"><div class="loading-circle-app-div"><div class="loading-circle-app"></div></div></div>`,
    "config": {
        "dateFormat": "DD/MM/YYYY",
    }
}

//miercoles17.03.21
var CURRENT_URL = window.location.href.split('#')[0].split('?')[0],
    $BODY = $('body'),
    $MENU_TOGGLE = $('#menu_toggle'),
    $SIDEBAR_MENU = $('#sidebar-menu'),
    $SIDEBAR_FOOTER = $('.sidebar-footer'),
    $LEFT_COL = $('.left_col'),
    $RIGHT_COL = $('.right_col'),
    $NAV_MENU = $('.nav_menu'),
    $FOOTER = $('footer');

//Añadido Hebert 13.07.2021
///////////////////////////////////////////////////////////////////////////////////////////01_HMG_05.07.21
var CURRENT_URL_MENU = window.location.href.split('#')[0].split('?')[1];
var id = $('.side-menu a[href*="' + CURRENT_URL_MENU + '"]').attr("id");
var ul_visible_or_not = false;
///////////////////////////////////////////////////////////////////////////////////////////

// Sidebar
function init_sidebar() {
    //Bloque añadido Hebert 13.07.2021
    ///////////////////////////////////////////////////////////////////////////////////////////02_HMG_05.07.21
    $('.side-menu a[href*="' + CURRENT_URL_MENU + '"]').css("background-color", "#374A5E"); //  //#1abb9c
    $('#' + id + 'LI').addClass('active');
    $('#' + id + 'UL').css("display", "block");
    ///////////////////////////////////////////////////////////////////////////////////////////

    // TODO: This is some kind of easy fix, maybe we can improve this
    var setContentHeight = function () {
        // reset height
        $RIGHT_COL.css('min-height', $(window).height());

        var bodyHeight = $BODY.outerHeight(),
            footerHeight = $BODY.hasClass('footer_fixed') ? -10 : $FOOTER.height(),
            leftColHeight = $LEFT_COL.eq(1).height() + $SIDEBAR_FOOTER.height(),
            contentHeight = bodyHeight < leftColHeight ? leftColHeight : bodyHeight;

        // normalize content
        contentHeight -= $NAV_MENU.height() + footerHeight;

        $RIGHT_COL.css('min-height', contentHeight);
    };

    $SIDEBAR_MENU.find('a').on('click', function (ev) {
        console.log('clicked - sidebar_menu');
        //Añadido Hebert 13.07.2021
        ///////////////////////////////////////////////////////////////////////////////////////////03_HMG_05.07.21
        if ($('#' + id + 'UL').is(':visible') == true) {
            ul_visible_or_not = true;
            //alert(ul_visible_or_not);
        }
        ///////////////////////////////////////////////////////////////////////////////////////////

        var $li = $(this).parent();

        if ($li.is('.active')) {
            $li.removeClass('active active-sm');
            $('ul:first', $li).slideUp(function () {
                setContentHeight();
            });
        } else {
            // prevent closing menu if we are on child menu
            if (!$li.parent().is('.child_menu')) {
                $SIDEBAR_MENU.find('li').removeClass('active active-sm');
                $SIDEBAR_MENU.find('li ul').slideUp();
            } else {
                if ($BODY.is(".nav-sm")) {
                    $li.parent().find("li").removeClass("active active-sm");
                    $li.parent().find("li ul").slideUp();
                }
            }
            $li.addClass('active');

            $('ul:first', $li).slideDown(function () {
                setContentHeight();
            });
        }
    });

    // toggle small or large menu //miercoles17.03.21
    $MENU_TOGGLE.on('click', function () {
        console.log('clicked - menu toggle');

        if ($BODY.hasClass('nav-md')) {
            $(".site_title img").attr("src", "/images/logo_short.jpeg");
            $(".site_title").addClass("p-0")
            $SIDEBAR_MENU.find('li.active ul').hide();
            $SIDEBAR_MENU.find('li.active').addClass('active-sm').removeClass('active');
        } else {
            $(".site_title img").attr("src", "/images/logo_layout.png");
            $(".site_title").removeClass("p-0")
            $SIDEBAR_MENU.find('li.active-sm ul').show();
            $SIDEBAR_MENU.find('li.active-sm').addClass('active').removeClass('active-sm');
        }

        $BODY.toggleClass('nav-md nav-sm');

        setContentHeight();

        $('.dataTable').each(function () { $(this).dataTable().fnDraw(); });


        //----------AÑADIDO 06.05.2021------------------------------------
        //CONSULTAR EL CODIGO DE LA VENTANA-MENU: USO EXCLUSIVO TOMA DE CONSUMO
        $.post(
            '/Seguridad/setCoMenuGlo_',
            {
                CoMenu: '',
                Operac: 'GET',
            },
            response => {
               //añadido 06.05.2021 condicion solo para Toma de Consumo
                let CODIGO_MENU_TOMA = response;
                if (CODIGO_MENU_TOMA=== 'M0314') {
                    focusMethod();
                }
            })
        //----------FIN AÑADIDO 06.05.2021------------------------------------

    });

    //comentado inicio 19.07.2021
    // check active menu
    $SIDEBAR_MENU.find('a[href="' + CURRENT_URL + '"]').parent('li').addClass('current-page');

    $SIDEBAR_MENU.find('a').filter(function () {
        return this.href == CURRENT_URL;
    }).parent('li').addClass('current-page').parents('ul').slideDown(function () {
        setContentHeight();
    }).parent().addClass('active');
    //comentado fin 19.07.2021

    // recompute content when resizing
    $(window).smartresize(function () {
        setContentHeight();
    });

    setContentHeight();

    //fixed sidebar
    if ($.fn.mCustomScrollbar) {
        $('.menu_fixed').mCustomScrollbar({
            autoHideScrollbar: true,
            theme: 'minimal',
            mouseWheel: { preventDefault: true }
        });
    }
};
//Fin Sidebar



// Progressbar
function init_ProgresBar() {
    if ($(".progress .progress-bar")[0]) {
        $('.progress .progress-bar').progressbar();
    }
}
// /Progressbar

/* SMART WIZARD */

function init_SmartWizard() {

    if (typeof ($.fn.smartWizard) === 'undefined') { return; }

    $('#wizard').smartWizard({
        selected: 0,
        //labelNext: 'Siguiente',
        //labelPrevious: 'Anterior',
        //labelFinish: 'Último',
        enableFinishButton: true,
        enableAllSteps: true
    });

    $('#wizard_verticle').smartWizard({
        transitionEffect: 'slide'
    });

    $('.buttonNext').hide();//.addClass('btn btn-success');
    $('.buttonPrevious').hide();//.addClass('btn btn-primary');
    $('.buttonFinish').hide();//.addClass('btn btn-default');

};

/* INPUT MASK */

function init_InputMask() {
    if (typeof ($.fn.inputmask) === 'undefined') { return; }
    $(":input").inputmask();
};

//Preview Image
function ShowPreview(input) {
    if (input.files && input.files[0]) {
        var ImageDir = new FileReader();
        ImageDir.onload = function (e) {
            $('#impPrev').attr('src', e.target.result);
        }
        ImageDir.readAsDataURL(input.files[0]);
    }
}


//tags input
function init_TagsInput() {

    if (typeof $.fn.tagsInput !== 'undefined') {

        $('#tags_1').tagsInput({
            width: 'auto'
        });
        $('#tags_2').tagsInput({
            width: 'auto'
        });
    }
};


//Navegation History current
function navCurrentHistory() {
    //count elements child of class breadcrumb
    var cantChild = $('.breadcrumb > a').length;
    cantChild = (cantChild - 1) * 10;  //(cantidad de elementos -1 ) * el tamaño de cada item de la clase .breadcrumb__step =>Default value=10%;
    cantChild = 100 - cantChild;    //100% (total del espacio) - tamño de items.
    /* console.log(cantChild); */
    //$('.breadcrumb a:last-child').css('width', cantChild + '%');
}

//icheck
function init_checkBox_styles() {
    if ($("input.flat")[0]) {
        $(document).ready(function () {
            $('input.flat').iCheck({
                checkboxClass: 'icheckbox_flat-blue',
                radioClass: 'iradio_flat-blue'
            });
        });
    }
}

// Switchery
function switcheryLoad() {

    if ($(".js-switch")[0]) {
        var elems = Array.prototype.slice.call(document.querySelectorAll('.js-switch'));
        elems.forEach(function (html) {
            var switchery = new Switchery(html, {
                color: '#26B99A'
            });
        });
    }

}

//Datatables.net formating
function init_datatables_net() {
    $('.datatables-net-format').dataTable({
        lengthMenu: [10, 25, 50],
        responsive: true,
        language: {
            lengthMenu: 'Mostrar _MENU_ Items',
            info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
            infoEmpty: 'No hay Items para mostrar',
            search: 'Buscar: ',
            sSearchPlaceholder: 'Criterio de búsqueda',
            zeroRecords: 'No se encontraron registros coincidentes',
            infoFiltered: '(Filtrado de _MAX_ totales Items)',
            paginate: {
                previous: 'Anterior',
                next: 'Siguiente'
            }
        }
    });
}


function init_datatables_net_nuevo() {
    $('.datatables-net-format').dataTable({
        lengthMenu: [10, 25, 50],
        responsive: true,
        language: {
            lengthMenu: 'Mostrar _MENU_ Items',
            info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
            infoEmpty: 'No hay Items para mostrar',
            search: 'Buscar: ',
            sSearchPlaceholder: 'Criterio de búsqueda',
            zeroRecords: 'No se encontraron registros coincidentes',
            infoFiltered: '(Filtrado de _MAX_ totales Items)',
            paginate: {
                previous: 'Anterior',
                next: 'Siguiente'
            }
        }
    });
}


function init_daterangepicker_custom(idDatepicker = 'rangedatepickergeneral', rangeDateInicial = { startDate: moment(), endDate: moment() }, dateFormato = 'DD/MM/YYYY', ) {

    //var dateCurrent = moment().format(dateFormato);//comentado 26.08

    if (typeof ($.fn.daterangepicker) === 'undefined') { return; }
    var cb = function (start, end, label) {
        console.log(start.toISOString(), end.toISOString(), label);
        $(`#${idDatepicker} span`).html(start.format(dateFormato) + ' - ' + end.format(dateFormato));
    };
    //23.07.2021 A
    var dateCurrent = moment().format('DD/MM/YYYY').substr(-4, 4);
    var fechaInicial = '01/01/1900';
    var aniotope = parseInt(dateCurrent, 10) + 10;
    var anioinicio = parseInt(fechaInicial.substr(-4, 4), 10)
    var fechaTope = '31/12/' + aniotope.toString()
    var rango = (aniotope - anioinicio + 1) * 12 //en meses

    var optionSet1 = {
        startDate: rangeDateInicial.startDate,
        endDate: rangeDateInicial.endDate,
        minDate: fechaInicial,
        maxDate: fechaTope,
        dateLimit: {
            months: rango//12 * 15
        },
        linkedCalendars: false,
        showDropdowns: true,
        showWeekNumbers: false,
        timePicker: false,
        timePickerIncrement: 1,
        timePicker12Hour: true,
        ranges: {
            'Hoy': [moment(), moment()],
            'Ayer': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
            'Últimos 7 días': [moment().subtract(6, 'days'), moment()],
            'Últimos 30 días': [moment().subtract(29, 'days'), moment()],
            'Este Mes': [moment().startOf('month'), moment().endOf('month')],
            'Último Mes': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')],
            'Último Año': [moment().subtract(0, 'year').startOf('year'), moment().subtract(0, 'year').endOf('year')]
        },
        opens: 'left',
        buttonClasses: ['btn btn-default'],
        applyClass: 'btn-small btn-primary',
        cancelClass: 'btn-small',
        format: dateFormato,
        separator: ' to ',
        language: 'es',
        locale: {
            applyLabel: 'Consultar',
            cancelLabel: 'Cancelar',
            fromLabel: 'From',
            toLabel: 'To',
            customRangeLabel: 'Elegir Rango',
            daysOfWeek: ['Do', 'Lu', 'Ma', 'Mi', 'Ju', 'Vi', 'Sa'],
            monthNames: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],
            firstDay: 1,
            format: dateFormato
        }
    };

    $(`#${idDatepicker} span`).html(rangeDateInicial.startDate.format(dateFormato) + ' - ' + rangeDateInicial.endDate.format(dateFormato));

    $(`#${idDatepicker}`).daterangepicker(optionSet1, cb);
    $(`#${idDatepicker}`).on('show.daterangepicker', function () {
        //console.log("show event fired");
    });
    $(`#${idDatepicker}`).on('hide.daterangepicker', function () {
        //console.log("hide event fired");
    });
    $(`#${idDatepicker}`).on('apply.daterangepicker', function (ev, picker) {
        // console.log("Fechas Aplicadas: " + picker.startDate.format(dateFormato) + " to " + picker.endDate.format(dateFormato));

    });
    $(`#${idDatepicker}`).on('cancel.daterangepicker', function (ev, picker) {
        //console.log("cancel event fired");
    });
    $('#options1').click(function () {
        $(`#${idDatepicker}`).data('daterangepicker').setOptions(optionSet1, cb);
    });
    $('#options2').click(function () {
        $(`#${idDatepicker}`).data('daterangepicker').setOptions(optionSet1, cb);//$(`#${idDatepicker}`).data('daterangepicker').setOptions(optionSet2, cb);
    });
    $('#destroy').click(function () {
        $(`#${idDatepicker}`).data('daterangepicker').remove();
    });

}

var rangeDateInicial_ = '01/01/' + moment().format('DD/MM/YYYY').substr(-4, 4);//26.08.2021
var rangeDateFinal_ = '31/12/' + moment().format('DD/MM/YYYY').substr(-4, 4);//26.08.2021
function Datos_Range(fechaIni_, fechaFin_) {
    rangeDateInicial_ = fechaIni_;
    rangeDateFinal_ = fechaFin_;
}
function init_daterangepicker() {

    //fechaInicio = rangeDateInicial_ ;
    //fechaFin = rangeDateFinal_ ;
    fechaInicio = '01/01/' + moment().format('DD/MM/YYYY').substr(-4, 4);
    fechaFin = '31/12/' + moment().format('DD/MM/YYYY').substr(-4, 4);

    if (typeof ($.fn.daterangepicker) === 'undefined') { return; }

    var cb = function (start, end, label) {
        console.log(start.toISOString(), end.toISOString(), label);
        $('.range-datepicker span').html(start.format('DD/MM/YYYY') + ' - ' + end.format('DD/MM/YYYY'));
    };
    //23.07.2021 B
    var dateCurrent = moment().format('DD/MM/YYYY').substr(-4, 4);
    var fechaInicial = '01/01/1900';
    var aniotope = parseInt(dateCurrent, 10) + 10;
    var anioinicio = parseInt(fechaInicial.substr(-4, 4), 10)
    var fechaTope = '31/12/' + aniotope.toString()
    var rango = (aniotope - anioinicio + 1) * 12 //en meses

    var optionSet1 = {
        startDate: fechaInicio,
        endDate: fechaFin,
        minDate: fechaInicial,
        maxDate: fechaTope,
        dateLimit: {
            months: rango
        },
        linkedCalendars: false,
        showDropdowns: true,
        showWeekNumbers: false,
        timePicker: false,
        timePickerIncrement: 1,
        timePicker12Hour: true,
        ranges: {
            'Hoy': [moment(), moment()],
            'Ayer': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
            'Últimos 7 días': [moment().subtract(6, 'days'), moment()],
            'Últimos 30 días': [moment().subtract(29, 'days'), moment()],
            'Este Mes': [moment().startOf('month'), moment().endOf('month')],
            'Último Mes': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')],
            'Último Año': [moment().subtract(0, 'year').startOf('year'), moment().subtract(0, 'year').endOf('year')]
        },
        opens: 'left',
        buttonClasses: ['btn btn-default'],
        applyClass: 'btn-small btn-primary',
        cancelClass: 'btn-small',
        format: 'DD/MM/YYYY',
        separator: ' to ',
        language: 'es',
        locale: {
            applyLabel: 'Consultar',
            cancelLabel: 'Cancelar',
            fromLabel: 'From',
            toLabel: 'To',
            customRangeLabel: 'Elegir Rango',
            daysOfWeek: ['Do', 'Lu', 'Ma', 'Mi', 'Ju', 'Vi', 'Sa'],
            monthNames: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],
            firstDay: 1,
            format: 'DD/MM/YYYY'
        }
    };

    $('.range-datepicker span').html(fechaInicio + ' - ' + fechaFin);

    $('.range-datepicker').daterangepicker(optionSet1, cb);
    $('.range-datepicker').on('showCalendar.daterangepicker', function () {
        //$(".calendar.left").find("td.available:contains('10')").click()
        //$(".calendar.left").hide()
        console.log("show event fired TEST");
    });
    $('.range-datepicker').on('hide.daterangepicker', function () {
        console.log("hide event fired");
    });
    $('.range-datepicker').on('apply.daterangepicker', function (ev, picker) {
        console.log("Fechas Aplicadas: " + picker.startDate.format('DD/MM/YYYY') + " to " + picker.endDate.format('DD/MM/YYYY'));

    });
    $('.range-datepicker').on('cancel.daterangepicker', function (ev, picker) {
        console.log("cancel event fired");
    });
    $('#options1').click(function () {
        $('.range-datepicker').data('daterangepicker').setOptions(optionSet1, cb);
    });
    $('#options2').click(function () {
        $('.range-datepicker').data('daterangepicker').setOptions(optionSet2, cb);
    });
    $('#destroy').click(function () {
        $('.range-datepicker').data('daterangepicker').remove();
    });

}

//datatable settings
var _datatableLanguaje = {
    lengthMenu: 'Mostrar _MENU_ Items',
    info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
    infoEmpty: 'No hay Items para mostrar',
    search: 'Buscar: ',
    sSearchPlaceholder: 'Criterio de búsqueda',
    zeroRecords: 'No se encontraron registros coincidentes',
    infoFiltered: '(Filtrado de _MAX_  Items en total)',
    paginate: {
        previous: 'Anterior',
        next: 'Siguiente'
    }
};

//Theme Charts
var theme = {
    color: [
        '#26B99A', '#34495E', '#BDC3C7', '#3498DB',
        '#9B59B6', '#8abb6f', '#759c6a', '#bfd3b7'
    ],

    title: {
        itemGap: 8,
        textStyle: {
            fontWeight: 'normal',
            color: '#408829'
        }
    },

    dataRange: {
        color: ['#1f610a', '#97b58d']
    },

    toolbox: {
        color: ['#408829', '#408829', '#408829', '#408829']
    },

    tooltip: {
        backgroundColor: 'rgba(0,0,0,0.5)',
        axisPointer: {
            type: 'line',
            lineStyle: {
                color: '#408829',
                type: 'dashed'
            },
            crossStyle: {
                color: '#408829'
            },
            shadowStyle: {
                color: 'rgba(200,200,200,0.3)'
            }
        }
    },

    dataZoom: {
        dataBackgroundColor: '#eee',
        fillerColor: 'rgba(64,136,41,0.2)',
        handleColor: '#408829'
    },
    grid: {
        borderWidth: 0
    },

    categoryAxis: {
        axisLine: {
            lineStyle: {
                color: '#408829'
            }
        },
        splitLine: {
            lineStyle: {
                color: ['#eee']
            }
        }
    },

    valueAxis: {
        axisLine: {
            lineStyle: {
                color: '#408829'
            }
        },
        splitArea: {
            show: true,
            areaStyle: {
                color: ['rgba(250,250,250,0.1)', 'rgba(200,200,200,0.1)']
            }
        },
        splitLine: {
            lineStyle: {
                color: ['#eee']
            }
        }
    },
    timeline: {
        lineStyle: {
            color: '#408829'
        },
        controlStyle: {
            normal: { color: '#408829' },
            emphasis: { color: '#408829' }
        }
    },

    k: {
        itemStyle: {
            normal: {
                color: '#68a54a',
                color0: '#a9cba2',
                lineStyle: {
                    width: 1,
                    color: '#408829',
                    color0: '#86b379'
                }
            }
        }
    },
    map: {
        itemStyle: {
            normal: {
                areaStyle: {
                    color: '#ddd'
                },
                label: {
                    textStyle: {
                        color: '#c12e34'
                    }
                }
            },
            emphasis: {
                areaStyle: {
                    color: '#99d2dd'
                },
                label: {
                    textStyle: {
                        color: '#c12e34'
                    }
                }
            }
        }
    },
    force: {
        itemStyle: {
            normal: {
                linkStyle: {
                    strokeColor: '#408829'
                }
            }
        }
    },
    chord: {
        padding: 4,
        itemStyle: {
            normal: {
                lineStyle: {
                    width: 1,
                    color: 'rgba(128, 128, 128, 0.5)'
                },
                chordStyle: {
                    lineStyle: {
                        width: 1,
                        color: 'rgba(128, 128, 128, 0.5)'
                    }
                }
            },
            emphasis: {
                lineStyle: {
                    width: 1,
                    color: 'rgba(128, 128, 128, 0.5)'
                },
                chordStyle: {
                    lineStyle: {
                        width: 1,
                        color: 'rgba(128, 128, 128, 0.5)'
                    }
                }
            }
        }
    },
    gauge: {
        startAngle: 225,
        endAngle: -45,
        axisLine: {
            show: true,
            lineStyle: {
                color: [[0.2, '#86b379'], [0.8, '#68a54a'], [1, '#408829']],
                width: 8
            }
        },
        axisTick: {
            splitNumber: 10,
            length: 12,
            lineStyle: {
                color: 'auto'
            }
        },
        axisLabel: {
            textStyle: {
                color: 'auto'
            }
        },
        splitLine: {
            length: 18,
            lineStyle: {
                color: 'auto'
            }
        },
        pointer: {
            length: '90%',
            color: 'auto'
        },
        title: {
            textStyle: {
                color: '#333'
            }
        },
        detail: {
            textStyle: {
                color: 'auto'
            }
        }
    },
    textStyle: {
        fontFamily: 'Arial, Verdana, sans-serif'
    }
};


//cambiado de ubicación el 06/08/2021
function INFO_MSJ(nomMantemiento, campo, response, msj, deta) {

    if ($('#cboJerarquia op1917tion:selected').val() !== '') {
        $(".notifry_error").html('');
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        //$('#notifry_errorpla').html('');
        //$('#notifry_errorext').html('');
        new PNotify({
            title: 'Información de ' + nomMantemiento + '',
            text: msj,
            type: response,
            delay: 3000,
            styling: 'bootstrap3'
        });

        $('#' + campo + '').focus();
        if (nomMantemiento == "Unidad Organizacional" || nomMantemiento == "Marcador" || nomMantemiento == "Jerarquía Organizacional" ||
            nomMantemiento == "Cargo" || nomMantemiento == "Categoría" || nomMantemiento == "Tipo Personal" || nomMantemiento == "Grupo" ||
            nomMantemiento == "Planilla" || nomMantemiento == "Centro de Costo" || nomMantemiento == "Marcador" || nomMantemiento == "Grupo Liquidación" ||
            nomMantemiento == "Feriado" || nomMantemiento == "Variable" || nomMantemiento == "Horario" || nomMantemiento == "Regla de Negocio" ||
            nomMantemiento == "Jornada" || nomMantemiento == "Periodo Pago") {
            $("#" + campo).next().html('' + msj + '');
        } else {
            $('#' + deta + '').html('' + msj + '');
        }
        if (nomMantemiento != "Periodo Pago" && campo != "fechaIniID") {//añadido 23.07.2021 para no limpiar los nuevos controles de fecha
            $('#' + campo + '').val('');
        }


    }

    else {
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        $('#notifry_errorpla').html('');
        $('#notifry_errorext').html('');
        new PNotify({
            title: 'Información de ' + nomMantemiento + '',
            text: msj,
            type: response,
            delay: 3000,
            styling: 'bootstrap3',

        });

        $('#' + deta + '').html('');

    }
}

//cambiado de ubicación el 06/08/2021
function messageResponseMix(data, title) {
    //añadido 27.07.2021 -INICIO
    var tiempo = 2000
    //if (title.replace("Nuevo", "").replace("Editar", "").replace(" ", "") == "Empleado") {
    //    var tiempo = 1000
    //}

    var w_ = document.getElementsByClassName('ui-pnotify dark ui-pnotify-fade-normal ui-pnotify-in ui-pnotify-fade-in ui-pnotify-move');
    while (w_.length > 0) {
        //modelo: element.parentNode.removeChild(element);
        w_[0].parentNode.removeChild(w_[0]);
    }
    //añadido 27.07.2021 -FIN
    if (data.type === 'success') {
        new PNotify({
            title: title,
            text: data.message,
            type: 'success',
            delay: 3000,
            styling: 'bootstrap3',
        })
        //var elem = document.getElementsByClassName('ui-pnotify dark ui-pnotify-fade-normal ui-pnotify-in ui-pnotify-fade-in ui-pnotify-move');
        //elem.style.top = '36px';
    } else if (data.type === 'error') {
        new PNotify({
            title: title,
            multiple: false, //
            text: data.message,
            type: 'error',
            delay: tiempo,
            styling: 'bootstrap3',
        })
    } else if (data.type === 'info') {
        new PNotify({
            title: title,
            multiple: false, //
            text: data.message,
            type: 'info',
            delay: tiempo,
            styling: 'bootstrap3',
            addclass: 'dark'
        })
        //var elem = document.getElementsByClassName('ui-pnotify dark ui-pnotify-fade-normal ui-pnotify-in ui-pnotify-fade-in ui-pnotify-move');
        //elem.style = 'display: none; width: 300px; right: 36px; top: 108px; cursor: auto;';
    } else if (data.type === 'infoc') {
        new PNotify({
            title: title,
            text: data.message,
            type: 'info',
            delay: tiempo,//tiempo,
            styling: 'bootstrap3',
        })
    } else {
        new PNotify({
            title: title,
            text: data.message,
            type: 'error',
            delay: tiempo,
            styling: 'bootstrap3',
        })
    }

    if (title == "Info Correo") {
        var elem = document.getElementsByClassName('ui-pnotify dark ui-pnotify-fade-normal ui-pnotify-in ui-pnotify-fade-in ui-pnotify-move');
        elem.style.top = '72px';
    }

}


//añadido 26.03.2021
function Imagen_GC(imgFoto_, ventana) {
    var directorio_ = "Empleado";
    if (ventana === "UO" || ventana === "UO_Firma") {
        directorio_ = "UnidOrg";
    }

    $.post(
        '/Personal/IMG',
        { img_: imgFoto_, directorio: directorio_ },
        (response) => {
            var rutaCompleta = response;
            if (ventana == "Empleado") {
                $('#VistaPrevia').html('<img id="imgCarga"  src= "' + rutaCompleta + '" class="img-rounded img-logo-empleado"/>');
            }
            if (ventana == "UO") {
                $('#ViewPreview').html('<img id="imgCarga" src="' + rutaCompleta + '" class="img-rounded img-logo-UO" />');//style="width:100px;height:100px" //modificado 01.09.2021 class
                $('#txt-ruta').val(rutaCompleta);//añadido 08.09.2021
            }
            if (ventana == "UO_Firma") {
                $('#ViewPreviewF').html('<img id="imgCargaF" src="' + rutaCompleta + '" class="img-rounded img-logo-UO" />');
                $('#txt-rutaF').val(rutaCompleta);//añadido 08.09.2021
            }
            if (ventana == "GestionConsumo") {//añadido solo para SISFOOD
                $('#imagen_empleado_gest_consmo').html('<img src = "' + rutaCompleta + '" style="width:100%; max-width:220px;border-radius:2%;" />');
            }
            if (ventana == "TomaConsumo") {//añadido solo para SISFOOD
                $('#contenedor_imagen_empleado').html('<img src = "' + rutaCompleta + '" style="width:100%; max-width:220px;border-radius:2%;"  />');
            }
        }
    )

}

//añadido 13/09/2021
function validarSoloNumEmp(evt) {
    var TxtTipDocConsulta = $('#TipoDoc  option:selected').text();
    if (TxtTipDocConsulta == 'DNI') {
        //onkeypress = "return  validarSoloNum(event)" //el return  es necesario para el espacio.
        var theEvent = evt || window.event;

        // Handle paste
        if (theEvent.type === 'paste') {
            key = event.clipboardData.getData('text/plain');
        } else {
            // Handle key press
            var key = theEvent.keyCode || theEvent.which;
            key = String.fromCharCode(key);
        }

        let k = event ? event.which : window.event.keyCode;
        if (k == 32) return false;

        var regex = /[0-9]/; //Numeros
        if (!regex.test(key)) {
            theEvent.returnValue = false;
            if (theEvent.preventDefault) theEvent.preventDefault();
        }

    }
}


//////////////////////////////////////////////////////////////////
// VALIDACION DE CARACTERES DE DESCRIPCION - COPIADO DESDE PERFIL
//////////////////////////////////////////////////////////////////
function validarDescripcionAll(evt) {
    //onkeypress = "validarDescripcion(event)" 
    var theEvent = evt || window.event;

    // Handle paste
    if (theEvent.type === 'paste') {
        key = event.clipboardData.getData('text/plain');
    } else {
        // Handle key press
        var key = theEvent.keyCode || theEvent.which;
        key = String.fromCharCode(key);
    }
    var regex = /[0-9]|[a-z]|[A-Z]|\á|\é|\í|\ó|\ú|\Á|\É|\Í|\Ó|\Ú|\ñ|\Ñ|\_|\/|\-|\s/; //Números, Letras ---> a-z,A-Z, _, - con espacios, slash, guion, guion bajo
    if (!regex.test(key)) {
        theEvent.returnValue = false;
        if (theEvent.preventDefault) theEvent.preventDefault();
    }
}

//////////////////////////////////////////////////////////////////
// VALIDACION DE CARACTERES DE CODIGO - BASADO EN PERFIL
//////////////////////////////////////////////////////////////////
function validarCodigoAll(evt) {
    //onkeypress = "validarCodigoAll(event)"
    //let k = event ? event.which : window.event.keyCode;
    //if (k == 32) return false;

    var theEvent = evt || window.event;
    // Handle paste
    if (theEvent.type === 'paste') {
        key = event.clipboardData.getData('text/plain');
    } else {
        // Handle key press
        var key = theEvent.keyCode || theEvent.which;
        key = String.fromCharCode(key);
    }
    var regex = /[0-9]|[a-z]|[A-Z]|\_|\/|\-/; //Números, Letras ---> a-z,A-Z, _, - sin espacio, slash, guion, guion bajo
    if (!regex.test(key)) {
        theEvent.returnValue = false;
        if (theEvent.preventDefault) theEvent.preventDefault();
    }

}

//añadido 01/09/2021
function validarSoloNum(evt) {
    //onkeypress = "return  validarSoloNum(event)" //el return  es necesario para el espacio.
    var theEvent = evt || window.event;

    // Handle paste
    if (theEvent.type === 'paste') {
        key = event.clipboardData.getData('text/plain');
    } else {
        // Handle key press
        var key = theEvent.keyCode || theEvent.which;
        key = String.fromCharCode(key);
    }

    let k = event ? event.which : window.event.keyCode;
    if (k == 32) return false;

    var regex = /[0-9]/; //Numeros
    if (!regex.test(key)) {
        theEvent.returnValue = false;
        if (theEvent.preventDefault) theEvent.preventDefault();
    }
}

//#endregion FUNCIONES GENERALES

//Correcciones Generales desde el 14.09.2021
//=====================================================******************************************************************* INICIO ******************************************************************====================================================================//


/**---------------------------------------------------------- */
/**15. Jerarquía Organizacional */
/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
//#region MANT. JERARQUIA ORGANIZACIONAL
var _vartableJerarquiaOrg;

class DetalleJerarquia {
    constructor(intIdJerCampo, IntIdJerOrg, strCoIntJO, intIdCampo, strCoCampo, bitObligatorio) {
        this.intIdJerCampo = intIdJerCampo
        this.IntIdJerOrg = IntIdJerOrg
        this.strCoIntJO = strCoIntJO
        this.intIdCampo = intIdCampo
        this.strCoCampo = strCoCampo
        this.bitObligatorio = bitObligatorio
    }
}

function TablaJerar() {
    var filtroActivo = $('#cbo-filter-estado-JO').val();
    var strfiltro = $('#txt-buscar-JO').val();

    $.ajax({
        url: '/Configuracion/GetTablaFiltradaJerarquiaOrganizacional',
        type: 'POST',
        data: {
            IntActivoFilter: filtroActivo, strfilter: strfiltro
        },
        beforeSend: function () {
            $.blockUI({
                css: {
                    border: 'none',
                    padding: '15px',
                    backgroundColor: '#000',
                    '-webkit-border-radius': '10px',
                    '-moz-border-radius': '10px',
                    opacity: .5,
                    color: '#fff'
                },
                message: 'Procesando...'
            });
        },
        success: function (response) {

            if (typeof _vartableJerarquiaOrg !== 'undefined') {
                _vartableJerarquiaOrg.destroy();
            }
            //Diseño de la tabla
            _vartableJerarquiaOrg = $('#datatable-jerOrg').DataTable({
                data: response,
                columns: [
                    { data: 'strCoJerOrg' },
                    { data: 'strNomJerOrg' },
                    { data: 'intNivelJer' },
                    { data: 'strNomJerPadre' },
                    { data: 'FlActivo.strEstadoActivo' },
                    { data: null },
                    { data: 'FlActivo.bitFlActivo' },
                    { data: 'strJerarCampo1' },
                    { data: 'strJerarCampo2' },
                    { data: 'strJerarCampo3' },
                    { data: 'strJerarCampo4' },
                    { data: 'strJerarCampo5' },
                    { data: 'IntIdJerOrg' },
                    { data: 'strCoIntJO' },
                    { data: 'strCoJerPadre' },

                ],
                lengthMenu: [10, 25, 50],
                responsive: true,
                order: [],
                language: _datatableLanguaje,

                columnDefs: [//ocultar y definir columnas
                    {
                        targets: [6],//IntIdJerOrg
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [7],//strCoIntJO
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [8],//strCoJerPadre
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [9],//bitFlActivo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [10],//bitFlActivo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [11],//bitFlActivo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [12],//bitFlActivo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [13],//bitFlActivo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [14],//bitFlActivo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [5],
                        data: null,
                        defaultContent: '<button class="btn btn-success btn-xs btn-edit" ><i class="fa fa-pencil"></i> Editar </button>' +
                            '<button class="btn btn-primary btn-xs btn-delete"><i class="fa fa-trash-o"></i> Eliminar </button>'
                    }

                ],
                dom: 'lBfrtip',

            });
            _vartableJerarquiaOrg
                .draw();
        },
        complete: function () {
            $.unblockUI();
        }
    });

}
function cardarDatosJerarquia(data) {
    $('#btn-update-jerarquia').show();
    $('#btn-save-change-jerarquia').hide();

    var objJerarquia = {
        IntIdJerOrg: data['IntIdJerOrg'],
        strCoIntJO: data['strCoIntJO'],
        strCoJerOrg: data['strCoJerOrg'],
        strNomJerOrg: data['strNomJerOrg'],
        intNivelJer: data['intNivelJer'],
        strCoJerPadre: data['strCoJerPadre'],
        FlActivo: {
            strEstadoActivo: data['FlActivo']['strEstadoActivo'],
            bitFlActivo: data['FlActivo']['bitFlActivo']
        }
    }

    $.post(
        '/Configuracion/DatosJerarquia',
        { jerarquiaOrg: objJerarquia },
        (response) => {
            if (response !== '') {
                $('.form-hide-jerarquia .x_content').empty();
                $('.form-hide-jerarquia .x_content').html(response);
                $('.form-hide-jerarquia').show();
                init_checkBox_styles();
                onchange_jerarquia();
                $('#txt-intId-JO').val(objJerarquia.IntIdJerOrg);
            }




            //POST AADIDO PARA VALIDAR LOS DOS CAMPOS INPUT HGM 29.10.2021
            $.post(
                '/Organizacion/ListarCaracteresMax',
                { strMaestro: 'TGJERARQORG' },//NOMBRE DE LA TABLA EN LA BD

                //{ strMaestro: 'TGUNIDORG' },
                (response) => {
                    //alert('TGJERARQORG' )
                    response.forEach(element => {

                        if (element.strColumnName == 'strCoJerOrg') {

                            $("#txt-cod-JO").attr('maxlength', element.intMaxLength);
                            //$('.Valcod').children("input").attr('maxlength', element.intMaxLength);

                        }
                        if (element.strColumnName == 'strNomJerOrg') {

                            $("#txt-desc-JO").attr('maxlength', element.intMaxLength);
                            //$('.Valdes').children("input").attr('maxlength', element.intMaxLength);
                        }

                    });

                });


















        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
        });











}
function intentEliminarJerarquia(idJer, strNomJer) {
    swal({
        title: "Eliminar Jerarquía",
        text: "¿Está seguro de eliminar la Jerarquía      ''<strong>" + strNomJer + "</strong>''      ?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí, eliminar",
        cancelButtonText: "No, cancelar",
    }).then(function (isConfirm) {
        validarSession()
        yesEliminaJerarquia(idJer);
        $('.form-hide-jerarquia').hide();//añadido 19/04/2021
    }, function (dismiss) {
        if (dismiss == 'cancel') {
            //swal("Cancelado", "La Operación fue cancelada", "error");
        }
    });
}
function yesEliminaJerarquia(intIdJer) {
    $.post(
        '/Configuracion/EliminarJeraquia',
        { IntIdJerOrg: intIdJer },
        (response) => {
            console.log(response);
            if (response.type !== '') {
                var tipo = 'Eliminado!';
                if (response.type === 'error')
                    tipo = 'ERROR';
                swal(tipo, response.message, response.type);

                if (response.type === 'success')
                    TablaJerar();
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}
function onchange_jerarquia() {
    $('#cboNivel-JO').on('change', () => {
        var _nivelJer = $('#cboNivel-JO option:selected').val();
        $('#cboJerPadre-JO').empty();
        if (_nivelJer > 1) {
            $('#cboJerPadre-JO').attr('disabled', false);

            $.post(
                '/Configuracion/GetJerarquiaSuperior',
                { intNivelJer: _nivelJer },
                (response) => {
                    if (response.objeto.length > 0) {
                        response.objeto.forEach(element => {
                            $('#cboJerPadre-JO').append('<option value="' + element.strCoIntJO + '">' + element.strNomJerOrg + '</option>');
                        });
                    }
                }
            ).fail(function (result) {
                alert('ERROR ' + result.status + ' ' + result.statusText);
            });

        } else {
            $('#cboJerPadre-JO').attr('disabled', true);
        }
    });
}

$('#datatable-jerOrg  tbody').on('click', 'tr button.btn-edit', function () {
    validarSession()
    var data = _vartableJerarquiaOrg.row($(this).parents('tr')).data();

    if (data == null) {
        data = null;
        var data = _vartableJerarquiaOrg.row($(this).parents('li')).data();
        cardarDatosJerarquia(data);
    } else {
        var data = _vartableJerarquiaOrg.row($(this).parents('tr')).data();
        cardarDatosJerarquia(data);
    }

});
$('#datatable-jerOrg  tbody').on('click', 'tr button.btn-delete', function () {
    validarSession()
    var data = _vartableJerarquiaOrg.row($(this).parents('tr')).data();

    if (data == null) {
        data = null;

        var data = _vartableJerarquiaOrg.row($(this).parents('li')).data();
        intentEliminarJerarquia(data['IntIdJerOrg'], data['strNomJerOrg']);
    } else {
        var data = _vartableJerarquiaOrg.row($(this).parents('tr')).data();
        intentEliminarJerarquia(data['IntIdJerOrg'], data['strNomJerOrg']);
    }
});
$('#btn-new-jerarquia').on('click', function () {
    validarSession()
    var titulo_ = 'Nueva Jerarquía';




    //POST AADIDO PARA VALIDAR LOS DOS CAMPOS INPUT HGM 29.10.2021
    $.post(
        '/Organizacion/ListarCaracteresMax',
        { strMaestro: 'TGJERARQORG' },//NOMBRE DE LA TABLA EN LA BD

        //{ strMaestro: 'TGUNIDORG' },
        (response) => {
            //alert('TGJERARQORG')
            response.forEach(element => {



                if (element.strColumnName == 'strCoJerOrg') {

                    $("#txt-cod-JO").attr('maxlength', element.intMaxLength);
                    //$('.Valcod').children("input").attr('maxlength', element.intMaxLength);

                }
                if (element.strColumnName == 'strNomJerOrg') {

                    $("#txt-desc-JO").attr('maxlength', element.intMaxLength);
                    //$('.Valdes').children("input").attr('maxlength', element.intMaxLength);
                }



                ///////////////////////////////////////

            });

        });






    $('#btn-update-jerarquia').hide();//Ocultar el boton de actualizar
    $('#btn-save-change-jerarquia').show();
    $.post(
        '/Configuracion/NuevaJerarquia',
        {},
        (response) => {

            if (response.message == null) {
                $('.form-hide-jerarquia .x_content').empty();
                $('.form-hide-jerarquia .x_content').html(response);

                $('#11').html('<label id="_lbl_">Activo</label> <input type = "checkbox" id = "chk-activo-JO" class= "js-switch" checked /><script>switcheryLoad();</script >');//añadido 24.05.2021

                init_checkBox_styles();
                //HabilitarSwitch();
                onchange_jerarquia();

                var lista = document.getElementById("cboNivel-JO");

                var nivjer = $('#cboNivel-JO').val();
                if (lista.length < 2) {

                    $.post('/Configuracion/GetNumJeraquia', {},
                        (response) => {
                            swal({
                                title: "Nueva Jerarquía",
                                text: "<strong>Ha utilizado sus " + response + " niveles jerárquicos configurados.<br/> Si desea registrar más niveles por favor modifique su configuración o elimine niveles inactivos.</strong>",
                                type: "info",
                                confirmButtonText: "OK",
                            });
                        }
                    )
                    $('.form-hide-jerarquia').hide();

                } else {
                    $('.form-hide-jerarquia').show();

                }
            } else {
                messageResponseMix({ type: 'info', message: response.message }, titulo_)
                //new PNotify({
                //    title: 'Nueva Jerarquía',
                //    text: response.message,
                //    type: 'info',
                //    delay: 3000,
                //    styling: 'bootstrap3',
                //    addclass: 'dark'
                //});
                return;
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
        });







});




$('#btn-update-jerarquia').on('click', () => {
    validarSession()
    var titulo_ = 'Actualización de Jerarquía Organizacional'

    //Leer Datos de la Jerarquía Organizacional
    var _intIdJer = $('#txt-intId-JO').val();

    var _strCoIntJer = $('#txt-strCoInt-JO').val();
    var _nivelJer = $('#cboNivel-JO option:selected').val();
    var _jerPadre = $('#cboJerPadre-JO option:selected').val();
    var _codigo = $('#txt-cod-JO').val();
    var _desc = $('#txt-desc-JO').val();
    var _activo = $('#chk-activo-JO').is(':checked');

    if (_nivelJer === '' || _codigo === '' || _desc === '') {
        messageResponseMix({ type: 'info', message: 'Complete los campos obligatorios' }, titulo_)//05.08.2021
        //new PNotify({
        //    title: 'Editar Jerarquía',
        //    text: 'Complete los campos obligatorios',
        //    type: 'info',
        //    delay: 3000,
        //    styling: 'bootstrap3',
        //    addclass: 'dark'
        //});
        return;
    }

    if (!$('#txt-cod-JO')[0].validity.valid) {
        messageResponseMix({ type: 'info', message: 'Ingrese solo números y letras sin espacios en blanco.' }, 'Codigo(*)')//05.08.2021
        //new PNotify({
        //    title: 'Codigo(*)',
        //    text: 'Ingrese solo números y letras sin espacios en blanco.',
        //    type: 'info',
        //    delay: 3000,
        //    styling: 'bootstrap3',
        //    addclass: 'dark'
        //});
        return;
    }

    if (_jerPadre === '')
        _jerPadre = null;

    var JerarquíaOrg = {
        IntIdJerOrg: _intIdJer,
        strCoIntJO: _strCoIntJer,
        strCoJerOrg: _codigo,
        strNomJerOrg: _desc,
        intNivelJer: _nivelJer,
        strCoJerPadre: _jerPadre,
        FlActivo: {
            bitFlActivo: _activo
        }
    }

    var detalleJer = new Array();
    $('div[class="div-campos-adicio"]').each((index, item) => {
        var label = $(item).find('label');
        var _check = $(label).find('input.flat');
        var IntIdJerOrg = $('#txt-intId-JO').val();
        var IntIdJerOrgCamp = $('#txt-strIntidCamp-JO').val();

        var _switch = $(label).find('input.chkObligatorio');
        if ($(_check).is(':checked')) {
            var intid = $(_check).data('intidcampo');
            var strco = $(_check).data('strcocampo');
            var bitObli = $(_switch).is(':checked');
            detalleJer.push(new DetalleJerarquia(IntIdJerOrgCamp, IntIdJerOrg, null, intid, strco, bitObli));
        }
    });

    $.post(
        '/Configuracion/IUJeraquia',
        { jerarquiaOrg: JerarquíaOrg, detalleJer: detalleJer, intTipoOperacion: 2 },
        (response) => {
            console.log(response);
            if (response.type !== '') {
                if (response.type === 'success') {
                    messageResponseMix({ type: response.type, message: response.message }, titulo_)//05.08.2021
                    //new PNotify({
                    //    title: 'Actualización Jerarquía Organizacional',
                    //    text: response.message,
                    //    type: response.type,
                    //    delay: 3000,
                    //    styling: 'bootstrap3'
                    //});
                    TablaJerar();

                    $('.form-hide-jerarquia').hide();
                } else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Jerarquía Organizacional';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        messageResponseMix({ type: response.type, message: response.message }, titulo_)//05.08.2021
                        //new PNotify({
                        //    title: 'Jerarquía Organizacional',
                        //    text: response.message,
                        //    type: response.type,
                        //    delay: 3000,
                        //    styling: 'bootstrap3'
                        //});
                    }
                    return;
                }
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

});
$('#btn-save-change-jerarquia').on('click', function () {
    validarSession()
    var titulo_ = 'Nueva Jerarquía Organizacional'
    //Datos de la Jerarquía Organizacional
    var _nivelJer = $('#cboNivel-JO option:selected').val();
    var _jerPadre = $('#cboJerPadre-JO option:selected').val();
    var _codigo = $('#txt-cod-JO').val();
    var _desc = $('#txt-desc-JO').val();
    var _activo = $('#chk-activo-JO').is(':checked');

    if (_nivelJer === '' || _codigo === '' || _desc === '') {
        messageResponseMix({ type: 'info', message: 'Complete los campos obligatorios' }, titulo_)//05.08.2021
        //new PNotify({
        //    title: 'Nueva Jerarquía',
        //    text: 'Complete los campos obligatorios',
        //    type: 'info',
        //    delay: 3000,
        //    styling: 'bootstrap3',
        //    addclass: 'dark'
        //});
        return;
    }

    if (!$('#txt-cod-JO')[0].validity.valid) {
        messageResponseMix({ type: 'info', message: 'Ingrese solo números y letras sin espacios en blanco.' }, 'Codigo(*)')//05.08.2021
        //new PNotify({
        //    title: 'Codigo(*)',
        //    text: 'Ingrese solo números y letras sin espacios en blanco.',
        //    type: 'info',
        //    delay: 3000,
        //    styling: 'bootstrap3',
        //    addclass: 'dark'
        //});
        return;
    }

    if (_jerPadre === '')
        _jerPadre = null;

    var JerarquíaOrg = {
        strCoJerOrg: _codigo,
        strNomJerOrg: _desc,
        intNivelJer: _nivelJer,
        strCoJerPadre: _jerPadre,
        FlActivo: {
            bitFlActivo: _activo
        }
    }

    var detalleJer = new Array();

    $('div[class="div-campos-adicio"]').each((index, item) => {
        var label = $(item).find('label');
        var _check = $(label).find('input.flat');
        var _switch = $(label).find('input.case1');//antes era switch ahora es flat

        if ($(_check).is(':checked')) {
            var intid = $(_check).data('intidcampo');
            var strco = $(_check).data('strcocampo');
            var bitObli = $(_switch).is(':checked');

            detalleJer.push(new DetalleJerarquia(null, null, null, intid, strco, bitObli));
        }
    });

    $.post(
        '/Configuracion/IUJeraquia',
        { jerarquiaOrg: JerarquíaOrg, detalleJer: detalleJer, intTipoOperacion: 1 },
        (response) => {
            console.log(response);
            if (response.type !== '') {


                if (response.type === 'success') {
                    messageResponseMix({ type: response.type, message: response.message }, titulo_)//05.08.2021
                    //new PNotify({
                    //    title: 'Nueva Jerarquía Organizacional',
                    //    text: response.message,
                    //    type: response.type,
                    //    delay: 3000,
                    //    styling: 'bootstrap3'
                    //});
                    TablaJerar();

                    $('.form-hide-jerarquia').hide();
                } else {

                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Jerarquía Organizacional';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        messageResponseMix({ type: response.type, message: response.message }, titulo_)//05.08.2021
                        //new PNotify({
                        //    title: 'Jerarquía Organizacional',
                        //    text: response.message,
                        //    type: response.type,
                        //    delay: 3000,
                        //    styling: 'bootstrap3'
                        //});
                    }
                    return;
                }

            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
});
$('#btn-cancel-jerarquia').on('click', function () {
    validarSession()
    $('.form-hide-jerarquia').hide();
});

$('#cbo-filter-estado-JO').on('change', function () {
    validarSession();
    TablaJerar();

});
//$('#txt-buscar-JO').keyup(function () {
//    validarSession();
//    TablaJerar();
//});
$('#txt-buscar-JO').on('change', function () {
    validarSession()
    TablaJerar();
})

//#endregion MANT. JERARQUIA ORGANIZACIONAL



/**----------------------------------------------------- */
/**2. Unidad Organizacional */
/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
//#region MANT. UNIDAD ORGANIZACIONAL
var _varTablaUndOrg;
var lstRepLeg = null;
var lstResp = null;
var idRL = 0;
var _id;
var ListCampos = null;
var ValidaRuc = false
var ValidaDIRF = false
var ValidaLOGO = false
var ValidaPERRESP = false
var ValidaREPLEG = false
var ValidaUBIGEO = false
var ValidaWdms = false
var Editable = false
var UbiDi = 0; //Distrito
var UbiPr = 0; //Provincia
var UbiDe = 0; //Departamento
var UbiPa = 0; //Pais

$('#btnGuardarUbigeo').on('click', function () {

    var Distrito = $('#CboDistrito').val();
    if (Distrito == 0) {
        messageResponseMix({ type: 'info', message: 'Seleccione un Distrito' }, 'Ubigeo');
        $('#cbodistrito').focus()
        return false
    } else {
        $('#txtIntidUbigeo').val(Distrito);
        //var Valxpais = $('#CboProvincia').val();
        $('#txtUbigeo').val($('#CboDistrito :selected').html());
        $('#txtUbigeo').attr('disabled', true);
        Editable == true
        UbiDi = $('#CboDistrito').val(); //Distrito
        UbiPr = $('#CboProvincia').val(); //Provincia
        UbiDe = $('#CboRegion').val(); //Departamento
        UbiPa = $('#CboPais').val(); //Pais
    }
});
$('#btnCerrarUbigeo').on('click', function () {
    if (Editable == false && $('#txtUbigeo').val() == "") {//Nuevo Sin Seleccionar
        LimpiarUbigeo();
    } else {
        $('#CboDistrito').val(UbiDi); //Distrito
        $('#CboProvincia').val(UbiPr); //Provincia
        $('#CboRegion').val(UbiDe); //Departamento
        $('#CboPais').val(UbiPa); //Pais
        $.post(
            '/Personal/ListarCombos',
            {
                intIdMenu: 1,
                strEntidad: 'TGUBIGEO',
                intIdFiltroGrupo: UbiPa,
                strGrupo: 'DEPART',
                strSubGrupo: '',
            },
            response => {
                $('#CboRegion').empty()
                $('#CboRegion').attr('disabled', false)
                $('#CboRegion').append('<option value="0">Seleccione</option>')

                response.forEach(element => {
                    $('#CboRegion').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
                })
                $('#CboRegion').val(UbiDe);
                $.post(
                    '/Personal/ListarCombos',
                    {
                        intIdMenu: 1,
                        strEntidad: 'TGUBIGEO',
                        intIdFiltroGrupo: UbiDe,
                        strGrupo: 'REG',
                        strSubGrupo: '',
                    },
                    response => {
                        $('#CboProvincia').empty()
                        $('#CboProvincia').attr('disabled', false)
                        $('#CboProvincia').append('<option value="0">Seleccione</option>')

                        response.forEach(element => {
                            $('#CboProvincia').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
                        })
                        $('#CboProvincia').val(UbiPr);
                        $.post(
                            '/Personal/ListarCombos',
                            {
                                intIdMenu: 1,
                                strEntidad: 'TGUBIGEO',
                                intIdFiltroGrupo: UbiPr,
                                strGrupo: 'DIST',
                                strSubGrupo: '',
                            },
                            response => {
                                $('#CboDistrito').empty()
                                $('#CboDistrito').attr('disabled', false)
                                $('#CboDistrito').append('<option value="0">Seleccione</option>')

                                response.forEach(element => {
                                    $('#CboDistrito').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
                                })
                                $('#CboDistrito').val(UbiDi);
                            });
                    });
            });


    }
});
function CombosUbigeo(objubigeo = null) {
    var intIdMenu = 0;

    $.post(
        '/Personal/ListarCombos',
        {
            intIdMenu: intIdMenu,
            strEntidad: 'TGPAIS',
            intIdFiltroGrupo: 0,
            strGrupo: 'EXISTE',
            strSubGrupo: '',
        },
        response => {
            $('#CboPais').empty()
            $('#CboPais').attr('disabled', false)
            $('#CboPais').append('<option value="0">Seleccione</option>')

            response.forEach(element => {
                $('#CboPais').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
            })
            if (objubigeo != null) { //Editar
                $('#CboPais').val(objubigeo.intextra3);

                $.post(
                    '/Personal/ListarCombos',
                    {
                        strEntidad: 'TGUBIGEO',
                        intIdFiltroGrupo: objubigeo.intextra3,
                        strGrupo: 'DEPART',
                        strSubGrupo: '',
                    },
                    response => {
                        $('#CboRegion').empty()
                        $('#CboRegion').append('<option value="0">Seleccione</option>')
                        response.forEach(obj => {
                            $('#CboRegion').append('<option value="' + obj.intidTipo + '" >' + obj.strDeTipo + '</option>')
                            if (obj.intidTipo == objubigeo.intextra2) {
                                $('#CboRegion').val(obj.intidTipo)
                            }
                        })
                        $.post(
                            '/Personal/ListarCombos',
                            {
                                strEntidad: 'TGUBIGEO',
                                intIdFiltroGrupo: objubigeo.intextra2,
                                strGrupo: 'REG',
                                strSubGrupo: '',
                            },
                            response => {
                                $('#CboProvincia').empty()
                                $('#CboProvincia').append('<option value="0">Seleccione</option>')
                                response.forEach(obj => {
                                    $('#CboProvincia').append('<option value="' + obj.intidTipo + '" >' + obj.strDeTipo + '</option>')
                                    if (obj.intidTipo == objubigeo.intextra1) {
                                        $('#CboProvincia').val(obj.intidTipo)
                                    }
                                })
                                $.post(
                                    '/Personal/ListarCombos',
                                    {
                                        strEntidad: 'TGUBIGEO',
                                        intIdFiltroGrupo: objubigeo.intextra1,
                                        strGrupo: 'DIST',
                                        strSubGrupo: '',
                                    },
                                    response => {
                                        $('#CboDistrito').empty()
                                        $('#CboDistrito').append('<option value="0">Seleccione</option>')
                                        response.forEach(obj => {
                                            $('#CboDistrito').append('<option value="' + obj.intidTipo + '" >' + obj.strDeTipo + '</option>')
                                            if (obj.intidTipo == objubigeo.intIdUbigeo) {
                                                $('#CboDistrito').val(obj.intidTipo)
                                                $('#txtUbigeo').val(obj.strDeTipo)
                                                $('#txtUbigeo').attr('disabled', true)
                                            }
                                        })
                                    }
                                )
                            }
                        )
                    }
                )


            }
        }
    )

    $('#CboPais').on('change', function () {
        var Valxpais = $('#CboPais').val()
        $.post(
            '/Personal/ListarCombos',
            {
                intIdMenu: intIdMenu,
                strEntidad: 'TGUBIGEO',
                intIdFiltroGrupo: Valxpais,
                strGrupo: 'DEPART',
                strSubGrupo: '',
            },
            response => {
                $('#CboProvincia').empty() //añadido 19.10.2021
                $('#CboProvincia').attr('disabled', true)//añadido 19.10.2021
                $('#CboProvincia').append('<option value="0">Seleccione Departamento</option>')//añadido 19.10.2021
                $('#CboDistrito').empty() //añadido 19.10.2021
                $('#CboDistrito').attr('disabled', true)//añadido 19.10.2021
                $('#CboDistrito').append('<option value="0">Seleccione Provincia</option>')//añadido 19.10.2021
                $('#CboRegion').empty()
                
                if (response.length > 0) {
                    $('#CboRegion').attr('disabled', false)
                    $('#CboRegion').append('<option value="0">Seleccione</option>')
                    response.forEach(element => {
                        $('#CboRegion').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
                    })
                } else {
                    $('#CboRegion').attr('disabled', true)
                    $('#CboRegion').append('<option value="0">Seleccione País</option>')
                }


            }
        )
    })

    $('#CboRegion').on('change', function () {
        var Valxpais = $('#CboRegion').val()
        $.post(
            '/Personal/ListarCombos',
            {
                intIdMenu: intIdMenu,
                strEntidad: 'TGUBIGEO',
                intIdFiltroGrupo: Valxpais,
                strGrupo: 'REG',
                strSubGrupo: '',
            },
            response => {
                $('#CboProvincia').empty()
                $('#CboProvincia').attr('disabled', false)
                $('#CboProvincia').append('<option value="0">Seleccione</option>')
                $('#CboDistrito').empty() //añadido 19.10.2021
                $('#CboDistrito').attr('disabled', true)//añadido 19.10.2021
                $('#CboDistrito').append('<option value="0">Seleccione Provincia</option>')//añadido 19.10.2021
                response.forEach(element => {
                    $('#CboProvincia').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
                })
            }
        )
    })

    $('#CboProvincia').on('change', function () {
        var Valxpais = $('#CboProvincia').val()
        $.post(
            '/Personal/ListarCombos',
            {
                intIdMenu: intIdMenu,
                strEntidad: 'TGUBIGEO',
                intIdFiltroGrupo: Valxpais,
                strGrupo: 'DIST',
                strSubGrupo: '',
            },
            response => {
                $('#CboDistrito').empty()
                $('#CboDistrito').attr('disabled', false)
                $('#CboDistrito').append('<option value="0">Seleccione</option>')
                response.forEach(element => {
                    $('#CboDistrito').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
                })
            }
        )
    })



}

function TablaUnidadOrg() {
    var filtroActivo = $('#filActiUniOrg').val();
    var strfiltro = $('#filtroUniOrg').val();
    var filtrojer = $('#cboJerarUniOrg').val();

    $.ajax({
        url: '/Organizacion/GetTablaUnidOrg',
        type: 'POST',
        data: {
            IntActivoFilter: filtroActivo, strfilter: strfiltro, intfiltrojer: filtrojer
        },
        beforeSend: function () {
            $.blockUI({
                css: {
                    border: 'none',
                    padding: '15px',
                    backgroundColor: '#000',
                    '-webkit-border-radius': '10px',
                    '-moz-border-radius': '10px',
                    opacity: .5,
                    color: '#fff'
                },
                message: 'Procesando...'
            });
        },
        success: function (response) {
            console.log(response)
            if (typeof _varTablaUndOrg !== 'undefined') {
                _varTablaUndOrg.destroy();
            }
            _varTablaUndOrg = $('#tablaUnidOrg').DataTable({
                data: response,
                columns: [

                    { data: 'strCodigo' },
                    { data: 'strDescripcion' },
                    { data: 'strNomJerOrg' },
                    { data: 'strDescripcionSup' },
                    { data: 'FlActivo.strEstadoActivo' },
                    { data: null },
                    { data: 'intIdUniOrg' },
                    { data: 'strRuc' },
                    { data: 'strDirLogo' },
                    { data: 'intIdPerResp' },
                    { data: 'intIdRepLeg' },
                    { data: 'intIdUbigeo' }

                ],
                lengthMenu: [10, 25, 50],
                responsive: true,
                order: [],
                language: _datatableLanguaje,
                columnDefs: [//ocultar y definir columnas
                    {
                        targets: [6],//intIdCargo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [7],//intIdCargo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [8],//intIdCargo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [9],//intIdCargo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [10],//intIdCargo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [11],//intIdCargo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [5],
                        data: null,
                        defaultContent: '<button class="btn btn-success btn-xs btn-edit" ><i class="fa fa-pencil"></i> Editar </button>' +
                            '<button class="btn btn-primary btn-xs btn-delete"><i class="fa fa-trash-o"></i> Eliminar </button>'
                    }
                ],
                dom: 'lBfrtip',
            });



        },
        complete: function () {
            $.unblockUI();
        }
    });
}
function cardarDatosUndOrg(data) {





    //POST AADIDO PARA VALIDAR LOS DOS CAMPOS INPUT HGM 29.10.2021
    $.post(
        '/Organizacion/ListarCaracteresMax',
        { strMaestro: 'TGUNIDORG' },//NOMBRE DE LA TABLA EN LA BD

        //{ strMaestro: 'TGUNIDORG' },
        (response) => {
            //alert('TGJERARQORG')
            response.forEach(element => {

                if (element.strColumnName == 'strCodigo') {

                    $("#txt-cod-UO").attr('maxlength', element.intMaxLength);
                    //$('.Valcod').children("input").attr('maxlength', element.intMaxLength);

                }
                if (element.strColumnName == 'strDescripcion') {

                    $("#txt-desc-UO").attr('maxlength', element.intMaxLength);
                    //$('.Valdes').children("input").attr('maxlength', element.intMaxLength);
                }

            });

        });










    $('#btn-update-undOrganiza').show();
    $('#btn-save-change-undOrganiza').hide();

    var bitFlActivo = data['bitFlActivo'];
    var intIdUniOrg = data['intIdUniOrg'];
    var strRuc = data['strRuc'];
    var RutImg = data['strDirLogo'];
    var intIdPerResp = data['intIdPerResp'];
    var intIdRepLeg = data['intIdRepLeg'];

    var intIdUbigeo = data['intIdUbigeo'];

    $.post(
        '/Organizacion/EditarUnidadOrg',
        { intIdUniOrg: data.intIdUniOrg },
        (response) => {
            if (response !== '') {

                $('.form-hide-undOrganiza .x_content').empty();
                $('.form-hide-undOrganiza .x_content').html(response);
                $('.form-hide-undOrganiza').show();
                $('#btn-save-change-undOrganiza').hide();
                $('#btn-update-undOrganiza').show();
                switcheryLoad();
                LimpiarUbigeo();
                init_checkBox_styles();
                //  onchange_jerarquia();
                BuscarUnidad();
                $.post(
                    '/Organizacion/ObtenerOrganizacionPorsuPK',
                    { intIdOrganizacion: data.intIdUniOrg },
                    (response) => {
                        var element = response[0];
                        console.log(element);

                        $("#cboJerarquia option").filter(function () {
                            return this.text == element.strNomJerOrg;
                        }).attr('selected', true);

                        var idER = $("#cboJerarquia").val();

                        $.post(
                            '/Organizacion/getUnidSup',
                            { IntIdJerOrg: idER },
                            (response) => {
                                if (true) {
                                    if (response.length > 0) {//añadido 22.02.2021
                                        $('#L_UO').text('Unid. Organizacional Superior (*)');
                                        response.forEach(element => {
                                            $('#cbounidsup').attr('disabled', false);
                                            $('#cbounidsup').append('<option value="' + element.intIdUniOrg + '">' + element.strDescripcion + '</option>');
                                        });
                                        if (idER !== 0 || idER !== '') {
                                            $('#cbounidsup').attr('disabled', false);
                                            $('#cbounidsup').val(element.intIdUniOrgSup);
                                        }
                                    } else { //añadido 19.10.2021
                                        $('#L_UO').text('Unid. Organizacional Superior');
                                        $('#cbounidsup').attr('disabled', true);
                                    }
                                }
                            }
                        ).fail(function (result) {
                            alert('ERROR ' + result.status + ' ' + result.statusText);
                        });

                        $.post(
                            '/Organizacion/CamposAdicionalesUO',
                            { strEntidad: 'TGUNIDORG', intidJerOrg: idER },
                            (response) => {

                                console.log(response);
                                $('#containerCamposea').empty();
                                response.forEach(ele => {
                                    $('#containerCamposea').append(
                                        ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + ele.strTitulo
                                        + '</label><input id="' + ele.strNomCampo + '" type="text" class="form-control " placeholder="' + ele.strTitulo.replace("(*)", "") + '" maxlength="255"/>' + '</div></div>');
                                    if (ele.strNomCampo == 'strUOCampo5' && ele.strTitulo.includes('(*)')) {
                                        ValidaWdms = true;
                                    }
                                });

                                if (element.strUOCampo1 != null || element.strUOCampo1 != "") {
                                    $('#strUOCampo1').val(element.strUOCampo1);
                                }
                                if (element.strUOCampo2 != null || element.strUOCampo2 != "") {
                                    $('#strUOCampo2').val(element.strUOCampo2);
                                }
                                if (element.strUOCampo3 != null || element.strUOCampo3 != "") {
                                    $('#strUOCampo3').val(element.strUOCampo3);
                                }
                                if (element.strUOCampo4 != null || element.strUOCampo4 != "") {
                                    $('#strUOCampo4').val(element.strUOCampo4);
                                }
                                if (element.strUOCampo5 != null || element.strUOCampo5 != "") {
                                    $('#strUOCampo5').val(element.strUOCampo5);
                                }
                            });
                        $('#idorg').val(element.intIdUniOrg);

                        OcultarIneDITAR();

                        $('#TipVia').val(element.intidTipoVia);

                        $('#txt-cod-UO').val(element.strCodigo);
                        $('#txt-desc-UO').val(element.strDescripcion);
                        $('#TXTTIPVIA').val(element.strDirFiscal);

                        //$('#cboDisrict').val(element.intIdUbigeo);
                        $('#txtIntidUbigeo').val(data.intIdUbigeo)
                        CombosUbigeo(element)//añadido 29.09.2021
                        //$('#CboPais').val(element.intextra3);

                        $('#idLegal').val(element.intIdRepLeg);
                        $('#idPerLeg').val(element.intIdPerResp);
                        var RutImgFirma = element.strDirFirma;//añadido 08.09.2021
                        //Valores Globales para no perder el dato al Cancelar
                        Editable = true;
                        UbiDi = element.intIdUbigeo; //Distrito
                        UbiPr = element.intextra1; //Provincia
                        UbiDe = element.intextra2; //Departamento
                        UbiPa = element.intextra3; //Pais
                        var filtro = document.getElementById("Legal").value;
                        console.log(filtro);

                        var relacion = new Array();

                        $.post(
                            '/Organizacion/getLegal',
                            { strfiltroLegal: filtro },
                            (response) => {
                                if (true) {
                                    console.log(response);
                                    lstRepLeg = response;
                                    $(relacion).empty();
                                    var i = 0;
                                    response.forEach(element => {
                                        if (element.IntIdRepLeg == intIdRepLeg) {
                                            relacion[i] = element.strNombres + ' ' + element.strApePaterno + ' ' + element.strApeMaterno;

                                            $('#Legal').empty();
                                            $('#Legal').val(relacion[i]);
                                        }
                                        i++;
                                    });
                                    $('#Legal').autocomplete({
                                        source: [relacion]

                                    }).on('selected.xdsoft', function (e, datum) {
                                        console.log(datum);
                                        idRL = lstRepLeg.find(x => x.strNombres + ' ' + x.strApePaterno + ' ' + x.strApeMaterno === datum).IntIdRepLeg;
                                        console.log(idRL);
                                        $('#idLegal').val(idRL);
                                    });

                                }
                            }
                        );

                        var filtro = document.getElementById("Respon").value;
                        console.log(filtro);
                        var listado = new Array();
                        $.post(
                            '/Organizacion/getRes',
                            { strfiltroPersonal: filtro },
                            (response) => {
                                console.log(response);
                                if (true) {

                                    lstResp = response;
                                    $(listado).empty();
                                    var i = 0;

                                    response.forEach(element => {
                                        if (element.intIdPersonal == intIdPerResp) {
                                            listado[i] = element.strNombres + ' ' + element.strApePaterno + ' ' + element.strApeMaterno;
                                            $('#Respon').empty();
                                            $('#Respon').val(listado[i]);
                                        }
                                        i++;
                                    });

                                    $('#Respon').autocomplete({
                                        source: [listado]
                                    }).on('selected.xdsoft', function (e, datum) {
                                        console.log(datum);
                                        idRL = lstResp.find(x => x.strNombres + ' ' + x.strApePaterno + ' ' + x.strApeMaterno === datum).intIdPersonal;
                                        console.log(idRL);
                                        $('#idPerLeg').val(idRL);
                                    });
                                }
                            }
                        )
                        var txtCod = 'strCodigo';
                        var txtdes = 'strDescripcion';
                        $.post(
                            '/Organizacion/ListarCaracteresMax',
                            { strMaestro: 'TGUNIDORG' },
                            (response) => {
                                response.forEach(element => {
                                    if (element.strColumnName == txtCod) {
                                        $('.Valcod').children("input").attr('maxlength', element.intMaxLength);
                                    }
                                    if (element.strColumnName == txtdes) {
                                        $('.Valdes').children("input").attr('maxlength', element.intMaxLength);
                                    }
                                });
                            });

                        $('#txt-ruc-UO').val(strRuc);

                        if (RutImg !== '') {
                            //$('#ViewPreview').html('<img id="imgCarga" src=' + RutImg + ' style="width:100px;height:100px" />');
                            Imagen_GC(RutImg, "UO");//añadido 26.03.2021
                        }
                        if (RutImgFirma !== '') {
                            Imagen_GC(RutImgFirma, "UO_Firma");//añadido 08.09.2021
                        }

                        if (bitFlActivo) {
                            $('#11').html('<label id="_lbl_">Activo</label> <input type = "checkbox" id="chk-activo-UO" class= "js-switch" checked /><script>switcheryLoad();</script >');
                        } else {
                            $('#11').html('<label id="_lbl_">Inactivo</label> <input type = "checkbox" id="chk-activo-UO" class= "js-switch" unchecked /><script>switcheryLoad();</script >');
                        }

                        if (element.bitFlPrincipal === true) {
                            $('#checkPrincipal').iCheck('check')
                        }

                    });

            }
        });
}
function FiltroLegal() {
    var filtro = document.getElementById("Legal").value;
    var relacion = [];

    $.post(
        '/Organizacion/getLegal',
        { strfiltroLegal: filtro },
        (response) => {
            if (true) {
                console.log(response);
                lstRepLeg = response;

                var i = 0;

                response.forEach(element => {
                    relacion[i] = element.strNombres + ' ' + element.strApePaterno + ' ' + element.strApeMaterno;
                    i++;
                });
                $('#Legal').autocomplete({
                    source: [relacion]
                }).on('selected.xdsoft', function (e, datum) {
                    console.log(datum);
                    idRL = lstRepLeg.find(x => x.strNombres + ' ' + x.strApePaterno + ' ' + x.strApeMaterno === datum).IntIdRepLeg;
                    console.log(idRL);
                    $('#idLegal').val(idRL);
                });
            }
        }
    );
};
function FiltroRes() {
    var filtro = document.getElementById("Respon").value;
    console.log(filtro);
    var listado = [];
    $.post(
        '/Organizacion/getRes',
        { strfiltroPersonal: filtro },
        (response) => {
            console.log(response);
            if (true) {
                lstResp = response;
                var i = 0;
                response.forEach(element => {
                    listado[i] = element.strNombres + ' ' + element.strApePaterno + ' ' + element.strApeMaterno;
                    i++;
                });

                $('#Respon').autocomplete({
                    source: [listado]
                }).on('selected.xdsoft', function (e, datum) {
                    idRL = lstResp.find(x => x.strNombres + ' ' + x.strApePaterno + ' ' + x.strApeMaterno === datum).intIdPersonal;
                    $('#idPerLeg').val(idRL);
                });
            }
        }
    )
}
function Vias() {
    $.post(
        '/Personal/ListarCombos',
        {
            intIdMenu: 0,
            strEntidad: 'TGTIPO_VIA',
            intIdFiltroGrupo: 0,
            strGrupo: '',
            strSubGrupo: '',
        },
        response => {
            $('#TipVia').empty()
            $('#TipVia').attr('disabled', false)
            $('#TipVia').append('<option value="0">--</option>')//modificado 15.10.2021
            response.forEach(element => {
                $('#TipVia').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
            })
        });
};
function limpiar() {
    document.getElementById('inputImage').value = "";
    $("#imageupload").attr("src", "../../images/user.png");

}


function OcultarIn() {
    $('#cboJerarquia').on('change', function () {
        $('#REPLEG').attr('hidden', true);
        $('#PERRESP').attr('hidden', true);
        $('#RUC').attr('hidden', true);
        $('#DIRF').attr('hidden', true);
        $('#UBIGEO').attr('hidden', true);
        $('#LOGO').attr('hidden', true);
        $('#FIRMA').attr('hidden', true);
        $('#CAM1').attr('hidden', true);
        $('#CAM2').attr('hidden', true);
        $('#CAM3').attr('hidden', true);
        $('#CAM4').attr('hidden', true);
        $('#CAM5').attr('hidden', true);
        ValidaRuc = false
        ValidaDIRF = false
        ValidaLOGO = false
        ValidaPERRESP = false
        ValidaREPLEG = false
        ValidaUBIGEO = false
        ValidaWdms = false
        ValidaFIRMA = false
        $('#L_REPLEG').text('Representante Legal');
        $('#L_PERRESP').text('Nombre del Responsable');
        $('#L_RUC').text('RUC');
        $('#L_FIRMA').text('Firma');
        $('#L_LOGO').text('Logo');
        $('#L_DIRF').text('Dirección');
        $('#L_UBIGEO').text('Ubigeo');
        var filtrado = $('#cboJerarquia option:selected').val();
        var strfiltr = filtrado.toString();

        var intidJerOrg = $(this).val()
        $.post(
            '/Organizacion/CamposAdicionalesUO',
            {
                strEntidad: 'TGUNIDORG',
                intidJerOrg
            },
            (response) => {
                console.log(response);
                $('#containerCamposea').empty();
                response.forEach(element => {

                    $('#containerCamposea').append(
                        ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                        + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="' + element.strTitulo.replace("(*)", "") + '" maxlength="255"/>' + '</div></div>');

                    if (element.strNomCampo == 'strUOCampo5' && element.strTitulo.includes('(*)')) {
                        ValidaWdms = true;
                    }
                });
                if (response.strUOCampo1 != null) {
                    $('#strUOCampo1').val(element.strUOCampo1);
                }
                if (response.strUOCampo2 != null) {
                    $('#strUOCampo2').val(element.strUOCampo2);
                }
                if (response.strUOCampo3 != null) {
                    $('#strUOCampo3').val(element.strUOCampo3);
                }
                if (response.strUOCampo4 != null) {
                    $('#strUOCampo4').val(element.strUOCampo4);
                }
                if (response.strUOCampo5 != null) {
                    $('#strUOCampo5').val(element.strUOCampo5);
                }

            });


        if (filtrado == 0 || filtrado == null) {
            return
        }
        if (filtrado !== null) {
            $.post(
                '/Organizacion/GetFiltroObliJer',
                { filtro: strfiltr },
                (response) => {
                    console.log(response);
                    ListCampos = response; //añadido 01.09.2021
                    response.forEach(element => {
                        $('#' + element.strCoCampo).attr('hidden', false);
                        if (element.bitObligatorio == true) {
                            $('#' + element.strCoCampo).attr('requerid', true);
                            var Text_ = $('#L_' + element.strCoCampo).text() + ' (*)'; //añadido 09.08.2021
                            $('#L_' + element.strCoCampo).text(Text_);//añadido 09.08.2021
                        } else {
                            var Text_ = $('#L_' + element.strCoCampo).text().replace(' (*)', ''); //añadido 09.08.2021
                            $('#L_' + element.strCoCampo).text(Text_);//añadido 09.08.2021
                        }
                        if (element.strCoCampo == "UBIGEO") {
                            $('#txtUbigeo').attr('disabled', true);//añadido 22.02.2021
                        }


                        //añadido 1.09.2021
                        if (element.strCoCampo == 'RUC' && element.bitObligatorio == true) {
                            ValidaRuc = true;
                        }
                        if (element.strCoCampo == 'DIRF' && element.bitObligatorio == true) {
                            ValidaDIRF = true;
                        }
                        if (element.strCoCampo == 'PERRESP' && element.bitObligatorio == true) {
                            ValidaPERRESP = true;
                        }
                        if (element.strCoCampo == 'REPLEG' && element.bitObligatorio == true) {
                            ValidaREPLEG = true;
                        }
                        if (element.strCoCampo == 'UBIGEO' && element.bitObligatorio == true) {
                            ValidaUBIGEO = true;
                        }
                        if (element.strCoCampo == 'LOGO' && element.bitObligatorio == true) {
                            ValidaLOGO = true;
                        }
                        if (element.strCoCampo == 'FIRMA' && element.bitObligatorio == true) {
                            ValidaFIRMA = true;
                        }


                    });
                }
            ).fail(function (result) {
                alert('ERROR ' + result.status + ' ' + result.statusText);
            });
        }
        else {
            return;
        }
        Vias()
        FiltroLegal();
        FiltroRes();

    });
}
function OcultarIneDITAR() {

    $('#REPLEG').attr('hidden', true);
    $('#PerResp').attr('hidden', true);
    $('#RUC').attr('hidden', true);
    $('#DIRF').attr('hidden', true);
    $('#UBIGEO').attr('hidden', true);
    $('#LOGO').attr('hidden', true);
    $('#FIRMA').attr('hidden', true);
    $('#CAM1').attr('hidden', true);
    $('#CAM2').attr('hidden', true);
    $('#CAM3').attr('hidden', true);
    $('#CAM4').attr('hidden', true);
    $('#CAM5').attr('hidden', true);
    ValidaRuc = false
    ValidaDIRF = false
    ValidaLOGO = false
    ValidaPERRESP = false
    ValidaREPLEG = false
    ValidaUBIGEO = false
    ValidaWdms = false
    ValidaFIRMA = false
    $('#L_REPLEG').text('Representante Legal');
    $('#L_PERRESP').text('Nombre del Responsable');
    $('#L_RUC').text('RUC');
    $('#L_DIRF').text('Dirección');
    $('#L_FIRMA').text('Firma');
    $('#L_LOGO').text('Logo');
    $('#L_UBIGEO').text('Ubigeo');
    var filtrado = $('#cboJerarquia option:selected').val();
    var strfiltr = filtrado.toString();

    if (filtrado == 0 || filtrado == null) {
        return
    }
    if (filtrado !== null) {
        $.post(
            '/Organizacion/GetFiltroObliJer',
            { filtro: strfiltr },
            (response) => {
                if (true) {
                    ListCampos = response; //añadido 01.09.2021
                    response.forEach(element => {
                        $('#' + element.strCoCampo).attr('hidden', false);
                        if (element.bitObligatorio == true) {
                            $('#' + element.strCoCampo).attr('requerid', true);
                            var Text_ = $('#L_' + element.strCoCampo).text() + ' (*)'; //añadido 09.08.2021
                            $('#L_' + element.strCoCampo).text(Text_);//añadido 09.08.2021
                        } else {
                            var Text_ = $('#L_' + element.strCoCampo).text().replace(' (*)', ''); //añadido 09.08.2021
                            $('#L_' + element.strCoCampo).text(Text_);//añadido 09.08.2021
                        }
                        //añadido 1.09.2021
                        if (element.strCoCampo == "UBIGEO") {
                            $('#txtUbigeo').attr('disabled', true);//añadido 22.02.2021
                        }

                        if (element.strCoCampo == 'RUC' && element.bitObligatorio == true) {
                            ValidaRuc = true;
                        }
                        if (element.strCoCampo == 'DIRF' && element.bitObligatorio == true) {
                            ValidaDIRF = true;
                        }
                        if (element.strCoCampo == 'PERRESP' && element.bitObligatorio == true) {
                            ValidaPERRESP = true;
                        }
                        if (element.strCoCampo == 'REPLEG' && element.bitObligatorio == true) {
                            ValidaREPLEG = true;
                        }
                        if (element.strCoCampo == 'UBIGEO' && element.bitObligatorio == true) {
                            ValidaUBIGEO = true;
                        }
                        if (element.strCoCampo == 'LOGO' && element.bitObligatorio == true) {
                            ValidaLOGO = true;
                        }
                        if (element.strCoCampo == 'FIRMA' && element.bitObligatorio == true) {
                            ValidaFIRMA = true;
                        }

                    });
                }
            }
        ).fail(function (result) {
            alert('ERROR ' + result.status + ' ' + result.statusText);
        });
    }
    else {
        return;
    }
}
function BuscarUnidad() {
    $('#cboJerarquia').on('change', function () {

        var _id = $('#cboJerarquia option:selected').val();

        $.post(
            '/Personal/ListarCombos',
            {
                intIdMenu: 0,
                strEntidad: 'TGUNIDORG',
                intIdFiltroGrupo: _id,
                strGrupo: 'JERAR',
                strSubGrupo: 'UNIORG',
            },
            response => {
                console.log("Cantidad de UOS:");
                console.log(response.length);
                if (response.length > 0) {//añadido 22.02.2021
                    $('#L_UO').text('Unid. Organizacional Superior (*)');
                    $('#cbounidsup').empty()
                    $('#cbounidsup').attr('disabled', false)
                    $('#cbounidsup').append('<option value="">Seleccione</option>')

                    response.forEach(element => {
                        $('#cbounidsup').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
                    })
                } else {//añadido 22.02.2021, si no tiene datos entonces lo deshabilita y limpia
                    $('#cbounidsup').empty()
                    $('#cbounidsup').attr('disabled', true)
                    $('#L_UO').text('Unid. Organizacional Superior');
                }
            }
        )
    });
}
function previewFile() {
    var preview = document.querySelector('#imageupload');
    var file = document.querySelector('#inputImage').files[0];
    var reader = new FileReader();
    var NombreArchivo;
    reader.addEventListener("load", function () {
        preview.src = reader.result;
        console.log($("#imageupload"));

    }, false);
    if (file) {
        reader.readAsDataURL(file);
    }
}
function Ubigeo_Deparment() {


    $('#cboRepPais-UO').on('change', function () {
        $('#cboProvince-UO').empty();
        $('#cboDisrict-UO').empty();
        var paisId = $('#cboRepPais-UO option:selected').val();
        paisId = $('#cboRepPais-UO').val();
        $.post(
            '/Organizacion/getcboRepDep',
            { intcodPais: paisId },

            (response) => {
                if (true) {
                    $('#cboDeparment-UO').empty();
                    $('#cboDeparment-UO').attr('disabled', false);
                    $('#cboDeparment-UO').append('<option value="00">Seleccione</option>');
                    response.forEach(element => {

                        $('#cboDeparment-UO').append('<option value="' + element.strCoUbigeo + '">' + element.strDesUbigeo + '</option>');
                    });


                }

            }
        ).fail(function (result) {
            alert('ERROR ' + result.status + ' ' + result.statusText);
        });
    });

}
function Ubigeo_Province() {
    $('#cboDeparment-UO').on('change', function () {
        $('#cboDisrict-UO').empty();
        var DepartId = $('#cboDeparment-UO option:selected').val();
        var PaisDepId = $('#cboRepPais-UO option:selected').val();
        $.post(
            '/Organizacion/getcboRepProvince',
            {
                strCoDep: DepartId,
                stridPaisDep: PaisDepId
            },
            (response) => {
                if (true) {
                    $('#cboProvince-UO').empty();
                    $('#cboProvince-UO').attr('disabled', false);
                    $('#cboProvince-UO').append('<option value="00">Seleccione</option>');
                    response.forEach(element => {
                        $('#cboProvince-UO').append('<option value="' + element.strCoUbigeo + '">' + element.strDesUbigeo + '</option>');
                    });

                }

            }
        ).fail(function (result) {
            alert('ERROR ' + result.status + ' ' + result.statusText);
        });
    });

}
function Ubigeo_District() {
    $('#cboProvince-UO').on('change', function () {
        var ProvinceID = $('#cboProvince-UO option:selected').val();
        var PaisDisId = $('#cboRepPais-UO option:selected').val();
        $.post(
            '/Organizacion/getcboRepDistrict',
            {
                stridpaisProv: PaisDisId,
                strCoDep: ProvinceID
            },
            (response) => {
                if (true) {
                    $('#cboDisrict-UO').empty();
                    $('#cboDisrict-UO').attr('disabled', false);
                    $('#cboDisrict-UO').append('<option value="00">Seleccione</option>');
                    response.forEach(element => {
                        $('#cboDisrict-UO').append('<option value="' + element.intIdUbigeo + '">' + element.strDesUbigeo + '</option>');
                    });

                }

            }
        ).fail(function (result) {
            alert('ERROR ' + result.status + ' ' + result.statusText);
        });
    });
}

function intentEliminarUndOrg(idUndOrg, strDesc) {
    swal({
        title: "Eliminar Unidad Organizacional",
        text: "¿Está seguro de eliminar la Unidad Organizacional    ''<strong>" + strDesc + "</strong>''   ?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí, eliminar",
        cancelButtonText: "No, cancelar",
    }).then(function (isConfirm) {
        validarSession()
        yesEliminaUndOrg(idUndOrg);
    }, function (dismiss) {
        if (dismiss == 'cancel') {
            //swal("Cancelado", "La Operación fue cancelada", "error");
        }
    });
}
function yesEliminaUndOrg(idUndOrg) {
    $.post(
        '/Organizacion/EliminarUnidad',
        { intIdUniOrg: idUndOrg },
        (response) => {
            console.log(response);
            if (response.type !== '') {
                var tipo = 'Eliminado!';
                if (response.type === 'error')
                    tipo = 'NO SE PUEDE ELIMINAR EL REGISTRO';
                swal(tipo, response.message, response.type);

                if (response.type === 'success')
                    $('.form-hide-undOrganiza').hide();
                TablaUnidadOrg('', '', '');
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}

$('#tablaUnidOrg  tbody').on('click', 'tr button.btn-delete', function () {
    validarSession()
    var data = _varTablaUndOrg.row($(this).parents('tr')).data();

    if (data == null) {
        data = null;

        var data = _varTablaUndOrg.row($(this).parents('li')).data();
        intentEliminarUndOrg(data['intIdUniOrg'], data['strDescripcion']);

    } else {

        var data = _varTablaUndOrg.row($(this).parents('tr')).data();
        intentEliminarUndOrg(data['intIdUniOrg'], data['strDescripcion']);

    }


});
$('#tablaUnidOrg  tbody').on('click', 'tr button.btn-edit', function () {
    validarSession()
    var data = _varTablaUndOrg.row($(this).parents('tr')).data();
    if (data == null) {
        data = null;
        var data = _varTablaUndOrg.row($(this).parents('li')).data();
        cardarDatosUndOrg(data);
    } else {
        var data = _varTablaUndOrg.row($(this).parents('tr')).data();
        cardarDatosUndOrg(data);
    }

});
$('#btn-save-change-undOrganiza').on('click', function () {
    validarSession()
    var titulo_ = 'Nueva Und. Organizacional'

    $(".notifry_error").html('')

    var _nivelJerar = $('#cboJerarquia option:selected').val();   //selected
    var _uoPadre = $('#cbounidsup option:selected').val();
    var _codigo = $('#txt-cod-UO').val();
    var _desc = $('#txt-desc-UO').val();
    var _activo = $('#chk-activo-UO').is(':checked');
    var _principal = $('#checkPrincipal').is(':checked');

    if ($('#txtIntidUbigeo').val() == "") {
        var _ubigeo = null;
    } else {
        var _ubigeo = $('#txtIntidUbigeo').val();
    }
    var _ruc = $('#txt-ruc-UO').val();
    var _legal = $('#idLegal').val();
    var _resp = $('#idPerLeg').val();
    var _via = $('#TipVia option:selected').val();

    var _dirfiscal = $('#TXTTIPVIA').val();
    var _camp1 = $('#strUOCampo1').val();
    var _camp2 = $('#strUOCampo2').val();
    var _camp3 = $('#strUOCampo3').val();
    var _camp4 = $('#strUOCampo4').val();
    var _camp5 = $('#strUOCampo5').val(); //wdms
    var _imgRuta = $('#txt-ruta').val().replace('"', '').replace('"', '');
    var Obj = _imgRuta.split('/');
    _imgRuta = Obj[Obj.length - 1];

    var _imgRutaF = $('#txt-rutaF').val().replace('"', '').replace('"', '');
    var ObjF = _imgRutaF.split('/');
    _imgRutaF = ObjF[ObjF.length - 1];



    if (_nivelJerar === '' || _codigo === '' || _desc === '' || _uoPadre === '') {
        messageResponseMix({ type: 'info', message: 'Complete los campos obligatorios' }, titulo_)//añadido 04/08/2021
        return;
    }

    if (!$('#txt-cod-UO')[0].validity.valid) {
        messageResponseMix({ type: 'info', message: 'Ingrese solo números y letras sin espacios en blanco.' }, 'Codigo(*)')//añadido 04/08/2021
        return;
    }

    //añadido 01.09.2021
    if (ValidaREPLEG && _legal == "") {
        messageResponseMix({ type: 'info', message: 'Seleccione un Representante Legal' }, 'Representante Legal')//añadido 04/08/2021
        return;
    }
    if (ValidaPERRESP && _resp == "") {
        messageResponseMix({ type: 'info', message: 'Seleccione un Responsable' }, 'Responsable')//añadido 04/08/2021
        return;
    }
    if (ValidaRuc && _ruc == "") {
        messageResponseMix({ type: 'info', message: 'Ingrese RUC' }, 'RUC')//añadido 04/08/2021
        return;
    }
    if (_ruc != "" && !$('#txt-ruc-UO')[0].validity.valid) {
        messageResponseMix({ type: 'info', message: 'Ingrese solo números, 11 dígitos' }, 'RUC')//añadido 04/08/2021
        return;
    }
    if (ValidaDIRF && _via == "" | _via == "0") {
        if (ValidaDIRF && _dirfiscal == "") {
            messageResponseMix({ type: 'info', message: 'Seleccione un tipo de vía e ingrese la dirección' }, 'Dirección')//añadido 04/08/2021
        } else {
            messageResponseMix({ type: 'info', message: 'Indique el tipo de vía para la dirección' }, 'Dirección')//añadido 04/08/2021
        }
        return;
    }
    if (ValidaDIRF && _dirfiscal == "") {
        messageResponseMix({ type: 'info', message: 'Ingrese una dirección' }, 'Dirección')//añadido 04/08/2021
        return;
    }

    if (ValidaUBIGEO && _ubigeo == "" | _ubigeo == "0") {
        messageResponseMix({ type: 'info', message: 'Seleccione un Ubigeo' }, 'Ubigeo')//añadido 04/08/2021
        return;
    }
    if (ValidaWdms && _camp5 == "") { //pendiente validar que campo es
        messageResponseMix({ type: 'info', message: 'Ingrese número Wdms' }, 'Number Wdms')//añadido 04/08/2021
        return;
    }
    if (ValidaLOGO && _imgRuta == "") { //pendiente validar que campo es
        messageResponseMix({ type: 'info', message: 'Seleccione un Logo' }, 'Logo')//añadido 04/08/2021
        return;
    }
    if (ValidaFIRMA && _imgRutaF == "") { //pendiente validar que campo es
        messageResponseMix({ type: 'info', message: 'Seleccione una Firma' }, 'Firma')//añadido 04/08/2021
        return;
    }

    if (_uoPadre === '') {
        _uoPadre = null;
    }

    var UnidadOrg = {
        strCodigo: _codigo,
        strDescripcion: _desc,
        intIdJerOrg: _nivelJerar,
        strCoJerPadre: _uoPadre,
        bitFlActivo: _activo,
        bitFlPrincipal: _principal,
        intIdUbigeo: _ubigeo,
        intIdUniOrgSup: _uoPadre,
        intIdRepLeg: _legal,
        intIdPerResp: _resp,
        intidTipoVia: _via,
        strRuc: _ruc,
        strDirLogo: _imgRuta,
        strDirFiscal: _dirfiscal,
        strUOcampo1: _camp1,
        strUOcampo2: _camp2,
        strUOcampo3: _camp3,
        strUOcampo4: _camp4,
        strUOcampo5: _camp5,
        strDirFirma: _imgRutaF//añadido 08.09.2021
    }



    function FiltroLegal() {
        var filtro = document.getElementById("Legal").value;
        console.log(filtro);
        var relacion = new Array();
        $.post(
            '/Organizacion/getLegal',
            { strfiltroLegal: filtro },
            (response) => {
                if (true) {

                    response.forEach(element => {
                        $('#txtPersonaResponsable').val(element.intIdRepLeg);
                    });
                }
            }
        )
    }


    $.post(
        '/Organizacion/InsertUpdateUnidadOrg',
        { UnidadOrg: UnidadOrg, intTipoOperacion: 1 },
        (response) => {
            console.log(response);
            if (response.type !== '') {

                if (response.type === 'success') {

                    messageResponseMix({ type: response.type, message: response.message }, titulo_)//añadido 04/08/2021
                    LimpiarUbigeo();
                    $('.form-hide-undOrganiza').hide();
                    TablaUnidadOrg();
                    return;

                } else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Unidad Organizacional';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);//método usado para pintar campos de html desde BD
                    } else {
                        messageResponseMix({ type: response.type, message: response.message }, titulo_)//añadido 04/08/2021
                    }
                    return;
                }

            }

        }

    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

});
$('#btn-update-undOrganiza').on('click', function () {
    validarSession()
    var titulo_ = 'Actualizar Und. Organizacional'
    $(".notifry_error").html("")

    var _nivelJerar = $('#cboJerarquia option:selected').val();   //selected
    var _uoPadre = $('#cbounidsup option:selected').val();
    var _codigo = $('#txt-cod-UO').val();
    var _desc = $('#txt-desc-UO').val();
    var _activo = $('#chk-activo-UO').is(':checked');
    var _principal = $('#checkPrincipal').is(':checked');

    if ($('#txtIntidUbigeo').val() == "") {
        var _ubigeo = null;
    } else {
        var _ubigeo = $('#txtIntidUbigeo').val();
    }
    var _ruc = $('#txt-ruc-UO').val();
    var _legal = $('#idLegal').val();
    var _resp = $('#idPerLeg').val();
    var _via = $('#TipVia option:selected').val();

    var _dirfiscal = $('#TXTTIPVIA').val();
    var _camp1 = $('#strUOCampo1').val();
    var _camp2 = $('#strUOCampo2').val();
    var _camp3 = $('#strUOCampo3').val();
    var _camp4 = $('#strUOCampo4').val();
    var _camp5 = $('#strUOCampo5').val();
    var _imgRuta = $('#txt-ruta').val().replace('"', '').replace('"', '');
    var Obj = _imgRuta.split('/');
    _imgRuta = Obj[Obj.length - 1];

    var _imgRutaF = $('#txt-rutaF').val().replace('"', '').replace('"', '');
    var ObjF = _imgRutaF.split('/');
    _imgRutaF = ObjF[ObjF.length - 1];

    var _intidorg = $('#idorg').val();

    if (_nivelJerar === '' || _codigo === '' || _desc === '' || _uoPadre === '') {
        messageResponseMix({ type: 'info', message: 'Complete los campos obligatorios' }, titulo_)//añadido 04/08/2021
        return;
    }

    if (!$('#txt-cod-UO')[0].validity.valid) {
        messageResponseMix({ type: 'info', message: 'Ingrese solo números y letras sin espacios en blanco.' }, 'Codigo(*)')//añadido 04/08/2021
        return;
    }

    //añadido 01.09.2021
    if (ValidaREPLEG && _legal == "") {
        messageResponseMix({ type: 'info', message: 'Seleccione un Representante Legal' }, 'Representante Legal')//añadido 04/08/2021
        return;
    }
    if (ValidaPERRESP && _resp == "") {
        messageResponseMix({ type: 'info', message: 'Seleccione un Responsable' }, 'Responsable')//añadido 04/08/2021
        return;
    }
    if (ValidaRuc && _ruc == "") {
        messageResponseMix({ type: 'info', message: 'Ingrese RUC' }, 'RUC')//añadido 04/08/2021
        return;
    }
    if (_ruc != "" && !$('#txt-ruc-UO')[0].validity.valid) {
        messageResponseMix({ type: 'info', message: 'Ingrese solo números, 11 dígitos' }, 'RUC')//añadido 04/08/2021
        return;
    }
    if (ValidaDIRF && _via == "" | _via == "0") {
        if (ValidaDIRF && _dirfiscal == "") {
            messageResponseMix({ type: 'info', message: 'Seleccione un tipo de vía e ingrese la dirección' }, 'Dirección')//añadido 04/08/2021
        } else {
            messageResponseMix({ type: 'info', message: 'Indique el tipo de vía para la dirección' }, 'Dirección')//añadido 04/08/2021
        }
        return;
    }
    if (ValidaDIRF && _dirfiscal == "") {
        messageResponseMix({ type: 'info', message: 'Ingrese una dirección' }, 'Dirección')//añadido 04/08/2021
        return;
    }

    if (ValidaUBIGEO && _ubigeo == "" | _ubigeo == "0") {
        messageResponseMix({ type: 'info', message: 'Seleccione un Ubigeo' }, 'Ubigeo')//añadido 04/08/2021
        return;
    }
    if (ValidaWdms && _camp5 == "") { //pendiente validar que campo es
        messageResponseMix({ type: 'info', message: 'Ingrese número Wdms' }, 'Number Wdms')//añadido 04/08/2021
        return;
    }
    if (ValidaLOGO && _imgRuta == "") { //pendiente validar que campo es
        messageResponseMix({ type: 'info', message: 'Seleccione un Logo' }, 'Logo')//añadido 04/08/2021
        return;
    }
    if (ValidaFIRMA && _imgRutaF == "") { //pendiente validar que campo es
        messageResponseMix({ type: 'info', message: 'Seleccione una Firma' }, 'Firma')//añadido 04/08/2021
        return;
    }

    if (_uoPadre === '') {
        _uoPadre = null;
    }

    var UnidadOrg = {
        strCodigo: _codigo,
        strDescripcion: _desc,
        intIdJerOrg: _nivelJerar,
        strCoJerPadre: _uoPadre,
        bitFlActivo: _activo,
        bitFlPrincipal: _principal,
        intIdUbigeo: _ubigeo,
        intIdUniOrgSup: _uoPadre,
        intIdRepLeg: _legal,
        intIdPerResp: _resp,
        intidTipoVia: _via,
        strRuc: _ruc,
        strDirLogo: _imgRuta,
        strDirFiscal: _dirfiscal,
        strUOcampo1: _camp1,
        strUOcampo2: _camp2,
        strUOcampo3: _camp3,
        strUOcampo4: _camp4,
        strUOcampo5: _camp5,
        intIdUniOrg: _intidorg,
        strDirFirma: _imgRutaF//añadido 08.09.2021
    }

    function FiltroLegal() {
        var filtro = document.getElementById("Legal").value;
        console.log(filtro);
        var relacion = new Array();
        $.post(
            '/Organizacion/getLegal',
            { strfiltroLegal: filtro },
            (response) => {
                if (true) {
                    response.forEach(element => {
                        $('#txtPersonaResponsable').val(element.intIdRepLeg);
                    });
                }
            }
        )
    }
    $.post(
        '/Organizacion/InsertUpdateUnidadOrg',
        { UnidadOrg: UnidadOrg, intTipoOperacion: 2 },
        (response) => {

            console.log(response);
            if (response.type !== '') {
                if (response.type === 'success') {
                    messageResponseMix({ type: response.type, message: response.message }, titulo_)//añadido 04/08/2021
                    LimpiarUbigeo();
                    $('.form-hide-undOrganiza').hide();
                    TablaUnidadOrg();
                    return;
                } else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Unidad Organizacional';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        messageResponseMix({ type: response.type, message: response.message }, titulo_)//añadido 04/08/2021
                    }
                    return;
                }

            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
});
$('#btn-new-undOrganiza').on('click', function () {
    var titulo_ = 'Nueva Unidad Organizacional';
    var SesionMovi = {
        IntIdMenu: 'M0001',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }
    Editable = false;
    $.post(//añadido 06.07.2021
        '/Configuracion/GetTSConfi',//'/Configuracion/GetTSConfi',
        {
            objSession: SesionMovi,
            strCoConfi: 'HAB_SERVICE',
        },
        response => {
            var Confi = response.strValorConfi;
            //RESULTADO: El valor está expresado en Si=1 y No=0.
            if (Confi == "1") {
                messageResponseMix({ type: 'error', message: "La Licencia de Prueba no permite Crear Und. Organizacionales" }, titulo_)//añadido 04/08/2021
            } else {
                validarSession()
                LimpiarUbigeo();
                $('.form-hide-undOrganiza').show();

                $('#btn-update-undOrganiza').hide();
                $('#btn-save-change-undOrganiza').show();

                $.post(
                    '/Organizacion/NuevaUnidadOrg',
                    {},
                    (response) => {
                        if (response !== '') {
                            $('.form-hide-undOrganiza .x_content').empty();
                            $('.form-hide-undOrganiza .x_content').html(response);
                            $('.form-hide-undOrganiza').show();
                            switcheryLoad();
                            BuscarUnidad();
                            CombosUbigeo(null)//añadido 17.09.2021
                            Editable = false;//añadido 29.09.2021
                            OcultarIn();
                            //añadido 09.08.2021
                            //CamposAdicionalesCargo();
                            var txtCod = 'strCodigo';
                            var txtdes = 'strDescripcion';
                            $.post(
                                '/Organizacion/ListarCaracteresMax',
                                { strMaestro: 'TGUNIDORG' },
                                (response) => {
                                    response.forEach(element => {
                                        if (element.strColumnName == txtCod) {
                                            $('#ValCode').children("input").attr('maxlength', element.intMaxLength);
                                        } if (element.strColumnName == txtdes) {
                                            $('#Valdes').children("input").attr('maxlength', element.intMaxLength);

                                        }
                                    });
                                });
                            //fin añadido 09.08.2021
                        }
                        init_checkBox_styles()
                    }
                ).fail(function (result) {
                    alert('ERROR ' + result.status + ' ' + result.statusText);
                });
            }
        })
});
$('#btn-cancel-undOrganiza').on('click', function () {
    validarSession()
    $('.form-hide-undOrganiza').hide();
    LimpiarUbigeo();
});
function LimpiarUbigeo() {
    $('#txtIntidUbigeo').val("");
    $('#CboRegion').empty();
    $('#CboRegion').append('<option value="0">Seleccione</option>')
    $('#CboProvincia').empty();
    $('#CboProvincia').append('<option value="0">Seleccione</option>')
    $('#CboDistrito').empty();
    $('#CboDistrito').append('<option value="0">Seleccione</option>')
    $('#CboPais').val("0");
    UbiDi = 0; //Distrito
    UbiPr = 0; //Provincia
    UbiDe = 0; //Departamento
    UbiPa = 0; //Pais
}

$('#filActiUniOrg').on('change', function () {
    TablaUnidadOrg();
});
$('#cboJerarUniOrg').on('change', function () {
    validarSession()
    TablaUnidadOrg();
});
//$('#filtroUniOrg').keyup(function () {
//    TablaUnidadOrg();
//});
//añadido 04.08.2021
$('#filtroUniOrg').on('change', function () {
    validarSession()
    TablaUnidadOrg();
})



//#endregion MANT. UNIDAD ORGANIZACIONAL





/**------------------------------------------------------ */
/**3. Cargo */
/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
//#region MANT. CARGO
var _varTablaCargo;

function BuscarUnidades() {
    $('#cboJerarquia').on('change', function () {
        var id = $('#cboJerarquia option:selected').val();

        if (id == 0 || !id) {
            $('#cbounidsupe').empty();
            $('#cbounidsupe').attr('disabled', true);

            return;
        }
        $.post(
            '/Organizacion/getUnidxJerarquia',
            { IntIdJerOrg: id },
            (response) => {
                if (true) {
                    console.log(response);
                    response.forEach(element => {
                        $('#cbounidsupe').attr('disabled', false);
                        $('#cbounidsupe').append('<option value="' + element.intIdUniOrg + '">' + element.strDescripcion + '</option>');
                    });

                }
            }
        ).fail(function (result) {
            alert('ERROR ' + result.status + ' ' + result.statusText);
        });
        $('#cbounidsupe').empty();
    });
}
function CargarUnidOreg() {

    var id = $('#cboJerarquia option:selected').val();

    if (id == 0 || !id) {
        $('#cbounidsupe').empty();
        $('#cbounidsupe').attr('disabled', true);

        return;
    }
    $.post(
        '/Organizacion/getUnidxJerarquia',
        { IntIdJerOrg: id },
        (response) => {
            if (true) {
                console.log(response);
                response.forEach(element => {
                    $('#cbounidsupe').attr('disabled', false);
                    $('#cbounidsupe').append('<option value="' + element.intIdUniOrg + '">' + element.strDescripcion + '</option>');
                });

            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
    $('#cbounidsupe').empty();

}
function TablaCargos() {

    var filtrosActivo = $('#filActiCargo').val();
    var filtrojer = $('#cboDepenCargo').val();
    var strfiltro = $('#filtroCargo').val();

    $.ajax({
        url: '/Organizacion/getTablaFiltradaCargos',
        type: 'POST',
        data: {
            IntActivoFilter: filtrosActivo, strfilter: strfiltro, intfiltrojer: filtrojer
        },
        beforeSend: function () {
            $.blockUI({
                css: {
                    border: 'none',
                    padding: '15px',
                    backgroundColor: '#000',
                    '-webkit-border-radius': '10px',
                    '-moz-border-radius': '10px',
                    opacity: .5,
                    color: '#fff'
                },
                message: 'Procesando...'
            });
        },
        success: function (response) {
            console.log(response);
            if (typeof _varTablaCargo !== 'undefined') {
                _varTablaCargo.destroy();
            }
            _varTablaCargo = $('#tablacargo').DataTable({
                data: response,
                columns: [

                    { data: 'strCoCargo' },
                    { data: 'strDesCargo' },
                    { data: 'strNomJerOrg' },
                    { data: 'strDescripcion' },
                    { data: 'FlActivo.strEstadoActivo' },
                    { data: null },
                    { data: 'intIdCargo' },
                    { data: 'bitFlActivo' },
                    { data: 'bitFlPrincipal' },
                    { data: 'strCargoCampo1' },
                    { data: 'strCargoCampo2' },
                    { data: 'strCargoCampo3' },
                    { data: 'strCargoCampo4' },
                    { data: 'strCargoCampo5' },
                    { data: 'intIdUniOrg' },
                ],
                lengthMenu: [10, 25, 50],
                responsive: true,
                order: [],
                language: _datatableLanguaje,
                columnDefs: [//ocultar y definir columnas
                    {
                        targets: [6],//intIdCargo
                        visible: false,
                        searchable: true
                    },
                    {
                        targets: [7],//bitFlActivo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [8],//bitFlPrincipal
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [9],//strCargoCampo1
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [10],//strCargoCampo2
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [11],//strCargoCampo3
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [12],//strCargoCampo4
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [13],//strCargoCampo5
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [14],//intIdUniOrg
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [5],
                        data: null,
                        defaultContent: '<button class="btn btn-success btn-xs btn-edit" ><i class="fa fa-pencil"></i> Editar </button>' +
                            '<button class="btn btn-primary btn-xs btn-delete"><i class="fa fa-trash-o"></i> Eliminar </button>'
                    }
                ],
                dom: 'lBfrtip',
            });
        },
        complete: function () {
            $.unblockUI();
        }
    });
}
function cardarDatosCargo(data) {
    $('#btn-save-change-cargo').hide();

    var objDatosCargo = {
        intIdCargo: data['intIdCargo'],
        strCoCargo: data['strCoCargo'],
        strDesCargo: data['strDesCargo'],
        strNomJerOrg: data['strNomJerOrg'],
        strDescripcion: data['strDescripcion'],
        intIdUniOrg: data['intIdUniOrg'],
        strEstadoActivo: data['FlActivo']['strEstadoActivo'],
        bitFlActivo: data['FlActivo']['bitFlActivo'],
        bitFlPrincipal: data['bitFlPrincipal'],
        strCargoCampo1: data['strCargoCampo1'],
        strCargoCampo2: data['strCargoCampo2'],
        strCargoCampo3: data['strCargoCampo3'],
        strCargoCampo4: data['strCargoCampo4'],
        strCargoCampo5: data['strCargoCampo5']


    }

    console.log(objDatosCargo);

    $.post(
        '/Organizacion/EditarCargo',
        { objCargo: objDatosCargo },
        (response) => {
            if (response !== '') {
                $('.form-hide-cargo .x_content').empty();
                $('.form-hide-cargo .x_content').html(response);
                $('.form-hide-cargo').show();
                switcheryLoad();
                init_checkBox_styles();
                //  onchange_jerarquia();
                $('#txt-cod-Cargo').val(objDatosCargo.strCoCargo);
                $('#txt-desc-Cargo').val(objDatosCargo.strDesCargo);
                $('#txt-desc-Cargo').val(objDatosCargo.strDesCargo);
                $('#txtIdCar').val(objDatosCargo.intIdCargo);


                if (objDatosCargo.strEstadoActivo == 'Activo') {
                    $('#11').html('<label id="_lbl_">Activo</label> <input type = "checkbox" id = "chk-activo-Cargo" class= "js-switch" checked /><script>switcheryLoad();</script >');
                } else {
                    $('#11').html('<label id="_lbl_">Inactivo</label> <input type = "checkbox" id = "chk-activo-Cargo" class= "js-switch" unchecked /><script>switcheryLoad();</script >');
                }

                if (data.bitFlPrincipal === true) {
                    $('#checkPrincipal').iCheck('check')
                }

                ////Bloque de Campos Adicionales

                $.post(
                    '/Organizacion/CamposAdicionales',
                    { strEntidad: 'TGCARGO' },
                    (response) => {

                        console.log(response);
                        $('#containerCampose').empty();
                        response.forEach(element => {

                            $('#containerCampose').append(
                                ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                                + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="' + element.strTitulo.replace("(*)", "") + '" maxlength="255"/>' + '</div></div>');
                        });

                        $('#strCargoCampo1').val(objDatosCargo.strCargoCampo1);
                        $('#strCargoCampo2').val(objDatosCargo.strCargoCampo2);
                        $('#strCargoCampo3').val(objDatosCargo.strCargoCampo3);
                        $('#strCargoCampo4').val(objDatosCargo.strCargoCampo4);
                        $('#strCargoCampo5').val(objDatosCargo.strCargoCampo5);
                    });


                //Bloque de llenados de CBO

                $("#cboJerarquia option").filter(function () {
                    return this.text == objDatosCargo.strNomJerOrg;
                }).attr('selected', true);

                var id = $('#cboJerarquia option:selected').val();
                if (id == 0 || !id) {
                    $('#cbounidsupe').empty();
                    $('#cbounidsupe').attr('disabled', true);

                    return;
                }
                $.post(
                    '/Organizacion/getUnidxJerarquia',
                    { IntIdJerOrg: id },
                    (response) => {

                        response.forEach(element => {
                            $('#cbounidsupe').attr('disabled', false);
                            $('#cbounidsupe').append('<option value="' + element.intIdUniOrg + '" >' + element.strDescripcion + '</option>');
                            if (element.intIdUniOrg == objDatosCargo.intIdUniOrg) {
                                $("#cbounidsupe option").filter(function () {
                                    return this.text == objDatosCargo.strDescripcion;
                                }).attr('selected', true);
                            }

                        });

                    }
                ).fail(function (result) {
                    alert('ERROR ' + result.status + ' ' + result.statusText);
                });
            }
            $('#btn-update-cargo').show();

            var txtcod = 'strCoCargo';
            var txtdes = 'strDesCargo';

            $.post(
                '/Organizacion/ListarCaracteresMax',
                { strMaestro: 'TGCARGO' },
                (response) => {
                    response.forEach(element => {
                        if (element.strColumnName == txtcod) {
                            $('.Valcod').children("input").attr('maxlength', element.intMaxLength);
                        }
                        if (element.strColumnName == txtdes) {
                            $('.Valdes').children("input").attr('maxlength', element.intMaxLength);
                        }
                    });
                });


        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}
function CamposAdicionalesCargo() {

    $.post(
        '/Organizacion/CamposAdicionales',
        { strEntidad: 'TGCARGO' },
        (response) => {
            console.log(response);
            $('#containerCampos').empty();
            response.forEach(element => {

                $('#containerCampos').append(
                    ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                    + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="' + element.strTitulo.replace("(*)", "") + '" maxlength="255"/>' + '</div></div>');


            });
        });
}
function intentEliminarCargo(idCargo, strNomCargo) {

    swal({
        title: "Eliminar Cargo",
        text: "¿Está seguro de eliminar el Cargo    ''<strong>" + strNomCargo + "</strong>''   ?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí, eliminar",
        cancelButtonText: "No, cancelar",
    }).then(function (isConfirm) {
        validarSession()
        yesEliminaCargo(idCargo);
    }, function (dismiss) {
        if (dismiss == 'cancel') {
            //swal("Cancelado", "La Operación fue cancelada", "error");
        }
    });
}
function yesEliminaCargo(idCargo) {
    $.post(
        '/Organizacion/EliminarCargo',
        { intIdCargo: idCargo },
        (response) => {
            console.log(response);
            if (response.type !== '') {
                var tipo = 'Eliminado!';
                if (response.type === 'error')
                    tipo = 'NO SE PUEDE ELIMINAR EL REGISTRO';
                swal(tipo, response.message, response.type);

                if (response.type === 'success')
                    $('.form-hide-cargo').hide();
                TablaCargos('', '', '');
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}

$('#tablacargo tbody').on('click', 'tr button.btn-delete', function () {
    validarSession()
    var data = _varTablaCargo.row($(this).parents('tr')).data();

    if (data == null) {
        data = null;
        var data = _varTablaCargo.row($(this).parents('li')).data();
        intentEliminarCargo(data['intIdCargo'], data['strDesCargo']);

    } else {
        var data = _varTablaCargo.row($(this).parents('tr')).data();
        intentEliminarCargo(data['intIdCargo'], data['strDesCargo']);
    }
});
$('#tablacargo tbody').on('click', 'tr button.btn-edit', function () {
    validarSession()
    var data = _varTablaCargo.row($(this).parents('tr')).data();
    if (data == null) {
        data = null;
        var data = _varTablaCargo.row($(this).parents('li')).data();
        cardarDatosCargo(data);
    } else {
        var data = _varTablaCargo.row($(this).parents('tr')).data();
        cardarDatosCargo(data);
    }
});
$('#btn-new-cargo').on('click', function () {
    validarSession()
    $('.form-hide-Cargo').show();
    $('#btn-update-cargo').hide();
    $('#btn-save-change-cargo').show();

    $.post(
        '/Organizacion/NuevoCargo',
        {},
        (response) => {
            if (response !== '') {
                $('.form-hide-cargo .x_content').empty();
                $('.form-hide-cargo .x_content').html(response);
                $('.form-hide-cargo').show();
                //BuscarUnidades();
                CamposAdicionalesCargo();
                switcheryLoad();//checked verde
                var txtCod = 'strCoCargo';
                var txtdes = 'strDesCargo';

                $.post(
                    '/Organizacion/ListarCaracteresMax',
                    { strMaestro: 'TGCARGO' },
                    (response) => {
                        response.forEach(element => {

                            if (element.strColumnName == txtCod) {

                                $('#ValCode').children("input").attr('maxlength', element.intMaxLength);
                            } if (element.strColumnName == txtdes) {
                                $('#Valdes').children("input").attr('maxlength', element.intMaxLength);

                            }
                        });
                    });
            }
            init_checkBox_styles()
        });

});
$('#btn-save-change-cargo').on('click', function () {
    validarSession()
    var titulo_ = 'Nuevo Cargo'

    var _uorg = $('#cbounidsupe option:selected').val();    //selected
    var _codigo = $('#txt-cod-Cargo').val();
    var _desc = $('#txt-desc-Cargo').val();
    var _activo = $('#chk-activo-Cargo').is(':checked');
    var _principal = $('#checkPrincipal').is(':checked');
    if ($('#strCargoCampo1').val() == null) {
        var _camp1 = null;
    } else {
        var _camp1 = $('#strCargoCampo1').val();
    }
    if ($('#strCargoCampo2').val() == null) {
        var _camp2 = null;
    } else {
        var _camp2 = $('#strCargoCampo2').val();
    } if ($('#strCargoCampo3').val() == null) {
        var _camp3 = null;
    } else {
        var _camp3 = $('#strCargoCampo3').val();
    } if ($('#strCargoCampo4').val() == null) {
        var _camp4 = null;
    } else {
        var _camp4 = $('#strCargoCampo4').val();
    } if ($('#strCargoCampo5').val() == null) {
        var _camp5 = null;
    } else {
        var _camp5 = $('#strCargoCampo5').val();
    }

    if (_codigo === '' || _desc === '' || _uorg === '') {
        messageResponseMix({ type: 'info', message: 'Complete los campos obligatorios' }, titulo_)//añadido 04/08/2021
        //new PNotify({
        //    title: 'Nuevo Cargo',
        //    text: 'Complete los campos obligatorios',
        //    type: 'info',
        //    delay: 3000,
        //    styling: 'bootstrap3',
        //    addclass: 'dark'
        //});
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');

        return;
    }

    if (!$('#txt-cod-Cargo')[0].validity.valid) {
        messageResponseMix({ type: 'info', message: 'Ingrese solo números y letras sin espacios en blanco.' }, 'Codigo(*)')//añadido 04/08/2021
        //new PNotify({
        //    title: 'Codigo(*)',
        //    text: 'Ingrese solo números y letras sin espacios en blanco.',
        //    type: 'info',
        //    delay: 3000,
        //    styling: 'bootstrap3',
        //    addclass: 'dark'
        //});
        return;
    }

    if (_uorg === '') {
        _uoPadre = null;
    }

    var Cargo = {
        strCoCargo: _codigo,
        strDesCargo: _desc,
        intIdUniOrg: _uorg,
        strCargoCampo1: _camp1,
        strCargoCampo2: _camp2,
        strCargoCampo3: _camp3,
        strCargoCampo4: _camp4,
        strCargoCampo5: _camp5,
        bitFlActivo: _activo,
        bitFlPrincipal: _principal,
    }

    $.post(
        '/Organizacion/InsertUpdateCargo',
        { Cargo: Cargo, intTipoOperacion: 1 },
        (response) => {
            console.log(response);

            if (response.type !== '') {

                if (response.type === 'success') {
                    messageResponseMix({ type: response.type, message: response.message }, titulo_)//añadido 04/08/2021

                    //new PNotify({
                    //    title: 'Nuevo Cargo',
                    //    text: response.message,
                    //    type: response.type,
                    //    delay: 3000,
                    //    styling: 'bootstrap3'

                    //});
                    $('.form-hide-cargo').hide();
                    TablaCargos();

                } else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Cargo';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        messageResponseMix({ type: response.type, message: response.message }, titulo_)//añadido 04/08/2021
                        //new PNotify({
                        //    title: 'Cargo',
                        //    text: response.message,
                        //    type: response.type,
                        //    delay: 3000,
                        //    styling: 'bootstrap3'
                        //});
                    }
                    return;
                }
            }
        }

    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });


});
$('#btn-update-cargo').on('click', function () {
    validarSession()
    var titulo_ = 'Actualización de Cargo';

    var _codcargo = $('#txtIdCar').val();
    var _uorg = $('#cbounidsupe option:selected').val();    //selected
    var _codigo = $('#txt-cod-Cargo').val();
    var _desc = $('#txt-desc-Cargo').val();
    var _activo = $('#chk-activo-Cargo').is(':checked');
    var _principal = $('#checkPrincipal').is(':checked');
    if ($('#strCargoCampo1').val() == null) {
        var _camp1 = null;
    } else {
        var _camp1 = $('#strCargoCampo1').val();
    }
    if ($('#strCargoCampo2').val() == null) {
        var _camp2 = null;
    } else {
        var _camp2 = $('#strCargoCampo2').val();
    } if ($('#strCargoCampo3').val() == null) {
        var _camp3 = null;
    } else {
        var _camp3 = $('#strCargoCampo3').val();
    } if ($('#strCargoCampo4').val() == null) {
        var _camp4 = null;
    } else {
        var _camp4 = $('#strCargoCampo4').val();
    } if ($('#strCargoCampo5').val() == null) {
        var _camp5 = null;
    } else {
        var _camp5 = $('#strCargoCampo5').val();
    }

    if (_codigo === '' || _desc === '' || _uorg === 0) {
        messageResponseMix({ type: 'info', message: 'Complete los campos obligatorios' }, titulo_)//añadido 04/08/2021
        //new PNotify({
        //    title: 'Actualizacion de Cargo',
        //    text: 'Complete los campos obligatorios',
        //    type: 'info',
        //    delay: 3000,
        //    styling: 'bootstrap3',
        //    addclass: 'dark'
        //});
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');

        return;
    }

    if (!$('#txt-cod-Cargo')[0].validity.valid) {
        messageResponseMix({ type: 'info', message: 'Ingrese solo números y letras sin espacios en blanco.' }, 'Codigo(*)')//añadido 04/08/2021
        //new PNotify({
        //    title: 'Codigo(*)',
        //    text: 'Ingrese solo números y letras sin espacios en blanco.',
        //    type: 'info',
        //    delay: 3000,
        //    styling: 'bootstrap3',
        //    addclass: 'dark'
        //});
        return;
    }

    if (_uorg === 0) {
        messageResponseMix({ type: 'info', message: 'Seleccione una Und. Organizacional' }, titulo_)//añadido 04/08/2021
        //new PNotify({
        //    title: 'Actualización de Cargo',
        //    text: 'Complete los campos obligatorios',
        //    type: 'info',
        //    delay: 3000,
        //    styling: 'bootstrap3',
        //    addclass: 'dark'
        //});
        return;
    }


    if (_uorg === '') {
        _uoPadre = null;
    }


    var Cargo = {
        intIdCargo: _codcargo,
        strCoCargo: _codigo,
        strDesCargo: _desc,
        intIdUniOrg: _uorg,
        strCargoCampo1: _camp1,
        strCargoCampo2: _camp2,
        strCargoCampo3: _camp3,
        strCargoCampo4: _camp4,
        strCargoCampo5: _camp5,
        bitFlActivo: _activo,
        bitFlPrincipal: _principal
    }

    $.post(
        '/Organizacion/InsertUpdateCargo',
        { Cargo: Cargo, intTipoOperacion: 2 },
        (response) => {
            console.log(response);
            if (response.type !== '') {

                if (response.type === 'success') {
                    messageResponseMix({ type: response.type, message: response.message }, titulo_)//añadido 04/08/2021
                    //new PNotify({
                    //    title: 'Actualización de Cargo',
                    //    text: response.message,
                    //    type: response.type,
                    //    delay: 3000,
                    //    styling: 'bootstrap3'
                    //});
                    TablaCargos();
                    $('.form-hide-cargo').hide();
                } else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Cargo';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        messageResponseMix({ type: response.type, message: response.message }, titulo_)//añadido 04/08/2021
                        //new PNotify({
                        //    title: 'Cargo',
                        //    text: response.message,
                        //    type: response.type,
                        //    delay: 3000,
                        //    styling: 'bootstrap3'
                        //});
                    }
                    return;
                }
            }
        }

    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

});
$('#btn-cancel-cargo').on('click', function () {
    validarSession()
    $('.form-hide-cargo').hide();
});

$('#filActiCargo').on('change', function () {
    validarSession()
    TablaCargos();
});
$('#cboDepenCargo').on('change', function () {
    validarSession()
    TablaCargos();
});
//$('#filtroCargo').keyup(function () {
//    validarSession()
//    TablaCargos();
//});
//añadido 04.08.2021
$('#filtroCargo').on('change', function () {
    validarSession()
    TablaCargos();
})

//#endregion MANT. CARGO





/**------------------------------------------------------ */
/**4. Categoría */
/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
//#region MANT. CATEGORIA
var _varTablaCategoria;
var ConfiAlvisoft = false;

function TablaCategoria() {
    var filtrosActivo = $('#filActiCate').val();
    var filtrojer = $('#cboDepenCate').val();
    var strfiltro = $('#filtroCate').val();
    validarSession()

    $.ajax({
        url: '/Organizacion/GetTablaFiltradaCategorias',
        type: 'POST',
        data: {
            IntActivoFilter: filtrosActivo, strfilter: strfiltro, intfiltrojer: filtrojer
        },
        beforeSend: function () {
            $.blockUI({
                css: {
                    border: 'none',
                    padding: '15px',
                    backgroundColor: '#000',
                    '-webkit-border-radius': '10px',
                    '-moz-border-radius': '10px',
                    opacity: .5,
                    color: '#fff'
                },
                message: 'Procesando...'
            });
        },
        success: function (response) {
            console.log(response)
            if (typeof _varTablaCategoria !== 'undefined') {
                _varTablaCategoria.destroy();
            }
            _varTablaCategoria = $('#tablaCategoria').DataTable({
                data: response,
                columns: [

                    { data: 'strCoCateg' },
                    { data: 'strDesCateg' },
                    { data: 'strNomJerOrg' },
                    { data: 'strDescripcion' },
                    { data: 'FlActivo.strEstadoActivo' },
                    { data: null },
                    { data: 'intIdCateg' },
                    { data: 'bitFlActivo' },
                    { data: 'strCateCampo1' },
                    { data: 'strCateCampo2' },
                    { data: 'strCateCampo3' },
                    { data: 'strCateCampo4' },
                    { data: 'strCateCampo5' },
                    { data: 'intIdUniOrg' },
                ],
                lengthMenu: [10, 25, 50],
                responsive: true,
                order: [],
                language: _datatableLanguaje,
                columnDefs: [//ocultar y definir columnas
                    {
                        targets: [6],//intIdCargo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [7],//bitFlActivo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [8],//strCargoCampo1
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [9],//strCargoCampo2
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [10],//strCargoCampo3
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [11],//strCargoCampo4
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [12],//strCargoCampo5
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [13],//intIdUniOrg
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [5],
                        data: null,
                        defaultContent: '<button class="btn btn-success btn-xs btn-edit" ><i class="fa fa-pencil"></i> Editar </button>' +
                            '<button class="btn btn-primary btn-xs btn-delete"><i class="fa fa-trash-o"></i> Eliminar </button>'
                    }
                ],
                dom: 'lBfrtip',
            });
        },
        complete: function () {
            $.unblockUI();
        }
    });
}
function cardarDatosCategoria(data) {

    $('#btn-update-categoria').show();
    $('#btn-save-change-categoria').hide();

    var objDatosCategoria = {
        intIdCateg: data['intIdCateg'],
        strCoCateg: data['strCoCateg'],
        strDesCateg: data['strDesCateg'],
        strNomJerOrg: data['strNomJerOrg'],
        strDescripcion: data['strDescripcion'],
        intIdUniOrg: data['intIdUniOrg'],

        strEstadoActivo: data['FlActivo']['strEstadoActivo'],
        bitFlActivo: data['FlActivo']['bitFlActivo'],

        strCateCampo1: data['strCateCampo1'],
        strCateCampo2: data['strCateCampo2'],
        strCateCampo3: data['strCateCampo3'],
        strCateCampo4: data['strCateCampo4'],
        strCateCampo5: data['strCateCampo5']


    }

    console.log(objDatosCategoria);

    $.post(
        '/Organizacion/EditarCategoria',
        { objCategoria: objDatosCategoria },
        (response) => {
            if (response !== '') {
                $('.form-hide-categoria .x_content').empty();
                $('.form-hide-categoria .x_content').html(response);
                $('.form-hide-categoria').show();
                switcheryLoad();
                init_checkBox_styles();
                //  onchange_jerarquia();
                $('#txt-cod-Categoria').val(objDatosCategoria.strCoCateg);
                $('#txt-desc-Categoria').val(objDatosCategoria.strDesCateg);
                $('#txtIdCate').val(objDatosCategoria.intIdCateg);

                if (objDatosCategoria.strEstadoActivo == 'Activo') {
                    $('#11').html('<label id="_lbl_">Activo</label> <input type = "checkbox" id = "chk-activo-Categoria" class= "js-switch" checked /><script>switcheryLoad();</script >');
                } else {
                    $('#11').html('<label id="_lbl_">Inactivo</label> <input type = "checkbox" id = "chk-activo-Categoria" class= "js-switch" unchecked /><script>switcheryLoad();</script >');
                }

                ////Bloque de Campos Adicionales

                $.post(
                    '/Organizacion/CamposAdicionales',
                    { strEntidad: 'TGCATEGORIA' },
                    (response) => {
                        ConfiAlvisoft = false;
                        console.log(response);
                        $('#containerCampos').empty();
                        response.forEach(element => {

                            $('#containerCamposea').append(
                                ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                                + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="' + element.strTitulo.replace("(*)", "") + '" maxlength="255"/>' + '</div></div>');

                            if (element.strNomCampo == 'strCategoriaCampo1') {
                                ConfiAlvisoft = true;
                            } else {
                                ConfiAlvisoft = false;
                            }
                        });

                        $('#strCategoriaCampo1').val(objDatosCategoria.strCateCampo1);
                        $('#strCategoriaCampo2').val(objDatosCategoria.strCateCampo2);
                        $('#strCategoriaCampo3').val(objDatosCategoria.strCateCampo3);
                        $('#strCategoriaCampo4').val(objDatosCategoria.strCateCampo4);
                        $('#strCategoriaCampo5').val(objDatosCategoria.strCateCampo5);
                    });


                //Bloque de llenados de CBO

                $("#cboJerarquia option").filter(function () {
                    return this.text == objDatosCategoria.strNomJerOrg;
                }).attr('selected', true);

                var id = $('#cboJerarquia option:selected').val();
                if (id == 0 || !id) {
                    $('#cbounidsupe').empty();
                    $('#cbounidsupe').attr('disabled', true);

                    return;
                }
                $.post(
                    '/Organizacion/getUnidxJerarquia',
                    { IntIdJerOrg: id },
                    (response) => {

                        if (true) {

                            response.forEach(element => {

                                $('#cbounidsupe').attr('disabled', false);
                                $('#cbounidsupe').append('<option value="' + element.intIdUniOrg + '" >' + element.strDescripcion + '</option>');
                                if (element.intIdUniOrg == objDatosCategoria.intIdUniOrg) {
                                    $("#cbounidsupe option").filter(function () {
                                        return this.text == objDatosCategoria.strDescripcion;
                                    }).attr('selected', true);
                                }


                            });

                        }
                    }
                ).fail(function (result) {
                    alert('ERROR ' + result.status + ' ' + result.statusText);
                });
                $('#cbounidsupe').empty();


                var txtcod = 'strCoCateg';
                var txtdes = 'strDesCateg';

                $.post(
                    '/Organizacion/ListarCaracteresMax',
                    { strMaestro: 'TGCATEGORIA' },
                    (response) => {
                        response.forEach(element => {
                            if (element.strColumnName == txtcod) {
                                $('.Valcod').children("input").attr('maxlength', element.intMaxLength);
                            }
                            if (element.strColumnName == txtdes) {
                                $('.Valdes').children("input").attr('maxlength', element.intMaxLength);
                            }
                        });
                    });


            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}
function CamposAdicionalesCategorias() {

    $.post(
        '/Organizacion/CamposAdicionales',
        { strEntidad: 'TGCATEGORIA' },
        (response) => {
            ConfiAlvisoft = false;
            console.log(response);
            $('#containerCamposea').empty();
            response.forEach(element => {

                $('#containerCamposea').append(
                    ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                    + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="' + element.strTitulo.replace("(*)", "") + '" maxlength="255"/>' + '</div></div>');

                if (element.strNomCampo == 'strCategoriaCampo1') {
                    ConfiAlvisoft = true;
                } else {
                    ConfiAlvisoft = false;
                }

            });
        });
}

function intentEliminarCategoria(idCategoria, strNomCategoria) {

    swal({
        title: "Eliminar Categoría",
        text: "¿Está seguro de eliminar la categoría    ''<strong>" + strNomCategoria + "</strong>''   ?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí, eliminar",
        cancelButtonText: "No, cancelar",
    }).then(function (isConfirm) {
        validarSession()
        if (isConfirm) {
            yesEliminaCategoria(idCategoria);
        } else {
            //swal("Cancelado", "La Operación fue cancelada", "error");
        }
    });
}
function yesEliminaCategoria(idCategoria) {

    $.post(
        '/Organizacion/EliminarCategoria',
        { intIdCategoria: idCategoria },
        (response) => {
            console.log(response);
            if (response.type !== '') {
                var tipo = 'Eliminado!';
                if (response.type === 'error')
                    tipo = 'NO SE PUEDE ELIMINAR EL REGISTRO';
                swal(tipo, response.message, response.type);

                if (response.type === 'success')
                    $('.form-hide-categoria').hide();
                TablaCategoria('', '', '');
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}


$('#tablaCategoria tbody').on('click', 'tr button.btn-delete', function () {
    validarSession()
    var data = _varTablaCategoria.row($(this).parents('tr')).data();

    if (data == null) {
        data = null;

        var data = _varTablaCategoria.row($(this).parents('li')).data();
        intentEliminarCategoria(data['intIdCateg'], data['strDesCateg']);

    } else {

        var data = _varTablaCategoria.row($(this).parents('tr')).data();
        intentEliminarCategoria(data['intIdCateg'], data['strDesCateg']);

    }


});
$('#tablaCategoria tbody').on('click', 'tr button.btn-edit', function () {
    validarSession()
    var data = _varTablaCategoria.row($(this).parents('tr')).data();
    if (data == null) {
        data = null;
        var data = _varTablaCategoria.row($(this).parents('li')).data();
        cardarDatosCategoria(data);
    } else {
        var data = _varTablaCategoria.row($(this).parents('tr')).data();
        cardarDatosCategoria(data);
    }
});
$('#btn-new-categoria').on('click', function () {
    validarSession()
    $('.form-hide-categoria').show();
    $('#btn-update-categoria').hide();
    $('#btn-save-change-categoria').show();
    $.post(
        '/Organizacion/NuevaCategoria',
        {},
        (response) => {
            if (response !== '') {
                $('.form-hide-categoria .x_content').empty();
                $('.form-hide-categoria .x_content').html(response);
                $('.form-hide-categoria').show();

                switcheryLoad();//checked verde
                CamposAdicionalesCategorias();

                var txtCod = 'strCoCateg';
                var txtdes = 'strDesCateg';

                $.post(
                    '/Organizacion/ListarCaracteresMax',
                    { strMaestro: 'TGCATEGORIA' },
                    (response) => {
                        response.forEach(element => {
                            if (element.strColumnName == txtCod) {
                                $('#ValCode').children("input").attr('maxlength', element.intMaxLength);
                            } if (element.strColumnName == txtdes) {
                                $('#Valdes').children("input").attr('maxlength', element.intMaxLength);
                            }
                        });
                    });
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
});
$('#btn-update-categoria').on('click', function () {
    validarSession()
    var titulo_ = 'Actualización de Categoría'

    var _uorg = $('#cbounidsupe option:selected').val();   //selected
    var _codigoCate = $('#txt-cod-Categoria').val();
    var _descCate = $('#txt-desc-Categoria').val();
    var _activo = $('#chk-activo-Categoria').is(':checked');
    var _camp1 = $('#strCategoriaCampo1').val();//alvisoft
    var _camp2 = $('#strCategoriaCampo2').val();
    var _camp3 = $('#strCategoriaCampo3').val();
    var _camp4 = $('#strCategoriaCampo4').val();
    var _camp5 = $('#strCategoriaCampo5').val();
    var _idcate = $('#txtIdCate').val();

    if (_codigoCate === '' || _descCate === '' || _uorg === '') {
        messageResponseMix({ type: 'info', message: 'Complete los campos obligatorios' }, titulo_)//añadido 04/08/2021
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }

    if (!$('#txt-cod-Categoria')[0].validity.valid) {
        messageResponseMix({ type: 'info', message: 'Ingrese solo números y letras sin espacios en blanco.' }, 'Codigo(*)')//añadido 04/08/2021
        return;
    }
    if (ConfiAlvisoft) {
        if (_camp1 === '' || _camp1 === null) {
            messageResponseMix({ type: 'info', message: 'Ingrese el Tipo de Exportación.' }, 'Tipo Exportación Alvisoft (*)')//añadido 04/08/2021
            return;
        }
    }

    if (_uorg === '') {
        _uorg = null;
    }

    var Categoria = {
        intIdCateg: _idcate,
        strCoCateg: _codigoCate,
        strDesCateg: _descCate,
        intIdUniOrg: _uorg,
        strCateCampo1: _camp1,
        strCateCampo2: _camp2,
        strCateCampo3: _camp3,
        strCateCampo4: _camp4,
        strCateCampo5: _camp5,
        bitFlActivo: _activo,
    }
    $.post(
        '/Organizacion/ActualizarCategoria',
        { objDatos: Categoria },
        (response) => {
            console.log(response);
            if (response.type !== '') {

                if (response.type === 'success') {
                    messageResponseMix({ type: response.type, message: response.message }, titulo_)//añadido 04/08/2021
                    TablaCategoria();
                    $('.form-hide-categoria').hide();
                }
                else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Categoría';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        messageResponseMix({ type: response.type, message: response.message }, titulo_)//añadido 04/08/2021
                    }
                    return;
                }
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

});
$('#btn-save-change-categoria').on('click', function () {
    validarSession()
    var titulo_ = 'Nueva Categoría'

    var _uorg = $('#cbounidsupe option:selected').val();   //selected
    var _codigo = $('#txt-cod-Categoria').val();
    var _desc = $('#txt-desc-Categoria').val();
    var _activo = $('#chk-activo-Categoria').is(':checked');
    var _camp1 = $('#strCategoriaCampo1').val(); //Campo obligatorio
    var _camp2 = $('#strCategoriaCampo2').val();
    var _camp3 = $('#strCategoriaCampo3').val();
    var _camp4 = $('#strCategoriaCampo4').val();
    var _camp5 = $('#strCategoriaCampo5').val();

    if (_codigo === '' || _desc === '' || _uorg === '') {
        messageResponseMix({ type: 'info', message: 'Complete los campos obligatorios' }, titulo_)//añadido 04/08/2021
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');

        return;
    }
    if (ConfiAlvisoft) {
        if (_camp1 === '' || _camp1 === null) {
            messageResponseMix({ type: 'info', message: 'Ingrese el Tipo de Exportación.' }, 'Tipo Exportación Alvisoft (*)')//añadido 04/08/2021
            return;
        }
    }
    if (_uorg === '') {
        _uorg = null;
    }

    var Categoria = {

        strCoCateg: _codigo,
        strDesCateg: _desc,
        intIdUniOrg: _uorg,
        strCateCampo1: _camp1,
        strCateCampo2: _camp2,
        strCateCampo3: _camp3,
        strCateCampo4: _camp4,
        strCateCampo5: _camp5,
        bitFlActivo: _activo,

    }

    $.post(
        '/Organizacion/RegistrarNuevaCategoria',
        { Categoria: Categoria },
        (response) => {
            console.log(response);
            if (response.type !== '') {

                if (response.type === 'success') {
                    messageResponseMix({ type: response.type, message: response.message }, titulo_)//añadido 04/08/2021
                    //new PNotify({
                    //    title: 'Nueva Categoría',
                    //    text: response.message,
                    //    type: response.type,
                    //    delay: 3000,
                    //    styling: 'bootstrap3'
                    //});
                    TablaCategoria();
                    $('.form-hide-categoria').hide();
                }
                else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Categoría';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        messageResponseMix({ type: response.type, message: response.message }, titulo_)//añadido 04/08/2021
                        //new PNotify({
                        //    title: 'Categoría',
                        //    text: response.message,
                        //    type: response.type,
                        //    delay: 3000,
                        //    styling: 'bootstrap3'
                        //});
                    }
                    return;
                }
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

});
$('#btn-cancel-categoria').on('click', function () {
    validarSession()
    $('.form-hide-categoria').hide();
});

$('#filActiCate').on('change', function () {
    validarSession()
    TablaCategoria();
});
$('#cboDepenCate').on('change', function () {
    validarSession()
    TablaCategoria();
});
//$('#filtroCate').keyup(function () {
//    validarSession()
//    TablaCategoria();
//});
//añadido 05.08.2021
$('#filtroCate').on('change', function () {
    validarSession()
    TablaCategoria();
})

//#endregion MANT. CATEGORIA





/**---------------------------------------------- */
/**5. Tipo Personal */
/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
//#region MANT. TIPO DE PERSONAL
var _varTablaTipoPersonal;

function TablaTipoPersonal() {
    var filtrosActivo = $('#filActiTipoPer').val();
    var filtrojer = $('#cboDepenTipoPer').val();
    var strfiltro = $('#filtroTipoPer').val();
    validarSession()
    $.ajax({
        url: '/Organizacion/getTablaFiltradaTipoPerson',
        type: 'POST',
        data: {
            IntActivoFilter: filtrosActivo, strfilter: strfiltro, intfiltrojer: filtrojer
        },
        beforeSend: function () {
            $.blockUI({
                css: {
                    border: 'none',
                    padding: '15px',
                    backgroundColor: '#000',
                    '-webkit-border-radius': '10px',
                    '-moz-border-radius': '10px',
                    opacity: .5,
                    color: '#fff'
                },
                message: 'Procesando...'
            });
        },
        success: function (response) {

            if (typeof _varTablaTipoPersonal !== 'undefined') {
                _varTablaTipoPersonal.destroy();
            }
            _varTablaTipoPersonal = $('#tablaTipoPersonal').DataTable({
                data: response,
                columns: [

                    { data: 'strCoTiPers' },
                    { data: 'strDesTiPers' },
                    { data: 'strNomJerOrg' },
                    { data: 'strDescripcion' },
                    { data: 'FlActivo.strEstadoActivo' },
                    { data: null },
                    { data: 'IntIdTiPers' },
                    { data: 'bitFlActivo' },
                    { data: 'strTiPersCampo1' },
                    { data: 'strTiPersCampo2' },
                    { data: 'strTiPersCampo3' },
                    { data: 'strTiPersCampo4' },
                    { data: 'strTiPersCampo5' },
                    { data: 'IntIdUniOrg' },
                ],
                lengthMenu: [10, 25, 50],
                responsive: true,
                order: [],
                language: _datatableLanguaje,
                columnDefs: [//ocultar y definir columnas
                    {
                        targets: [6],//intIdCargo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [7],//bitFlActivo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [8],//strCargoCampo1
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [9],//strCargoCampo2
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [10],//strCargoCampo3
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [11],//strCargoCampo4
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [12],//strCargoCampo5
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [13],//intIdUniOrg
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [5],
                        data: null,
                        defaultContent: '<button class="btn btn-success btn-xs btn-edit" ><i class="fa fa-pencil"></i> Editar </button>' +
                            '<button class="btn btn-primary btn-xs btn-delete"><i class="fa fa-trash-o"></i> Eliminar </button>'
                    }
                ],
                dom: 'lBfrtip',
            });
        },
        complete: function () {
            $.unblockUI();
        }
    });
}

function CamposAdicionalesTipoPersonal() {
    validarSession()
    $.post(
        '/Organizacion/CamposAdicionales',
        { strEntidad: 'TGTIPOPERSON' },
        (response) => {

            console.log(response);
            $('#containerCamposea').empty();
            response.forEach(element => {
                //alert(element.strTitulo);

                $('#containerCamposea').append(
                    ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                    + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="' + element.strTitulo.replace("(*)", "") + '" maxlength="255"/>' + '</div></div>');


            });
        });
}
function cardarDatosTipoper(data) {
    $('#btn-update-tipoPerso').show();
    $('#btn-save-change-tipoPerso').hide();

    var objDatosTipoPer = {
        IntIdTiPers: data['IntIdTiPers'],
        strCoTiPers: data['strCoTiPers'],
        strDesTiPers: data['strDesTiPers'],
        strNomJerOrg: data['strNomJerOrg'],
        strDescripcion: data['strDescripcion'],
        intIdUniOrg: data['IntIdUniOrg'],

        strEstadoActivo: data['FlActivo']['strEstadoActivo'],
        bitFlActivo: data['FlActivo']['bitFlActivo'],

        strTiPersCampo1: data['strTiPersCampo1'],
        strTiPersCampo2: data['strTiPersCampo2'],
        strTiPersCampo3: data['strTiPersCampo3'],
        strTiPersCampo4: data['strTiPersCampo4'],
        strTiPersCampo5: data['strTiPersCampo5']


    }


    $.post(
        '/Organizacion/EditarTipoPerso',
        { ObjTipoper: objDatosTipoPer },
        (response) => {
            if (response !== '') {
                $('.form-hide-tipoPerso .x_content').empty();
                $('.form-hide-tipoPerso .x_content').html(response);
                $('.form-hide-tipoPerso').show();
                switcheryLoad();
                init_checkBox_styles();
                //  onchange_jerarquia();
                $('#txt-cod-TiPers').val(objDatosTipoPer.strCoTiPers);
                $('#txt-desc-TiPers').val(objDatosTipoPer.strDesTiPers);
                $('#txtIdTipPers').val(objDatosTipoPer.IntIdTiPers);

                if (objDatosTipoPer.strEstadoActivo == 'Activo') {
                    $('#11').html('<label id="_lbl_">Activo</label> <input type = "checkbox" id = "chk-activo-TiPers" class= "js-switch" checked /><script>switcheryLoad();</script >');
                } else {
                    $('#11').html('<label id="_lbl_">Inactivo</label> <input type = "checkbox" id = "chk-activo-TiPers" class= "js-switch" unchecked /><script>switcheryLoad();</script >');
                }

                ////Bloque de Campos Adicionales

                $.post(
                    '/Organizacion/CamposAdicionales',
                    { strEntidad: 'TGTIPOPERSON' },
                    (response) => {

                        console.log(response);
                        $('#containerCamposea').empty();
                        response.forEach(element => {
                            //alert(element.strTitulo);

                            $('#containerCamposea').append(
                                ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                                + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="' + element.strTitulo.replace("(*)", "") + '" maxlength="255"/>' + '</div></div>');


                        });

                        $('#strTiPersCampo1').val(objDatosTipoPer.strTiPersCampo1);
                        $('#strTiPersCampo2').val(objDatosTipoPer.strTiPersCampo2);
                        $('#strTiPersCampo3').val(objDatosTipoPer.strTiPersCampo3);
                        $('#strTiPersCampo4').val(objDatosTipoPer.strTiPersCampo4);
                        $('#strTiPersCampo5').val(objDatosTipoPer.strTiPersCampo5);
                    });


                //Bloque de llenados de CBO

                $("#cboJerarquia option").filter(function () {
                    return this.text == objDatosTipoPer.strNomJerOrg;
                }).attr('selected', true);

                var id = $('#cboJerarquia option:selected').val();
                if (id == 0 || !id) {
                    $('#cbounidsupe').empty();
                    $('#cbounidsupe').attr('disabled', true);

                    return;
                }
                $.post(
                    '/Organizacion/getUnidxJerarquia',
                    { IntIdJerOrg: id },
                    (response) => {

                        if (true) {

                            response.forEach(element => {

                                $('#cbounidsupe').attr('disabled', false);
                                $('#cbounidsupe').append('<option value="' + element.intIdUniOrg + '" >' + element.strDescripcion + '</option>');
                                if (element.intIdUniOrg == objDatosTipoPer.intIdUniOrg) {
                                    $("#cbounidsupe option").filter(function () {
                                        return this.text == objDatosTipoPer.strDescripcion;
                                    }).attr('selected', true);
                                }


                            });

                        }
                    }
                ).fail(function (result) {
                    alert('ERROR ' + result.status + ' ' + result.statusText);
                });
                $('#cbounidsupe').empty();


                var txtcod = 'strCoTiPers';
                var txtdes = 'strDesTiPers';

                $.post(
                    '/Organizacion/ListarCaracteresMax',
                    { strMaestro: 'TGTIPOPERSON' },
                    (response) => {
                        response.forEach(element => {
                            if (element.strColumnName == txtcod) {
                                $('.Valcod').children("input").attr('maxlength', element.intMaxLength);
                            }
                            if (element.strColumnName == txtdes) {
                                $('.Valdes').children("input").attr('maxlength', element.intMaxLength);
                            }
                        });
                    });


            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}
function intentEliminarTipoPersonal(idTipoPerson, strNomPerson) {
    swal({
        title: "Eliminar Tipo de Personal",
        text: "¿Está seguro de eliminar el Tipo de Personal   ''<strong>" + strNomPerson + "</strong>''   ?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí, eliminar",
        cancelButtonText: "No, cancelar",
    }).then(function (isConfirm) {
        validarSession()
        if (isConfirm) {
            yesEliminaTipoPerson(idTipoPerson);
        } else {
            //swal("Cancelado", "La Operación fue cancelada", "error");
        }
    });
}
function yesEliminaTipoPerson(idTipoPerson) {

    $.post(
        '/Organizacion/EliminarTipoPerson',
        { intIdTipo: idTipoPerson },
        (response) => {
            console.log(response);
            if (response.type !== '') {
                var tipo = 'Eliminado!';
                if (response.type === 'error')
                    tipo = 'NO SE PUEDE ELIMINAR EL REGISTRO';
                swal(tipo, response.message, response.type);

                if (response.type === 'success')
                    $('.form-hide-tipoPerso').hide();
                TablaTipoPersonal('', '', '');
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}

$('#tablaTipoPersonal tbody').on('click', 'tr button.btn-edit', function () {
    validarSession()
    var data = _varTablaTipoPersonal.row($(this).parents('tr')).data();
    if (data == null) {
        data = null;
        var data = _varTablaTipoPersonal.row($(this).parents('li')).data();
        cardarDatosTipoper(data);
    } else {
        var data = _varTablaTipoPersonal.row($(this).parents('tr')).data();
        cardarDatosTipoper(data);
    }
});
$('#tablaTipoPersonal tbody').on('click', 'tr button.btn-delete', function () {
    validarSession()
    var data = _varTablaTipoPersonal.row($(this).parents('tr')).data();

    if (data == null) {
        data = null;

        var data = _varTablaTipoPersonal.row($(this).parents('li')).data();
        intentEliminarTipoPersonal(data['IntIdTiPers'], data['strDesTiPers']);

    } else {

        var data = _varTablaTipoPersonal.row($(this).parents('tr')).data();
        intentEliminarTipoPersonal(data['IntIdTiPers'], data['strDesTiPers']);

    }


});
$('#btn-new-tipoPerso').on('click', function () {
    validarSession()
    $('.form-hide-tipoPerso').show();
    $('#btn-update-tipoPerso').hide();
    $('#btn-save-change-tipoPerso').show();
    $.post(
        '/Organizacion/NuevoTipoPersonal',
        {},
        (response) => {
            if (response !== '') {
                $('.form-hide-tipoPerso .x_content').empty();
                $('.form-hide-tipoPerso .x_content').html(response);
                $('.form-hide-tipoPerso').show();
                BuscarUnidades();
                switcheryLoad();//checked verde

                //MaxCaracteres
                var txtCod = 'strCoTiPers';
                var txtdes = 'strDesTiPers';

                $.post(
                    '/Organizacion/ListarCaracteresMax',
                    { strMaestro: 'TGTIPOPERSON' },
                    (response) => {
                        response.forEach(element => {

                            if (element.strColumnName == txtCod) {

                                $('#ValCode').children("input").attr('maxlength', element.intMaxLength);
                            } if (element.strColumnName == txtdes) {
                                $('#Valdes').children("input").attr('maxlength', element.intMaxLength);

                            }
                        });
                    });


            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
});
$('#btn-save-change-tipoPerso').on('click', function () {
    validarSession()
    var titulo_ = 'Actualización de Tipo de Personal'

    var _uorg = $('#cbounidsupe option:selected').val();   //selected
    var _codigo = $('#txt-cod-TiPers').val();
    var _desc = $('#txt-desc-TiPers').val();
    var _activo = $('#chk-activo-TiPers').is(':checked');
    var _camp1 = $('#strTiPersCampo1').val();
    var _camp2 = $('#strTiPersCampo2').val();
    var _camp3 = $('#strTiPersCampo3').val();
    var _camp4 = $('#strTiPersCampo4').val();
    var _camp5 = $('#strTiPersCampo5').val();

    if (_codigo === '' || _desc === '' || _uorg === '') {
        messageResponseMix({ type: 'info', message: 'Complete los campos obligatorios' }, titulo_)//añadido 04/08/2021
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }

    if (!$('#txt-cod-TiPers')[0].validity.valid) {
        messageResponseMix({ type: 'info', message: 'Ingrese solo números y letras sin espacios en blanco.' }, 'Codigo(*)')//añadido 04/08/2021
        return;
    }


    if (_uorg === '') {
        _uorg = null;
    }

    var tipoPerson = {
        strCoTiPers: _codigo,
        strDesTiPers: _desc,
        intIdUniOrg: _uorg,
        strTiPersCampo1: _camp1,
        strTiPersCampo2: _camp2,
        strTiPersCampo3: _camp3,
        strTiPersCampo4: _camp4,
        strTiPersCampo5: _camp5,
        bitFlActivo: _activo,
    }

    $.post(
        '/Organizacion/RegistrarNuevoTipoPerson',
        { tipoPerson: tipoPerson },
        (response) => {
            console.log(response);
            if (response.type !== '') {

                if (response.type === 'success') {
                    messageResponseMix({ type: response.type, message: response.message }, titulo_)//añadido 04/08/2021
                    TablaTipoPersonal();
                    $('.form-hide-tipoPerso').hide();
                    return;
                }
                else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Tipo Personal';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        messageResponseMix({ type: response.type, message: response.message }, titulo_)//añadido 04/08/2021
                    }
                    return;
                }
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

});
$('#btn-update-tipoPerso').on('click', function () {
    validarSession()
    var titulo_ = 'Nuevo de Tipo de Personal'

    var _uorg = $('#cbounidsupe option:selected').val();   //selected
    var _codigo = $('#txt-cod-TiPers').val();
    var _desc = $('#txt-desc-TiPers').val();
    var _activo = $('#chk-activo-TiPers').is(':checked');
    var _camp1 = $('#strTiPersCampo1').val();
    var _camp2 = $('#strTiPersCampo2').val();
    var _camp3 = $('#strTiPersCampo3').val();
    var _camp4 = $('#strTiPersCampo4').val();
    var _camp5 = $('#strTiPersCampo5').val();
    var _idcate = $('#txtIdTipPers').val();

    if (_codigo === '' || _desc === '' || _uorg === '') {
        messageResponseMix({ type: 'info', message: 'Complete los campos obligatorios' }, titulo_)//añadido 04/08/2021
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }

    if (!$('#txt-cod-TiPers')[0].validity.valid) {
        messageResponseMix({ type: 'info', message: 'Ingrese solo números y letras sin espacios en blanco.' }, 'Codigo(*)')//añadido 04/08/2021
        return;
    }


    if (_uorg === '') {
        _uorg = null;
    }

    var tipoPerson = {
        IntIdTiPers: _idcate,
        strCoTiPers: _codigo,
        strDesTiPers: _desc,
        intIdUniOrg: _uorg,
        strTiPersCampo1: _camp1,
        strTiPersCampo2: _camp2,
        strTiPersCampo3: _camp3,
        strTiPersCampo4: _camp4,
        strTiPersCampo5: _camp5,
        bitFlActivo: _activo,

    }
    $.post(
        '/Organizacion/ActualizarTipoPerso',
        { objDatos: tipoPerson },
        (response) => {
            console.log(response);
            if (response.type !== '') {

                if (response.type === 'success') {
                    messageResponseMix({ type: response.type, message: response.message }, titulo_)//añadido 04/08/2021
                    TablaTipoPersonal();
                    $('.form-hide-tipoPerso').hide();
                } else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Tipo Personal';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        messageResponseMix({ type: response.type, message: response.message }, titulo_)//añadido 04/08/2021
                        //new PNotify({
                        //    title: 'Tipo Personal',
                        //    text: response.message,
                        //    type: response.type,
                        //    delay: 3000,
                        //    styling: 'bootstrap3'
                        //});
                    }
                    return;
                }
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
});
$('#btn-cancel-tipoPerso').on('click', function () {
    validarSession()
    $('.form-hide-tipoPerso').hide();
});

$('#filActiTipoPer').on('change', function () {
    validarSession()
    TablaTipoPersonal();
});
$('#cboDepenTipoPer').on('change', function () {
    validarSession()
    TablaTipoPersonal();
});
//$('#filtroTipoPer').keyup(function () {
//    validarSession()
//    TablaTipoPersonal();
//});
//añadido 05.08.2021
$('#filtroTipoPer').on('change', function () {
    validarSession()
    TablaTipoPersonal();
})

//#endregion MANT. TIPO DE PERSONAL





/**------------------------------------------------------ */
/**6. Grupo */
/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
//#region MANT. GRUPO
var _varTablaGrupo;

function TablaGrupo() {

    var filtrosActivo = $('#filActiGrupo').val();
    var filtrojer = $('#cboDepenGrupo').val();
    var strfiltro = $('#filtroGrupo').val();

    $.ajax({
        url: '/Organizacion/GetTablaFiltradaGrupo',
        type: 'POST',
        data: {
            IntActivoFilter: filtrosActivo, strfilter: strfiltro, intfiltrojer: filtrojer
        },
        beforeSend: function () {
            $.blockUI({
                css: {
                    border: 'none',
                    padding: '15px',
                    backgroundColor: '#000',
                    '-webkit-border-radius': '10px',
                    '-moz-border-radius': '10px',
                    opacity: .5,
                    color: '#fff'
                },
                message: 'Procesando...'
            });
        },
        success: function (response) {


            if (typeof _varTablaGrupo !== 'undefined') {
                _varTablaGrupo.destroy();
            }

            _varTablaGrupo = $('#tablaGrupo').DataTable({
                data: response,
                columns: [

                    { data: 'strCoGrupo' },
                    { data: 'strDesGrupo' },
                    { data: 'strNomJerOrg' },
                    { data: 'strDescripcion' },
                    { data: 'FlActivo.strEstadoActivo' },
                    { data: null },
                    { data: 'intIdGrupo' },
                    { data: 'bitFlActivo' },
                    { data: 'strGrupoCampo1' },
                    { data: 'strGrupoCampo2' },
                    { data: 'strGrupoCampo3' },
                    { data: 'strGrupoCampo4' },
                    { data: 'strGrupoCampo5' },
                    { data: 'intIdUniOrg' },
                ],
                lengthMenu: [10, 25, 50],
                responsive: true,
                order: [],
                language: _datatableLanguaje,
                columnDefs: [//ocultar y definir columnas
                    {
                        targets: [6],//intIdCargo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [7],//bitFlActivo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [8],//strCargoCampo1
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [9],//strCargoCampo2
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [10],//strCargoCampo3
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [11],//strCargoCampo4
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [12],//strCargoCampo5
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [13],//intIdUniOrg
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [5],
                        data: null,
                        defaultContent: '<button class="btn btn-success btn-xs btn-edit" ><i class="fa fa-pencil"></i> Editar </button>' +
                            '<button class="btn btn-primary btn-xs btn-delete"><i class="fa fa-trash-o"></i> Eliminar </button>'
                    }
                ],
                dom: 'lBfrtip',
            });
        },
        complete: function () {
            $.unblockUI();
        }
    });
}
function intentEliminarGrupo(idGrupo, strNomGrupo) {

    swal({
        title: "Eliminar Grupo",
        text: "¿Está seguro de eliminar el Grupo   ''<strong>" + strNomGrupo + "</strong>''   ?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí, eliminar",
        cancelButtonText: "No, cancelar",
    }).then(function (isConfirm) {
        validarSession()
        if (isConfirm) {
            yesEliminaGrupo(idGrupo);
        } else {
            //swal("Cancelado", "La Operación fue cancelada", "error");
        }
    });
}
function yesEliminaGrupo(idGrupo) {

    $.post(
        '/Organizacion/EliminarGrupo',
        { intIdGrupo: idGrupo },
        (response) => {
            console.log(response);
            if (response.type !== '') {
                var tipo = 'Eliminado!';
                if (response.type === 'error')
                    tipo = 'NO SE PUEDE ELIMINAR EL REGISTRO';
                swal(tipo, response.message, response.type);

                if (response.type === 'success')
                    $('.form-hide-grupo').hide();
                TablaGrupo('', '', '');
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}
function cardarDatosGrupo(data) {

    $('#btn-update-grupo').show();
    $('#btn-save-change-grupo').hide();

    var objDatosGrupo = {
        intIdGrupo: data['intIdGrupo'],
        strCoGrupo: data['strCoGrupo'],
        strDesGrupo: data['strDesGrupo'],
        strNomJerOrg: data['strNomJerOrg'],
        strDescripcion: data['strDescripcion'],
        intIdUniOrg: data['intIdUniOrg'],
        strEstadoActivo: data['FlActivo']['strEstadoActivo'],
        bitFlActivo: data['FlActivo']['bitFlActivo'],
        strGrupoCampo1: data['strGrupoCampo1'],
        strGrupoCampo2: data['strGrupoCampo2'],
        strGrupoCampo3: data['strGrupoCampo3'],
        strGrupoCampo4: data['strGrupoCampo4'],
        strGrupoCampo5: data['strGrupoCampo5']
    }


    $.post(
        '/Organizacion/EditarGrupo',
        { ObjGrupo: objDatosGrupo },
        (response) => {
            if (response !== '') {
                $('.form-hide-grupo .x_content').empty();
                $('.form-hide-grupo .x_content').html(response);
                $('.form-hide-grupo').show();
                switcheryLoad();
                init_checkBox_styles();
                //  onchange_jerarquia();
                $('#txt-cod-Grupo').val(objDatosGrupo.strCoGrupo);
                $('#txt-desc-Grupo').val(objDatosGrupo.strDesGrupo);
                $('#txtIdGroup').val(objDatosGrupo.intIdGrupo);

                if (objDatosGrupo.strEstadoActivo == 'Activo') {
                    $('#11').html('<label id="_lbl_">Activo</label> <input type = "checkbox" id = "chk-activo-Grupo" class= "js-switch" checked /><script>switcheryLoad();</script >');
                } else {
                    $('#11').html('<label id="_lbl_">Inactivo</label> <input type = "checkbox" id = "chk-activo-Grupo" class= "js-switch" unchecked /><script>switcheryLoad();</script >');
                }

                ////Bloque de Campos Adicionales

                $.post(
                    '/Organizacion/CamposAdicionales',
                    { strEntidad: 'TGGRUPO' },
                    (response) => {

                        console.log(response);
                        $('#containerCampose').empty();
                        response.forEach(element => {
                            //alert(element.strTitulo);

                            $('#containerCampose').append(
                                ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                                + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="' + element.strTitulo.replace("(*)", "") + '" maxlength="255"/>' + '</div></div>');


                        });

                        $('#strGrupoCampo1').val(objDatosGrupo.strGrupoCampo1);
                        $('#strGrupoCampo2').val(objDatosGrupo.strGrupoCampo2);
                        $('#strGrupoCampo3').val(objDatosGrupo.strGrupoCampo3);
                        $('#strGrupoCampo4').val(objDatosGrupo.strGrupoCampo4);
                        $('#strGrupoCampo5').val(objDatosGrupo.strGrupoCampo5);
                    });


                //Bloque de llenados de CBO

                $("#cboJerarquia option").filter(function () {
                    return this.text == objDatosGrupo.strNomJerOrg;
                }).attr('selected', true);

                var id = $('#cboJerarquia option:selected').val();
                if (id == 0 || !id) {
                    $('#cbounidsupe').empty();
                    $('#cbounidsupe').attr('disabled', true);

                    return;
                }
                $.post(
                    '/Organizacion/getUnidxJerarquia',
                    { IntIdJerOrg: id },
                    (response) => {

                        if (true) {

                            response.forEach(element => {

                                $('#cbounidsupe').attr('disabled', false);
                                $('#cbounidsupe').append('<option value="' + element.intIdUniOrg + '" >' + element.strDescripcion + '</option>');
                                if (element.intIdUniOrg == objDatosGrupo.intIdUniOrg) {
                                    $("#cbounidsupe option").filter(function () {
                                        return this.text == objDatosGrupo.strDescripcion;
                                    }).attr('selected', true);
                                }


                            });

                        }
                    }
                ).fail(function (result) {
                    alert('ERROR ' + result.status + ' ' + result.statusText);
                });
                $('#cbounidsupe').empty();

                var txtcod = 'strCoGrupo';
                var txtdes = 'strDesGrupo';

                $.post(
                    '/Organizacion/ListarCaracteresMax',
                    { strMaestro: 'TGGRUPO' },
                    (response) => {
                        response.forEach(element => {
                            if (element.strColumnName == txtcod) {
                                $('.Valcod').children("input").attr('maxlength', element.intMaxLength);
                            }
                            if (element.strColumnName == txtdes) {
                                $('.Valdes').children("input").attr('maxlength', element.intMaxLength);
                            }
                        });
                    });

            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}
function CamposAdicionalesGrupo() {

    $.post(
        '/Organizacion/CamposAdicionales',
        { strEntidad: 'TGGRUPO' },
        (response) => {

            console.log(response);
            $('#containerCampose').empty();
            response.forEach(element => {

                $('#containerCampose').append(
                    ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                    + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="' + element.strTitulo.replace("(*)", "") + '" maxlength="255"/>' + '</div></div>');


            });
        });
}

$('#tablaGrupo tbody').on('click', 'tr button.btn-edit', function () {
    validarSession()
    var data = _varTablaGrupo.row($(this).parents('tr')).data();
    if (data == null) {

        var data = _varTablaGrupo.row($(this).parents('li')).data();
        cardarDatosGrupo(data);
    } else {

        var data = _varTablaGrupo.row($(this).parents('tr')).data();
        cardarDatosGrupo(data);
    }
});
$('#tablaGrupo tbody').on('click', 'tr button.btn-delete', function () {
    validarSession()
    var data = _varTablaGrupo.row($(this).parents('tr')).data();

    if (data == null) {

        var data = _varTablaGrupo.row($(this).parents('li')).data();
        intentEliminarGrupo(data['intIdGrupo'], data['strDesGrupo']);

    } else {

        var data = _varTablaGrupo.row($(this).parents('tr')).data();
        intentEliminarGrupo(data['intIdGrupo'], data['strDesGrupo']);

    }
});
$('#btn-save-change-grupo').on('click', function () {
    validarSession()
    var titulo_ = 'Nuevo Grupo'

    var _uorg = $('#cbounidsupe option:selected').val();   //selected
    var _codigo = $('#txt-cod-Grupo').val();
    var _desc = $('#txt-desc-Grupo').val();
    var _activo = $('#chk-activo-Grupo').is(':checked');
    var _camp1 = $('#strGrupoCampo1').val();
    var _camp2 = $('#strGrupoCampo2').val();
    var _camp3 = $('#strGrupoCampo3').val();
    var _camp4 = $('#strGrupoCampo4').val();
    var _camp5 = $('#strGrupoCampo5').val();

    if (_codigo === '' || _desc === '' || _uorg === '') {
        messageResponseMix({ type: 'info', message: 'Complete los campos obligatorios' }, titulo_)//añadido 04/08/2021
        //new PNotify({
        //    title: 'Nuevo Grupo',
        //    text: 'Complete los campos obligatorios',
        //    type: 'info',
        //    delay: 3000,
        //    styling: 'bootstrap3',
        //    addclass: 'dark'
        //});
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');

        return;
    }

    if (!$('#txt-cod-Grupo')[0].validity.valid) {
        messageResponseMix({ type: 'info', message: 'Ingrese solo números y letras sin espacios en blanco.' }, 'Codigo(*)')//añadido 04/08/2021
        //new PNotify({
        //    title: 'Codigo(*)',
        //    text: 'Ingrese solo números y letras sin espacios en blanco.',
        //    type: 'info',
        //    delay: 3000,
        //    styling: 'bootstrap3',
        //    addclass: 'dark'
        //});
        return;
    }

    if (_uorg === '') {
        _uorg = null;
    }
    var Grupo = {

        strCoGrupo: _codigo,
        strDesGrupo: _desc,
        intIdUniOrg: _uorg,
        strGrupoCampo1: _camp1,
        strGrupoCampo2: _camp2,
        strGrupoCampo3: _camp3,
        strGrupoCampo4: _camp4,
        strGrupoCampo5: _camp5,
        bitFlActivo: _activo,

    }
    $.post(
        '/Organizacion/RegistrarNuevoGrupo',
        { Grupo: Grupo },
        (response) => {
            console.log(response);
            if (response.type !== '') {

                if (response.type === 'success') {
                    messageResponseMix({ type: response.type, message: response.message }, titulo_)//añadido 04/08/2021
                    //new PNotify({
                    //    title: 'Nuevo Grupo',
                    //    text: response.message,
                    //    type: response.type,
                    //    delay: 3000,
                    //    styling: 'bootstrap3'
                    //});
                    TablaGrupo();
                    $('.form-hide-grupo').hide();
                } else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Grupo';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        messageResponseMix({ type: response.type, message: response.message }, titulo_)//añadido 04/08/2021
                        //new PNotify({
                        //    title: 'Grupo',
                        //    text: response.message,
                        //    type: response.type,
                        //    delay: 3000,
                        //    styling: 'bootstrap3'
                        //});
                    }
                    return;
                }

            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

});
$('#btn-update-grupo').on('click', function () {
    validarSession()
    var titulo_ = 'Actualización de Grupo'

    var _uorg = $('#cbounidsupe option:selected').val();   //selected
    var _codigo = $('#txt-cod-Grupo').val();
    var _desc = $('#txt-desc-Grupo').val();
    var _activo = $('#chk-activo-Grupo').is(':checked');
    var _camp1 = $('#strGrupoCampo1').val();
    var _camp2 = $('#strGrupoCampo2').val();
    var _camp3 = $('#strGrupoCampo3').val();
    var _camp4 = $('#strGrupoCampo4').val();
    var _camp5 = $('#strGrupoCampo5').val();
    var _idcate = $('#txtIdGroup').val();

    if (_codigo === '' || _desc === '' || _uorg === '') {
        messageResponseMix({ type: 'info', message: 'Complete los campos obligatorios' }, titulo_)//añadido 04/08/2021
        //new PNotify({
        //    title: 'Actualización de Grupo',
        //    text: 'Complete los campos obligatorios',
        //    type: 'info',
        //    delay: 3000,
        //    styling: 'bootstrap3',
        //    addclass: 'dark'
        //});
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');

        return;
    }

    if (!$('#txt-cod-Grupo')[0].validity.valid) {
        messageResponseMix({ type: 'info', message: 'Ingrese solo números y letras sin espacios en blanco.' }, 'Codigo(*)')//añadido 04/08/2021
        //new PNotify({
        //    title: 'Codigo(*)',
        //    text: 'Ingrese solo números y letras sin espacios en blanco.',
        //    type: 'info',
        //    delay: 3000,
        //    styling: 'bootstrap3',
        //    addclass: 'dark'
        //});
        return;
    }

    if (_uorg === '') {
        _uorg = null;
    }
    var Grupo = {
        intIdGrupo: _idcate,
        strCoGrupo: _codigo,
        strDesGrupo: _desc,
        intIdUniOrg: _uorg,
        strGrupoCampo1: _camp1,
        strGrupoCampo2: _camp2,
        strGrupoCampo3: _camp3,
        strGrupoCampo4: _camp4,
        strGrupoCampo5: _camp5,
        bitFlActivo: _activo,

    }
    $.post(
        '/Organizacion/ActualizarGrupo',
        { objDatos: Grupo },
        (response) => {
            console.log(response);
            if (response.type !== '') {

                if (response.type === 'success') {
                    messageResponseMix({ type: response.type, message: response.message }, titulo_)//añadido 04/08/2021
                    //new PNotify({
                    //    title: 'Actualización de Grupo',
                    //    text: response.message,
                    //    type: response.type,
                    //    delay: 3000,
                    //    styling: 'bootstrap3'
                    //});
                    TablaGrupo();
                    $('.form-hide-grupo').hide();

                }
                else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Grupo';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        messageResponseMix({ type: response.type, message: response.message }, titulo_)//añadido 04/08/2021
                        //new PNotify({
                        //    title: 'Grupo',
                        //    text: response.message,
                        //    type: response.type,
                        //    delay: 3000,
                        //    styling: 'bootstrap3'
                        //});
                    }
                    return;

                }
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });


});
$('#btn-cancel-grupo').on('click', function () {
    validarSession()
    $('.form-hide-grupo').hide();
});

$('#filActiGrupo').on('change', function () {
    validarSession()
    TablaGrupo();
});
$('#cboDepenGrupo').on('change', function () {
    validarSession()
    TablaGrupo();
});
$('#btn-new-grupo').on('click', function () {
    validarSession()
    $('.form-hide-grupo').show();
    $('#btn-update-grupo').hide();
    $('#btn-save-change-grupo').show();
    $.post(
        '/Organizacion/NuevoGrupo',
        {},
        (response) => {
            if (response !== '') {
                $('.form-hide-grupo .x_content').empty();
                $('.form-hide-grupo .x_content').html(response);
                $('.form-hide-grupo').show();

                switcheryLoad();//checked verde

                //MaxCaracteres
                var txtCod = 'strCoGrupo';
                var txtdes = 'strDesGrupo';

                $.post(
                    '/Organizacion/ListarCaracteresMax',
                    { strMaestro: 'TGGRUPO' },
                    (response) => {
                        response.forEach(element => {

                            if (element.strColumnName == txtCod) {

                                $('#ValCode').children("input").attr('maxlength', element.intMaxLength);
                            } if (element.strColumnName == txtdes) {
                                $('#Valdes').children("input").attr('maxlength', element.intMaxLength);

                            }
                        });
                    });


            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
});
//$('#filtroGrupo').keyup(function () {
//    validarSession()
//    TablaGrupo();
//});
$('#filtroGrupo').on('change', function () {
    validarSession()
    TablaGrupo();
})
//#endregion MANT. GRUPO





/**------------------------------------------------------ */
/**7. Planilla */
/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
//#region MANT. PLANILLA
var _varTablaPlanilla;

function TablaPlanilla() {
    var filtrosActivo = $('#filActiPlanilla').val();
    var filtrojer = $('#cboDepenPlanilla').val();
    var strfiltro = $('#filtroPlanilla').val();

    $.ajax({
        url: '/Organizacion/getTablaPlanilla',
        type: 'POST',
        data: {
            IntActivoFilter: filtrosActivo, strfilter: strfiltro, intfiltrojer: filtrojer
        },
        beforeSend: function () {
            $.blockUI({
                css: {
                    border: 'none',
                    padding: '15px',
                    backgroundColor: '#000',
                    '-webkit-border-radius': '10px',
                    '-moz-border-radius': '10px',
                    opacity: .5,
                    color: '#fff'
                },
                message: 'Procesando...'
            });
        },
        success: function (response) {

            if (typeof _varTablaPlanilla !== 'undefined') {
                _varTablaPlanilla.destroy();
            }

            _varTablaPlanilla = $('#tablaPlanilla').DataTable({
                data: response,
                columns: [

                    { data: 'strCoPlani' },
                    { data: 'strDesPlani' },
                    { data: 'strNomJerOrg' },
                    { data: 'strDescripcion' },
                    { data: 'FlActivo.strEstadoActivo' },
                    { data: null },
                    { data: 'intIdPlanilla' },
                    { data: 'bitFlActivo' },
                    { data: 'bitFlPrincipal' },
                    { data: 'strPlaniCampo1' },
                    { data: 'strPlaniCampo2' },
                    { data: 'strPlaniCampo3' },
                    { data: 'strPlaniCampo4' },
                    { data: 'strPlaniCampo5' },
                    { data: 'intIdUniOrg' },
                ],
                lengthMenu: [10, 25, 50],
                responsive: true,
                order: [],
                language: _datatableLanguaje,
                columnDefs: [//ocultar y definir columnas
                    {
                        targets: [6],//intIdCargo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [7],//bitFlActivo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [8],//bitFlPrincipal
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [9],//strCargoCampo1
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [10],//strCargoCampo2
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [11],//strCargoCampo3
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [12],//strCargoCampo4
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [13],//strCargoCampo5
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [14],//intIdUniOrg
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [5],
                        data: null,
                        defaultContent: '<button class="btn btn-success btn-xs btn-edit" ><i class="fa fa-pencil"></i> Editar </button>' +
                            '<button class="btn btn-primary btn-xs btn-delete"><i class="fa fa-trash-o"></i> Eliminar </button>'
                    }
                ],
                dom: 'lBfrtip',
            });
        },
        complete: function () {
            $.unblockUI();
        }
    });
}
function intentEliminarPlanilla(idPlanilla, strNomPlanilla) {

    swal({
        title: "Eliminar Planilla",
        text: "¿Está seguro de eliminar la Planilla   ''<strong>" + strNomPlanilla + "</strong>''  ?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí, eliminar",
        cancelButtonText: "No, cancelar",
    }).then(function (isConfirm) {
        validarSession()
        yesEliminaPlanilla(idPlanilla);
    }, function (dismiss) {
        if (dismiss == 'cancel') {
            //swal("Cancelado", "La Operación fue cancelada", "error");
        }
    });
}
function yesEliminaPlanilla(idPlanilla) {

    $.post(
        '/Organizacion/EliminarPlanilla',
        { IdPlanilla: idPlanilla },
        (response) => {
            console.log(response);
            if (response.type !== '') {
                var tipo = 'Eliminado!';
                if (response.type === 'error')
                    tipo = 'EL REGISTRO NO SE PUEDE ELIMINAR';
                swal(tipo, response.message, response.type);

                if (response.type === 'success')
                    $('.form-hide-planilla').hide();
                TablaPlanilla('', '', '');
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}
function cardarDatosPlanilla(data) {

    $('#btn-update-planilla').show();
    $('#btn-save-change-planilla').hide();

    var objDatosPlanilla = {
        intIdPlanilla: data['intIdPlanilla'],
        strCoPlani: data['strCoPlani'],
        strDesPlani: data['strDesPlani'],
        strNomJerOrg: data['strNomJerOrg'],
        strDescripcion: data['strDescripcion'],
        intIdUniOrg: data['intIdUniOrg'],
        strEstadoActivo: data['FlActivo']['strEstadoActivo'],
        bitFlActivo: data['FlActivo']['bitFlActivo'],
        bitFlPrincipal: data['bitFlPrincipal'],
        strPlaniCampo1: data['strPlaniCampo1'],
        strPlaniCampo2: data['strPlaniCampo2'],
        strPlaniCampo3: data['strPlaniCampo3'],
        strPlaniCampo4: data['strPlaniCampo4'],
        strPlaniCampo5: data['strPlaniCampo5']
    }


    $.post(
        '/Organizacion/EditarPlanilla',
        { ObjPlanilla: objDatosPlanilla },
        (response) => {
            console.log(objDatosPlanilla)
            if (response !== '') {
                $('.form-hide-planilla .x_content').empty();
                $('.form-hide-planilla .x_content').html(response);
                $('.form-hide-planilla').show();
                switcheryLoad();
                init_checkBox_styles();
                $('#txt-cod-Planilla').val(objDatosPlanilla.strCoPlani);
                $('#txt-desc-Planilla').val(objDatosPlanilla.strDesPlani);
                $('#txtIdPlan').val(objDatosPlanilla.intIdPlanilla);

                if (objDatosPlanilla.strEstadoActivo == 'Activo') {
                    $('#11').html('<label id="_lbl_">Activo</label> <input type = "checkbox" id = "chk-activo-Planilla" class= "js-switch" checked /><script>switcheryLoad();</script >');
                } else {
                    $('#11').html('<label id="_lbl_">Inactivo</label> <input type = "checkbox" id = "chk-activo-Planilla" class= "js-switch" unchecked /><script>switcheryLoad();</script >');
                }

                if (objDatosPlanilla.bitFlPrincipal === true) {
                    $('#checkPrincipal').iCheck('check')
                }

                ////Bloque de Campos Adicionales

                $.post(
                    '/Organizacion/CamposAdicionales',
                    { strEntidad: 'TGPLANILLA' },
                    (response) => {


                        console.log(response);
                        $('#containerCampose').empty();
                        response.forEach(element => {
                            $('#containerCampose').append(
                                ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                                + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="' + element.strTitulo.replace("(*)", "") + '" maxlength="255"/>' + '</div></div>');


                        });

                        $('#strPlaniCampo1').val(objDatosPlanilla.strPlaniCampo1);
                        $('#strPlaniCampo2').val(objDatosPlanilla.strPlaniCampo2);
                        $('#strPlaniCampo3').val(objDatosPlanilla.strPlaniCampo3);
                        $('#strPlaniCampo4').val(objDatosPlanilla.strPlaniCampo4);
                        $('#strPlaniCampo5').val(objDatosPlanilla.strPlaniCampo5);
                    });


                //Bloque de llenados de CBO

                $("#cboJerarquia option").filter(function () {
                    return this.text == objDatosPlanilla.strNomJerOrg;
                }).attr('selected', true);

                var id = $('#cboJerarquia option:selected').val();
                if (id == 0 || !id) {
                    $('#cbounidsupe').empty();
                    $('#cbounidsupe').attr('disabled', true);

                    return;
                }
                $.post(
                    '/Organizacion/getUnidxJerarquia',
                    { IntIdJerOrg: id },
                    (response) => {

                        if (true) {

                            response.forEach(element => {

                                $('#cbounidsupe').attr('disabled', false);
                                $('#cbounidsupe').append('<option value="' + element.intIdUniOrg + '" >' + element.strDescripcion + '</option>');
                                if (element.intIdUniOrg == objDatosPlanilla.intIdUniOrg) {
                                    $("#cbounidsupe option").filter(function () {
                                        return this.text == objDatosPlanilla.strDescripcion;
                                    }).attr('selected', true);
                                }


                            });

                        }
                    }
                ).fail(function (result) {
                    alert('ERROR ' + result.status + ' ' + result.statusText);
                });
                $('#cbounidsupe').empty();

                var txtcod = 'strCoPlani';
                var txtdes = 'strDesPlani';

                $.post(
                    '/Organizacion/ListarCaracteresMax',
                    { strMaestro: 'TGPLANILLA' },
                    (response) => {
                        response.forEach(element => {
                            if (element.strColumnName == txtcod) {
                                $('.Valcod').children("input").attr('maxlength', element.intMaxLength);
                            }
                            if (element.strColumnName == txtdes) {
                                $('.Valdes').children("input").attr('maxlength', element.intMaxLength);
                            }
                        });
                    });


            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}
function CamposAdicionalesPlanilla() {

    $.post(
        '/Organizacion/CamposAdicionales',
        { strEntidad: 'TGPLANILLA' },
        (response) => {
            $('#containerCampose').empty();
            response.forEach(element => {

                $('#containerCampose').append(
                    ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                    + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="' + element.strTitulo.replace("(*)", "") + '" maxlength="255"/>' + '</div></div>');
            });
        });
}

$('#tablaPlanilla tbody').on('click', 'tr button.btn-edit', function () {
    validarSession()
    var data = _varTablaPlanilla.row($(this).parents('tr')).data();
    if (data == null) {
        data = null;
        var data = _varTablaPlanilla.row($(this).parents('li')).data();
        cardarDatosPlanilla(data);
    } else {
        var data = _varTablaPlanilla.row($(this).parents('tr')).data();
        cardarDatosPlanilla(data);
    }
});
$('#tablaPlanilla tbody').on('click', 'tr button.btn-delete', function () {
    validarSession()
    var data = _varTablaPlanilla.row($(this).parents('tr')).data();

    if (data == null) {
        data = null;

        var data = _varTablaPlanilla.row($(this).parents('li')).data();
        intentEliminarPlanilla(data['intIdPlanilla'], data['strDesPlani']);

    } else {

        var data = _varTablaPlanilla.row($(this).parents('tr')).data();
        intentEliminarPlanilla(data['intIdPlanilla'], data['strDesPlani']);

    }
});
$('#btn-save-change-planilla').on('click', function () {
    validarSession()
    var titulo_ = 'Nueva Planilla'

    var _uorg = $('#cbounidsupe option:selected').val();   //selected
    var _codigo = $('#txt-cod-Planilla').val();
    var _desc = $('#txt-desc-Planilla').val();
    var _activo = $('#chk-activo-Planilla').is(':checked');
    var _principal = $('#checkPrincipal').is(':checked');
    var _camp1 = $('#strPlaniCampo1').val();
    var _camp2 = $('#strPlaniCampo2').val();
    var _camp3 = $('#strPlaniCampo3').val();
    var _camp4 = $('#strPlaniCampo4').val();
    var _camp5 = $('#strPlaniCampo5').val();

    if (_codigo === '' || _desc === '' || _uorg === '') {
        messageResponseMix({ type: 'info', message: 'Complete los campos obligatorios' }, titulo_)//añadido 04/08/2021
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');

        return;
    }

    if (!$('#txt-cod-Planilla')[0].validity.valid) {
        messageResponseMix({ type: 'info', message: 'Ingrese solo números y letras sin espacios en blanco.' }, 'Codigo(*)')//añadido 04/08/2021
        return;
    }

    if (_uorg === '') {
        _uorg = null;
    }
    var Planilla = {

        strCoPlani: _codigo,
        strDesPlani: _desc,
        intIdUniOrg: _uorg,
        strPlaniCampo1: _camp1,
        strPlaniCampo2: _camp2,
        strPlaniCampo3: _camp3,
        strPlaniCampo4: _camp4,
        strPlaniCampo5: _camp5,
        bitFlActivo: _activo,
        bitFlPrincipal: _principal
    }
    $.post(
        '/Organizacion/RegistrarNuevaPlanilla',
        { Planilla: Planilla },
        (response) => {
            console.log(response);
            if (response.type !== '') {

                if (response.type === 'success') {
                    messageResponseMix({ type: response.type, message: response.message }, titulo_)//añadido 04/08/2021
                    $('.form-hide-planilla').hide();
                    TablaPlanilla();
                } else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Planilla';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        messageResponseMix({ type: response.type, message: response.message }, titulo_)//añadido 04/08/2021
                    }
                    return;
                }
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

});
$('#btn-update-planilla').on('click', function () {
    validarSession()
    var titulo_ = 'Actualización de Planilla'

    var _uorg = $('#cbounidsupe option:selected').val();   //selected
    var _codigo = $('#txt-cod-Planilla').val();
    var _desc = $('#txt-desc-Planilla').val();
    var _activo = $('#chk-activo-Planilla').is(':checked');
    var _principal = $('#checkPrincipal').is(':checked');
    var _camp1 = $('#strPlaniCampo1').val();
    var _camp2 = $('#strPlaniCampo2').val();
    var _camp3 = $('#strPlaniCampo3').val();
    var _camp4 = $('#strPlaniCampo4').val();
    var _camp5 = $('#strPlaniCampo5').val();
    var _codi = $('#txtIdPlan').val();

    if (_codigo === '' || _desc === '' || _uorg === '') {
        messageResponseMix({ type: 'info', message: 'Complete los campos obligatorios' }, titulo_)//añadido 04/08/2021
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }

    if (!$('#txt-cod-Planilla')[0].validity.valid) {
        messageResponseMix({ type: 'info', message: 'Ingrese solo números y letras sin espacios en blanco.' }, 'Codigo(*)')//añadido 04/08/2021
        return;
    }

    if (_uorg === '') {
        _uorg = null;
    }
    var Planilla = {
        intIdPlanilla: _codi,
        strCoPlani: _codigo,
        strDesPlani: _desc,
        intIdUniOrg: _uorg,
        strPlaniCampo1: _camp1,
        strPlaniCampo2: _camp2,
        strPlaniCampo3: _camp3,
        strPlaniCampo4: _camp4,
        strPlaniCampo5: _camp5,
        bitFlActivo: _activo,
        bitFlPrincipal: _principal
    }
    $.post(
        '/Organizacion/ActualizarPlanilla',
        { objDatos: Planilla },
        (response) => {
            console.log(response);
            if (response.type !== '') {

                if (response.type === 'success') {
                    messageResponseMix({ type: response.type, message: response.message }, titulo_)//añadido 04/08/2021
                    TablaPlanilla();
                    $('.form-hide-planilla').hide();
                }
                else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Planilla';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        messageResponseMix({ type: response.type, message: response.message }, titulo_)//añadido 04/08/2021
                    }
                    return;
                }

            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

});
$('#btn-cancel-planilla').on('click', function () {
    validarSession()
    $('.form-hide-planilla').hide();
});

$('#btn-new-planilla').on('click', function () {
    validarSession()
    $('.form-hide-planilla').show();
    $('#btn-update-planilla').hide();
    $('#btn-save-change-planilla').show();
    $.post(
        '/Organizacion/NuevaPlanilla',
        {},
        (response) => {
            if (response !== '') {
                $('.form-hide-planilla .x_content').empty();
                $('.form-hide-planilla .x_content').html(response);
                $('.form-hide-planilla').show();
                switcheryLoad();//checked verde


                //MaxCaracteres
                var txtCod = 'strCoPlani';
                var txtdes = 'strDesPlani';

                $.post(
                    '/Organizacion/ListarCaracteresMax',
                    { strMaestro: 'TGPLANILLA' },
                    (response) => {
                        response.forEach(element => {
                            if (element.strColumnName == txtCod) {
                                $('#ValCode').children("input").attr('maxlength', element.intMaxLength);
                            } if (element.strColumnName == txtdes) {
                                $('#Valdes').children("input").attr('maxlength', element.intMaxLength);
                            }
                        });
                    });


            }
            init_checkBox_styles()
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
});
$('#filActiPlanilla').on('change', function () {
    validarSession()
    TablaPlanilla();
});
$('#cboDepenPlanilla').on('change', function () {
    validarSession()
    TablaPlanilla();
});
//$('#filtroPlanilla').keyup(function () {
//    validarSession()
//    TablaPlanilla();
//});
$('#filtroPlanilla').on('change', function () {
    validarSession()
    TablaPlanilla();
})

//#endregion MANT. PLANILLA





/**------------------------------------------------ */
/**8. Centro de Costos */
/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
//#region MANT. CENTRO DE COSTO
var _varTablaCCosto;

function TablaCentroCosto() {
    var filtrosActivo = $('#filActiCC').val();
    var filtrojer = $('#cboDepenCC').val();
    var strfiltro = $('#filtroCC').val();

    $.ajax({
        url: '/Organizacion/getTablaCCosto',
        type: 'POST',
        data: {
            IntActivoFilter: filtrosActivo, strfilter: strfiltro, intfiltrojer: filtrojer
        },
        beforeSend: function () {
            $.blockUI({
                css: {
                    border: 'none',
                    padding: '15px',
                    backgroundColor: '#000',
                    '-webkit-border-radius': '10px',
                    '-moz-border-radius': '10px',
                    opacity: .5,
                    color: '#fff'
                },
                message: 'Procesando...'
            });
        },
        success: function (response) {

            if (typeof _varTablaCCosto !== 'undefined') {
                _varTablaCCosto.destroy();
            }

            _varTablaCCosto = $('#tablaCentroCosto').DataTable({
                data: response,
                columns: [
                    { data: 'strCoCCosto' },
                    { data: 'strDesCCosto' },
                    { data: 'strNomJerOrg' },
                    { data: 'strDescripcion' },
                    { data: 'FlActivo.strEstadoActivo' },
                    { data: null },
                    { data: 'IntIdCCosto' },
                    { data: 'intIdTipFisc' },
                    { data: 'bitFlActivo' },
                    { data: 'strCeCoCampo1' },
                    { data: 'strCeCoCampo2' },
                    { data: 'strCeCoCampo3' },
                    { data: 'strCeCoCampo4' },
                    { data: 'strCeCoCampo5' },
                    { data: 'IntIdUniOrg' },
                ],
                lengthMenu: [10, 25, 50],
                responsive: true,
                order: [],
                language: _datatableLanguaje,
                columnDefs: [//ocultar y definir columnas
                    {
                        targets: [6],//IntIdCCosto
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [7],//intIdTipFisc
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [8],//bitFlActivo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [9],//strPlaniCampo1
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [10],//strCargoCampo3
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [11],//strCargoCampo4
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [12],//strCargoCampo5
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [13],//intIdUniOrg
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [14],//intIdUniOrg
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [5],
                        data: null,
                        defaultContent: '<button class="btn btn-success btn-xs btn-edit" ><i class="fa fa-pencil"></i> Editar </button>' +
                            '<button class="btn btn-primary btn-xs btn-delete"><i class="fa fa-trash-o"></i> Eliminar </button>'
                    }
                ],
                dom: 'lBfrtip',
            });
        },
        complete: function () {
            $.unblockUI();
        }
    });
}
function intentEliminarCCosto(idCCosto, strNomCCosto) {

    swal({
        title: "Eliminar Centro de Costo",
        text: "¿Está seguro de eliminar el Centro de Costo   ''<strong>" + strNomCCosto + "</strong>''    ?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí, eliminar",
        cancelButtonText: "No, cancelar",
    }).then(function (isConfirm) {
        validarSession()
        if (isConfirm) {
            yesEliminaCCosto(idCCosto);
        } else {
            //swal("Cancelado", "La Operación fue cancelada", "error");
        }
    });
}
function yesEliminaCCosto(idCCosto) {

    $.post(
        '/Organizacion/EliminarCCosto',
        { IntIdCCosto: idCCosto },
        (response) => {
            console.log(response);
            if (response.type !== '') {
                var tipo = 'Eliminado!';
                if (response.type === 'error')
                    tipo = 'NO SE PUEDE ELIMINAR EL REGISTRO';
                swal(tipo, response.message, response.type);

                if (response.type === 'success')
                    $('.form-hide-ccosto').hide();
                TablaCentroCosto('', '', '');
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}
function cardarDatosCCosto(data) {

    $('#btn-update-ccosto').show();
    $('#btn-save-change-ccosto').hide();

    var objDatosCCosto = {
        IntIdCCosto: data['IntIdCCosto'],
        strCoCCosto: data['strCoCCosto'],
        strDesCCosto: data['strDesCCosto'],
        strNomJerOrg: data['strNomJerOrg'],
        IntIdCCosto: data['IntIdCCosto'],
        intIdTipFisc: data['intIdTipFisc'],
        intIdUniOrg: data['IntIdUniOrg'],
        strEstadoActivo: data['FlActivo']['strEstadoActivo'],
        bitFlActivo: data['FlActivo']['bitFlActivo'],
        strCeCoCampo1: data['strCeCoCampo1'],
        strCeCoCampo2: data['strCeCoCampo2'],
        strCeCoCampo3: data['strCeCoCampo3'],
        strCeCoCampo4: data['strCeCoCampo4'],
        strCeCoCampo5: data['strCeCoCampo5'],
        strDescripcion: data['strDescripcion']
    }


    $.post(
        '/Organizacion/EditarCCosto',
        { ObjCCosto: objDatosCCosto },
        (response) => {
            if (response !== '') {
                $('.form-hide-ccosto .x_content').empty();
                $('.form-hide-ccosto .x_content').html(response);
                $('.form-hide-ccosto').show();
                switcheryLoad();
                init_checkBox_styles();
                //  onchange_jerarquia();
                $('#txt-cod-CCosto').val(objDatosCCosto.strCoCCosto);
                $('#txt-desc-CCosto').val(objDatosCCosto.strDesCCosto);
                $('#txtIdCCosto').val(objDatosCCosto.IntIdCCosto);
                $("#cboTipo").val(objDatosCCosto.intIdTipFisc);

                if (objDatosCCosto.strEstadoActivo == 'Activo') {
                    $('#11').html('<label id="_lbl_">Activo</label> <input type = "checkbox" id = "chk-activo-CCosto" class= "js-switch" checked /><script>switcheryLoad();</script >');
                } else {
                    $('#11').html('<label id="_lbl_">Inactivo</label> <input type = "checkbox" id = "chk-activo-CCosto" class= "js-switch" unchecked /><script>switcheryLoad();</script >');
                }

                ////Bloque de Campos Adicionales
                $.post(
                    '/Organizacion/CamposAdicionales',
                    { strEntidad: 'TGCCOSTO' },
                    (response) => {

                        console.log(response);
                        $('#containerCampose').empty();
                        response.forEach(element => {
                            //alert(element.strTitulo);

                            $('#containerCampose').append(
                                ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                                + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="' + element.strTitulo.replace("(*)", "") + '" maxlength="255"/>' + '</div></div>');


                        });

                        $('#strCeCoCampo1').val(objDatosCCosto.strCeCoCampo1);
                        $('#strCeCoCampo2').val(objDatosCCosto.strCeCoCampo2);
                        $('#strCeCoCampo3').val(objDatosCCosto.strCeCoCampo3);
                        $('#strCeCoCampo4').val(objDatosCCosto.strCeCoCampo4);
                        $('#strCeCoCampo5').val(objDatosCCosto.strCeCoCampo5);
                    });


                //Bloque de llenados de CBO

                $("#cboJerarquia option").filter(function () {
                    return this.text == objDatosCCosto.strNomJerOrg;
                }).attr('selected', true);

                var id = $('#cboJerarquia option:selected').val();
                if (id == 0 || !id) {
                    $('#cbounidsupe').empty();
                    $('#cbounidsupe').attr('disabled', true);

                    return;
                }
                $.post(
                    '/Organizacion/getUnidxJerarquia',
                    { IntIdJerOrg: id },
                    (response) => {

                        if (true) {

                            response.forEach(element => {

                                $('#cbounidsupe').attr('disabled', false);
                                $('#cbounidsupe').append('<option value="' + element.intIdUniOrg + '" >' + element.strDescripcion + '</option>');


                                if (element.intIdUniOrg == objDatosCCosto.intIdUniOrg) {
                                    $("#cbounidsupe option").filter(function () {
                                        return this.text == objDatosCCosto.strDescripcion;
                                    }).attr('selected', true);
                                }


                            });

                        }
                    }
                ).fail(function (result) {
                    alert('ERROR ' + result.status + ' ' + result.statusText);
                });
                $('#cbounidsupe').empty();

                var txtcod = 'strCoCCosto';
                var txtdes = 'strDesCCosto';

                $.post(
                    '/Organizacion/ListarCaracteresMax',
                    { strMaestro: 'TGCCOSTO' },
                    (response) => {
                        response.forEach(element => {
                            if (element.strColumnName == txtcod) {
                                $('.Valcod').children("input").attr('maxlength', element.intMaxLength);
                            }
                            if (element.strColumnName == txtdes) {
                                $('.Valdes').children("input").attr('maxlength', element.intMaxLength);
                            }
                        });
                    });

            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}
function CamposAdicionalesCCosto() {

    $.post(
        '/Organizacion/CamposAdicionales',
        { strEntidad: 'TGCCOSTO' },
        (response) => {

            console.log(response);
            $('#containerCampose').empty();
            response.forEach(element => {

                $('#containerCampose').append(
                    ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                    + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="' + element.strTitulo.replace("(*)", "") + '" maxlength="255"/>' + '</div></div>');
            });
        });
}

$('#tablaCentroCosto  tbody').on('click', 'tr button.btn-edit', function () {
    validarSession()
    var data = _varTablaCCosto.row($(this).parents('tr')).data();
    if (data == null) {
        data = null;
        var data = _varTablaCCosto.row($(this).parents('li')).data();
        cardarDatosCCosto(data);
    } else {
        var data = _varTablaCCosto.row($(this).parents('tr')).data();
        cardarDatosCCosto(data);
    }
});
$('#tablaCentroCosto  tbody').on('click', 'tr button.btn-delete', function () {
    validarSession()
    var data = _varTablaCCosto.row($(this).parents('tr')).data();

    if (data == null) {
        data = null;

        var data = _varTablaCCosto.row($(this).parents('li')).data();
        intentEliminarCCosto(data['IntIdCCosto'], data['strDesCCosto']);

    } else {

        var data = _varTablaCCosto.row($(this).parents('tr')).data();
        intentEliminarCCosto(data['IntIdCCosto'], data['strDesCCosto']);

    }
});
$('#btn-save-change-ccosto').on('click', function () {
    validarSession()
    var titulo_ = 'Nuevo Centro de Costo'

    var _uorg = $('#cbounidsupe option:selected').val();   //selected
    var _codigo = $('#txt-cod-CCosto').val();
    var _desc = $('#txt-desc-CCosto').val();
    var _activo = $('#chk-activo-CCosto').is(':checked');
    var _TipoCCosto = $('#cboTipo option:selected').val();
    var _camp1 = $('#strCeCoCampo1').val();
    var _camp2 = $('#strCeCoCampo2').val();
    var _camp3 = $('#strCeCoCampo3').val();
    var _camp4 = $('#strCeCoCampo4').val();
    var _camp5 = $('#strCeCoCampo5').val();

    if (_codigo === '' || _desc === '' || _uorg === '') {
        messageResponseMix({ type: 'info', message: 'Complete los campos obligatorios' }, titulo_)//añadido 04/08/2021
        //new PNotify({
        //    title: 'Nuevo Centro de Costo',
        //    text: 'Complete los campos obligatorios',
        //    type: 'info',
        //    delay: 3000,
        //    styling: 'bootstrap3',
        //    addclass: 'dark'
        //});
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }

    if (!$('#txt-cod-CCosto')[0].validity.valid) {
        messageResponseMix({ type: 'info', message: 'Ingrese solo números y letras sin espacios en blanco.' }, 'Codigo(*)')//añadido 04/08/2021
        //new PNotify({
        //    title: 'Codigo(*)',
        //    text: 'Ingrese solo números y letras sin espacios en blanco.',
        //    type: 'info',
        //    delay: 3000,
        //    styling: 'bootstrap3',
        //    addclass: 'dark'
        //});
        return;
    }

    if (_uorg === '') {
        _uorg = null;
    }
    var CCosto = {

        strCoCCosto: _codigo,
        strDesCCosto: _desc,
        intIdUniOrg: _uorg,
        intIdTipFisc: _TipoCCosto,
        strCeCoCampo1: _camp1,
        strCeCoCampo2: _camp2,
        strCeCoCampo3: _camp3,
        strCeCoCampo4: _camp4,
        strCeCoCampo5: _camp5,
        bitFlActivo: _activo,

    }
    $.post(
        '/Organizacion/RegistrarNuevoCCosto',
        { CCosto: CCosto },
        (response) => {
            console.log(response);
            if (response.type !== '') {

                if (response.type === 'success') {
                    messageResponseMix({ type: response.type, message: response.message }, titulo_)//añadido 04/08/2021
                    //new PNotify({
                    //    title: 'Nuevo Centro de Costo',
                    //    text: response.message,
                    //    type: response.type,
                    //    delay: 3000,
                    //    styling: 'bootstrap3'
                    //});
                    TablaCentroCosto();
                    $('.form-hide-ccosto').hide();
                } else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Centro de Costo';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        messageResponseMix({ type: response.type, message: response.message }, titulo_)//añadido 04/08/2021
                        //new PNotify({
                        //    title: 'Centro de Costo',
                        //    text: response.message,
                        //    type: response.type,
                        //    delay: 3000,
                        //    styling: 'bootstrap3',
                        //    addclass: 'dark'
                        //});
                    }
                    return;
                }

            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
});
$('#btn-update-ccosto').on('click', function () {
    validarSession()
    var titulo_ = 'Actualización de Centro de Costo'

    var _uorg = $('#cbounidsupe option:selected').val();   //selected
    var _codigo = $('#txt-cod-CCosto').val();
    var _desc = $('#txt-desc-CCosto').val();
    var _activo = $('#chk-activo-CCosto').is(':checked');
    var _TipoCCosto = $('#cboTipo option:selected').val();
    var _camp1 = $('#strCeCoCampo1').val();
    var _camp2 = $('#strCeCoCampo2').val();
    var _camp3 = $('#strCeCoCampo3').val();
    var _camp4 = $('#strCeCoCampo4').val();
    var _camp5 = $('#strCeCoCampo5').val();
    var _idCCosto = $('#txtIdCCosto').val();

    if (_codigo === '' || _desc === '' || _uorg === '') {
        messageResponseMix({ type: 'info', message: 'Complete los campos obligatorios' }, titulo_)//añadido 04/08/2021
        //new PNotify({
        //    title: 'Actualización de Centro de Costo',
        //    text: 'Complete los campos obligatorios',
        //    type: 'info',
        //    delay: 3000,
        //    styling: 'bootstrap3',
        //    addclass: 'dark'
        //});
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }

    if (!$('#txt-cod-CCosto')[0].validity.valid) {
        messageResponseMix({ type: 'info', message: 'Ingrese solo números y letras sin espacios en blanco.' }, 'Codigo(*)')//añadido 04/08/2021
        //new PNotify({
        //    title: 'Codigo(*)',
        //    text: 'Ingrese solo números y letras sin espacios en blanco.',
        //    type: 'info',
        //    delay: 3000,
        //    styling: 'bootstrap3',
        //    addclass: 'dark'
        //});
        return;
    }

    if (_uorg === '') {
        _uorg = null;
    }
    var CCosto = {
        IntIdCCosto: _idCCosto,
        strCoCCosto: _codigo,
        strDesCCosto: _desc,
        intIdUniOrg: _uorg,
        intIdTipFisc: _TipoCCosto,
        strCeCoCampo1: _camp1,
        strCeCoCampo2: _camp2,
        strCeCoCampo3: _camp3,
        strCeCoCampo4: _camp4,
        strCeCoCampo5: _camp5,
        bitFlActivo: _activo,

    }
    $.post(
        '/Organizacion/ActualizarCCosto',
        { objDatos: CCosto },
        (response) => {
            console.log(response);
            if (response.type !== '') {

                if (response.type === 'success') {
                    messageResponseMix({ type: response.type, message: response.message }, titulo_)//añadido 04/08/2021
                    //new PNotify({
                    //    title: 'Actualización de Centro de Costo',
                    //    text: response.message,
                    //    type: response.type,
                    //    delay: 3000,
                    //    styling: 'bootstrap3'
                    //});
                    TablaCentroCosto();
                    $('.form-hide-ccosto').hide();
                } else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Centro de Costo';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        messageResponseMix({ type: response.type, message: response.message }, titulo_)//añadido 04/08/2021
                        //new PNotify({
                        //    title: 'Centro de Costo',
                        //    text: response.message,
                        //    type: response.type,
                        //    delay: 3000,
                        //    styling: 'bootstrap3',
                        //    addclass: 'dark'
                        //});
                    }
                    return;
                }
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
});
$('#btn-cancel-ccosto').on('click', function () {
    validarSession()
    $('.form-hide-ccosto').hide();
});

$('#filActiCC').on('change', function () {
    validarSession()
    TablaCentroCosto();
});
$('#cboDepenCC').on('change', function () {
    validarSession()
    TablaCentroCosto();
});
$('#btn-new-ccosto').on('click', function () {
    validarSession()
    $('#btn-save-change-ccosto').show();
    $('#btn-update-ccosto').hide();
    $('.form-hide-ccosto').show();
    $.post(
        '/Organizacion/NuevoCentroCosto',
        {},
        (response) => {
            if (response !== '') {
                $('.form-hide-ccosto .x_content').empty();
                $('.form-hide-ccosto .x_content').html(response);
                $('.form-hide-ccosto').show();
                CamposAdicionalesCCosto();
                switcheryLoad();//checked verde


                //MaxCaracteres
                var txtCod = 'strCoCCosto';
                var txtdes = 'strDesCCosto';

                $.post(
                    '/Organizacion/ListarCaracteresMax',
                    { strMaestro: 'TGCCOSTO' },
                    (response) => {
                        response.forEach(element => {
                            if (element.strColumnName == txtCod) {
                                $('#ValCode').children("input").attr('maxlength', element.intMaxLength);
                            } if (element.strColumnName == txtdes) {
                                $('#Valdes').children("input").attr('maxlength', element.intMaxLength);
                            }
                        });
                    });

            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
});
//$('#filtroCC').keyup(function () {
//    validarSession()
//    TablaCentroCosto();
//});
$('#filtroCC').on('change', function () {
    validarSession()
    TablaCentroCosto();
})

//#endregion MANT. CENTRO DE COSTO






/**------------------------------------------------ */
/**9. Marcador */
/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
//#region MANT. MARCADOR
var _varTablaMarcador;

function TablaMarcador() {

    var filtrosActivo = $('#filActiMarc').val();
    var strfiltro = $('#filtroMarc').val();

    $.ajax({
        url: '/Organizacion/GetTablaMarcador',
        type: 'POST',
        data: {
            IntActivoFilter: filtrosActivo, strfilter: strfiltro
        },
        beforeSend: function () {
            $.blockUI({
                css: {
                    border: 'none',
                    padding: '15px',
                    backgroundColor: '#000',
                    '-webkit-border-radius': '10px',
                    '-moz-border-radius': '10px',
                    opacity: .5,
                    color: '#fff'
                },
                message: 'Procesando...'
            });
        },
        success: function (response) {

            console.log(_varTablaMarcador);
            if (typeof _varTablaMarcador !== 'undefined') {
                _varTablaMarcador.destroy();
            }

            console.log('en TablaMarcador');
            console.log(response);

            _varTablaMarcador = $('#tablaMarcador').DataTable({
                data: response,
                columns: [
                    { data: 'intNumMarcador' },
                    { data: 'strDesMarcador' },
                    { data: 'NumIPNumPort' },
                    { data: 'strNomJerOrg' },
                    { data: 'FlActivo.strEstadoActivo' },
                    { data: null },
                    { data: 'strNumIP' },
                    { data: 'intNumPuerto' },
                    { data: 'intIdMarcador' },
                    { data: 'intTipoMarcad' },
                    { data: 'intTipoFunc' },
                    { data: 'strMarcadCampo1' },
                    { data: 'strMarcadCampo2' },
                    { data: 'strMarcadCampo3' },
                    { data: 'strMarcadCampo4' },
                    { data: 'strMarcadCampo5' },
                    { data: 'intIdUniOrg' },
                    { data: 'bitTipoComu' },
                ],
                lengthMenu: [10, 25, 50],
                responsive: true,
                order: [0],
                language: _datatableLanguaje,
                columnDefs: [//ocultar y definir columnas
                    {
                        targets: [6],//IntIdCCosto
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [7],//intIdTipFisc
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [8],//bitFlActivo
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [9],//strPlaniCampo1
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [10],//strCargoCampo3
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [11],//strCargoCampo4
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [12],//strCargoCampo5
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [13],//intIdUniOrg
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [14],//intIdUniOrg
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [15],//intIdUniOrg
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [16],//intIdUniOrg
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [17],//intIdUniOrg
                        visible: false,
                        searchable: false
                    },

                    {
                        targets: [5],
                        data: null,
                        defaultContent: '<button class="btn btn-success btn-xs btn-edit" ><i class="fa fa-pencil"></i> Editar </button>' +
                            '<button class="btn btn-primary btn-xs btn-delete"><i class="fa fa-trash-o"></i> Eliminar </button>'
                    }
                ],
                dom: 'lBfrtip',
            });
        },
        complete: function () {
            $.unblockUI();
        }
    });
}
function intentEliminarMarcador(idMarcador, strNomMarcador) {

    swal({
        title: "Eliminar Marcador",
        text: "¿Está seguro de eliminar el Marcador   ''<strong>" + strNomMarcador + "</strong>''   ?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí, eliminar",
        cancelButtonText: "No, cancelar",
    }).then(function (isConfirm) {
        validarSession()
        if (isConfirm) {
            yesEliminaMarcador(idMarcador);
        } else {
            //swal("Cancelado", "La Operación fue cancelada", "error");
        }
    });
}
function yesEliminaMarcador(idMarcador) {

    $.post(
        '/Organizacion/EliminarMarcador',
        { intIdMarcador: idMarcador },
        (response) => {
            console.log(response);
            if (response.type !== '') {
                var tipo = 'Eliminado!';
                if (response.type === 'error')
                    tipo = 'NO SE PUEDE ELIMINAR EL REGISTRO';
                swal(tipo, response.message, response.type);

                if (response.type === 'success')
                    $('.form-hide-Marcador').hide();
                TablaMarcador('', '');
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}
function cardarDatosMarcador(data) {

    $('#btn-update-marcador').show();
    $('#btn-save-change-marcador').hide();

    $.post(
        '/Organizacion/ObtenerRegistroMarcador',
        { intIdMarcador: data['intIdMarcador'] },
        (response) => {
            console.log(response);
            var objDatosMarcador = response;

            $.post(
                '/Organizacion/EditarMarcador',
                { ObjMarcador: objDatosMarcador },
                (response) => {

                    if (response !== '') {
                        $('.form-hide-Marcador .x_content').empty();
                        $('.form-hide-Marcador .x_content').html(response);
                        switcheryLoad();
                        init_checkBox_styles();
                        var strEstadoActivo = data['FlActivo']['strEstadoActivo'];
                        if (strEstadoActivo == 'Activo') {
                            $('#11').html('<label id="_lbl_">Activo</label> <input type = "checkbox" id = "chk-activo-Marcador" class= "js-switch" checked /><script>switcheryLoad();</script >');
                        } else {
                            $('#11').html('<label id="_lbl_">Inactivo</label> <input type = "checkbox" id = "chk-activo-Marcador" class= "js-switch" unchecked /><script>switcheryLoad();</script >');
                        }

                        ////Bloque de Campos Adicionales
                        $('#cboJerarquiaMarcador').val(objDatosMarcador[0].intIdEmpr);//AÑADIDO 20.08.2021 //objDatosMarcador.intIdEmpr

                        var txtIP = 'strNumIP';
                        var txtdes = 'strDesMarcador';

                        $.post(
                            '/Organizacion/ListarCaracteresMax',
                            { strMaestro: 'TGMARCADOR' },
                            (response) => {
                                response.forEach(element => {
                                    if (element.strColumnName == txtdes) {
                                        $('.Valdes').children("input").attr('maxlength', element.intMaxLength);
                                    }
                                    if (element.strColumnName == txtIP) {
                                        $('.Valip').children("input").attr('maxlength', element.intMaxLength);
                                    }
                                });
                                //Bloque de llenados de CB

                                var idEmpresa = $('#cboJerarquiaMarcador').val()

                                $.post(
                                    '/Organizacion/CamposAdicionales',
                                    { strEntidad: 'TGMARCADOR' },
                                    (response) => {

                                        console.log("");
                                        $('#containerCampose').empty();
                                        response.forEach(element => {
                                            $('#containerCampose').append(
                                                ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                                                + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="' + element.strTitulo.replace("(*)", "") + '" maxlength="255"/>' + '</div></div>');
                                        });

                                        $('#strMarcadCampo1').val(objDatosMarcador[0].strMarcadCampo1);//Se llena y muestra la SERIE siempre
                                        $('#strMarcadCampo2').val(objDatosMarcador[0].strMarcadCampo2);
                                        $('#strMarcadCampo3').val(objDatosMarcador[0].strMarcadCampo3);
                                        $('#strMarcadCampo4').val(objDatosMarcador[0].strMarcadCampo4);
                                        $('#strMarcadCampo5').val(objDatosMarcador[0].strMarcadCampo5);

                                        $.post(
                                            '/Personal/ListarCombos',
                                            {
                                                intIdMenu: 1,
                                                strEntidad: 'TGPERSONAL',
                                                intIdFiltroGrupo: idEmpresa,
                                                strGrupo: 'LOCAL',
                                                strSubGrupo: 'U'
                                            },
                                            response => {
                                                $('#cbounidsupe').empty()
                                                $('#cbounidsupe').attr('disabled', false)
                                                if (response.length > 1) {
                                                    $('#cbounidsupe').append('<option value="0">Seleccione</option>')
                                                }
                                                response.forEach(element => {
                                                    $('#cbounidsupe').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
                                                })
                                                $('#cbounidsupe').val(objDatosMarcador[0].intIdUniOrg);

                                                //----------------------------------------------------------------
                                                $('#txt-Num-Marcador').val(objDatosMarcador[0].intNumMarcador);
                                                $('#txt-desc-Marcador').val(objDatosMarcador[0].strDesMarcador);
                                                $('#cboTipoFuncionalidad').val(objDatosMarcador[0].intTipoFunc);
                                                $('#cboTipoMarcador').val(objDatosMarcador[0].intTipoMarcad);
                                                $('#txtIdMarc').val(objDatosMarcador[0].intIdMarcador);
                                                $('#cboTipoComu').val('');
                                                //if (objDatosMarcador[0].bitTipoComu) {
                                                //    $('#cboTipoComu').val(1);
                                                //    $('#txt-IP-Marcado').val(objDatosMarcador[0].strNumIP);
                                                //    $('#txt-Puerto-Marcador').val(objDatosMarcador[0].intNumPuerto);
                                                //    $('#Tipo_Fijo').show();
                                                //} else {
                                                //    $('#cboTipoComu').val(0);
                                                //    $('#txt-IP-Marcado').val('');
                                                //    $('#txt-Puerto-Marcador').val('');
                                                //    $('#Tipo_Fijo').hide();
                                                //}
                                                //-----------------------------------------------------------------

                                                //añadido 03.09.2021 - Validar si es o no de WDMS
                                                if (objDatosMarcador[0].intIclokId_Wdms > 0) {
                                                    $('#strMarcadCampo1').attr('disabled', true);
                                                    $('#cboTipoComu').attr('disabled', true);
                                                    if (objDatosMarcador[0].bitTipoComu) {
                                                        $('#cboTipoComu').val(1);
                                                        $('#txt-IP-Marcado').val(objDatosMarcador[0].strNumIP);
                                                        $('#txt-Puerto-Marcador').val(objDatosMarcador[0].intNumPuerto);
                                                        $('#txt-IP-Marcado').attr('disabled', true);;
                                                        $('#txt-Puerto-Marcador').attr('disabled', true);;
                                                        $('#Tipo_Fijo').show();
                                                    } else {
                                                        $('#cboTipoComu').val(0);
                                                        $('#txt-IP-Marcado').val('');
                                                        $('#txt-Puerto-Marcador').val('');
                                                        $('#txt-IP-Marcado').attr('disabled', false);;
                                                        $('#txt-Puerto-Marcador').attr('disabled', false);;
                                                        $('#Tipo_Fijo').hide();
                                                    }
                                                    $('#Mensaje_').show();
                                                } else {
                                                    $('#strMarcadCampo1').attr('disabled', false);
                                                    $('#cboTipoComu').attr('disabled', false);
                                                    if (objDatosMarcador[0].bitTipoComu) {
                                                        $('#cboTipoComu').val(1);
                                                        $('#txt-IP-Marcado').val(objDatosMarcador[0].strNumIP);
                                                        $('#txt-Puerto-Marcador').val(objDatosMarcador[0].intNumPuerto);
                                                        $('#txt-IP-Marcado').attr('disabled', false);;
                                                        $('#txt-Puerto-Marcador').attr('disabled', false);;
                                                        $('#Tipo_Fijo').show();
                                                    } else {
                                                        $('#cboTipoComu').val(0);
                                                        $('#txt-IP-Marcado').val('');
                                                        $('#txt-Puerto-Marcador').val('');
                                                        $('#txt-IP-Marcado').attr('disabled', false);;
                                                        $('#txt-Puerto-Marcador').attr('disabled', false);;
                                                        $('#Tipo_Fijo').hide();
                                                    }
                                                    $('#Mensaje_').hide();
                                                }
                                                $('.form-hide-Marcador').show();
                                            })
                                    });
                            });

                    }
                }
            ).fail(function (result) {
                alert('ERROR ' + result.status + ' ' + result.statusText);
            });

        }).fail(function (result) {
            alert('ERROR ' + result.status + ' ' + result.statusText);
        });
}
function CamposAdicionalesMarcador() {
    $.post(
        '/Organizacion/CamposAdicionales',
        { strEntidad: 'TGMARCADOR' },
        (response) => {
            console.log(response);
            $('#containerCampose').empty();
            response.forEach(element => {

                $('#containerCampose').append(
                    ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                    + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="' + element.strTitulo.replace("(*)", "") + '" maxlength="255"/>' + '</div></div>');
            });
        });
}

$('#tablaMarcador tbody').on('click', 'tr button.btn-edit', function () {
    validarSession()
    var data = _varTablaMarcador.row($(this).parents('tr')).data();
    if (data == null) {
        data = null;
        var data = _varTablaMarcador.row($(this).parents('li')).data();
        cardarDatosMarcador(data);
    } else {
        var data = _varTablaMarcador.row($(this).parents('tr')).data();
        cardarDatosMarcador(data);
    }
});
$('#tablaMarcador tbody').on('click', 'tr button.btn-delete', function () {
    validarSession()
    var data = _varTablaMarcador.row($(this).parents('tr')).data();

    if (data == null) {
        data = null;

        var data = _varTablaMarcador.row($(this).parents('li')).data();
        intentEliminarMarcador(data['intIdMarcador'], data['strDesMarcador']);

    } else {

        var data = _varTablaMarcador.row($(this).parents('tr')).data();
        intentEliminarMarcador(data['intIdMarcador'], data['strDesMarcador']);

    }
});
$('#btn-save-change-marcador').on('click', function () {
    validarSession()
    var titulo_ = 'Nuevo Marcador'
    $(".notifry_error").html("")

    var _uorg = $('#cbounidsupe option:selected').val();   //selected
    var _NumMarcador = $('#txt-Num-Marcador').val();
    var _desc = $('#txt-desc-Marcador').val();
    var _TipoMarcador = $('#cboTipoMarcador option:selected').val();
    var _IntNumPuerto = $('#txt-Puerto-Marcador').val();
    var _NumIp = $('#txt-IP-Marcado').val();
    var _TipoFunc = $('#cboTipoFuncionalidad option:selected').val();
    var TipComu_ = $('#cboTipoComu').val();

    var _camp1 = $('#strMarcadCampo1').val();//Serie del marcador
    var _camp2 = $('#strMarcadCampo2').val();
    var _camp3 = $('#strMarcadCampo3').val();
    var _camp4 = $('#strMarcadCampo4').val();
    var _camp5 = $('#strMarcadCampo5').val();
    var _activo = $('#chk-activo-Marcador').is(':checked');

    if (_uorg === null || _uorg === "Seleccione" || _uorg === '') {//modificado 20.08.2021
        messageResponseMix({ type: 'info', message: 'Seleccione un Local' }, titulo_)//añadido 04/08/2021
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }
    if (_NumMarcador === '') {
        messageResponseMix({ type: 'info', message: 'Ingrese un N° de Terminal' }, titulo_)//añadido 04/08/2021
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }
    if (!$('#txt-Num-Marcador')[0].validity.valid) {
        messageResponseMix({ type: 'info', message: 'Ingresar un número menor de 10 dígitos' }, 'Número de Terminal (*)')//añadido 04/08/2021
        return;
    }
    if (_desc === '') {
        messageResponseMix({ type: 'info', message: 'Ingrese una Descripción' }, titulo_)//añadido 04/08/2021
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }

    if (TipComu_ == null || TipComu_ === '') {
        messageResponseMix({ type: 'info', message: 'Seleccione un Tipo de Marcador' }, titulo_)//añadido 04/08/2021
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }
    //cboTipoFuncionalidad
    if (_TipoFunc === null || _TipoFunc === "Seleccione" || _TipoFunc === '') {//modificado 20.08.2021
        messageResponseMix({ type: 'info', message: 'Seleccione un Tipo de Funcionalidad' }, titulo_)//añadido 04/08/2021
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }

    var _TipoComu = null;
    if (TipComu_ == 0) { //corregido 20.08.2021
        _TipoComu = false;
        //Marcador Móvil
        _NumIp = "";
        _IntNumPuerto = "";
    } if (TipComu_ == 1) {//corregido 20.08.2021
        _TipoComu = true;
        //Marcador Fijo Ethernet (IP/Puerto)
    }
    if (_TipoComu) {
        if (_NumIp == null || _NumIp == '') {
            messageResponseMix({ type: 'info', message: 'La IP debe ser ingresada' }, titulo_)//añadido 04/08/2021
            $('#notifry_error').html('');
            $('#notifry_errordes').html('');
            return;
        }
        if (!$('#txt-IP-Marcado')[0].validity.valid) {
            messageResponseMix({ type: 'info', message: 'Ingresar una IP correcta' }, 'IP (*)')//añadido 04/08/2021
            return;
        }
        if (_IntNumPuerto == null || _IntNumPuerto == '' || _IntNumPuerto == 0) {
            messageResponseMix({ type: 'info', message: 'Debe ingresar un N° de Puerto' }, titulo_)//añadido 04/08/2021
            $('#notifry_error').html('');
            $('#notifry_errordes').html('');
            return;
        }
        if (!$('#txt-Puerto-Marcador')[0].validity.valid) {
            messageResponseMix({ type: 'info', message: 'Ingresar un puerto correcto, entre 0 y 65535' }, 'Puerto (*)')//añadido 04/08/2021
            return;
        }
    }
    //cboTipoMarcador
    if (_TipoMarcador === null || _TipoMarcador === "Seleccione" || _TipoMarcador === '') {//modificado 20.08.2021
        messageResponseMix({ type: 'info', message: 'Seleccione un Tipo de Lector' }, titulo_)//añadido 04/08/2021
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }
    //se añade validación para que Serie sea obligatorio
    if (_camp1 === '' || _camp1 === null) {
        messageResponseMix({ type: 'info', message: 'Ingrese una N° de Serie' }, titulo_)//añadido 04/08/2021
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }

    if (_uorg === '') {
        _uorg = null;
    }
    var Marcador = {

        intNumMarcador: _NumMarcador,
        strDesMarcador: _desc,
        intIdUniOrg: _uorg,
        intTipoFunc: _TipoFunc,
        intTipoMarcad: _TipoMarcador,  // Aún no se sabe de que campo o de donde se sacará PENDIENTE
        bitTipoComu: _TipoComu,
        strNumIP: _NumIp,
        intNumPuerto: _IntNumPuerto,
        strMarcadCampo1: _camp1,
        strMarcadCampo2: _camp2,
        strMarcadCampo3: _camp3,
        strMarcadCampo4: _camp4,
        strMarcadCampo5: _camp5,
        bitFlActivo: _activo,

    }
    $.post(
        '/Organizacion/RegistrarNuevoMarcador',
        { Marcador: Marcador },
        (response) => {
            console.log(response);
            if (response.type !== '') {

                if (response.type === 'success') {
                    messageResponseMix({ type: response.type, message: response.message }, titulo_)//añadido 04/08/2021
                    TablaMarcador();
                    $('.form-hide-Marcador').hide();
                } else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Marcador';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        messageResponseMix({ type: response.type, message: response.message }, titulo_)//añadido 04/08/2021
                    }
                    return;
                }
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

});
$('#btn-update-marcador').on('click', function () {
    validarSession()
    var titulo_ = 'Actualización de Marcador'
    $(".notifry_error").html("")

    var _uorg = $('#cbounidsupe option:selected').val();   //selected
    var _NumMarcador = $('#txt-Num-Marcador').val();
    var _desc = $('#txt-desc-Marcador').val();
    var _TipoMarcador = $('#cboTipoMarcador option:selected').val();
    var _IntNumPuerto = $('#txt-Puerto-Marcador').val();
    var _NumIp = $('#txt-IP-Marcado').val();
    var _TipoFunc = $('#cboTipoFuncionalidad option:selected').val();
    var TipComu_ = $('#cboTipoComu').val();


    var _camp1 = $('#strMarcadCampo1').val();
    var _camp2 = $('#strMarcadCampo2').val();
    var _camp3 = $('#strMarcadCampo3').val();
    var _camp4 = $('#strMarcadCampo4').val();
    var _camp5 = $('#strMarcadCampo5').val();
    var _activo = $('#chk-activo-Marcador').is(':checked');
    var _idMarc = $('#txtIdMarc').val();

    if (_uorg === null || _uorg === "Seleccione" || _uorg === '') {//modificado 20.08.2021
        messageResponseMix({ type: 'info', message: 'Seleccione un Local' }, titulo_)//añadido 04/08/2021
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }
    if (_NumMarcador === '') {
        messageResponseMix({ type: 'info', message: 'Ingrese un N° de Terminal' }, titulo_)//añadido 04/08/2021
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }
    if (!$('#txt-Num-Marcador')[0].validity.valid) {
        messageResponseMix({ type: 'info', message: 'Ingresar un número menor de 10 dígitos' }, 'Número de Terminal (*)')//añadido 04/08/2021
        return;
    }
    if (_desc === '') {
        messageResponseMix({ type: 'info', message: 'Ingrese una Descripción' }, titulo_)//añadido 04/08/2021
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }

    if (TipComu_ == null || TipComu_ === '') {
        messageResponseMix({ type: 'info', message: 'Seleccione un Tipo de Marcador' }, titulo_)//añadido 04/08/2021
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }
    //cboTipoFuncionalidad
    if (_TipoFunc === null || _TipoFunc === "Seleccione" || _TipoFunc === '') {//modificado 20.08.2021
        messageResponseMix({ type: 'info', message: 'Seleccione un Tipo de Funcionalidad' }, titulo_)//añadido 04/08/2021
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }

    var _TipoComu = null;
    if (TipComu_ == 0) { //corregido 20.08.2021
        _TipoComu = false;
        //Marcador Móvil
        _NumIp = "";
        _IntNumPuerto = "";
    } if (TipComu_ == 1) {//corregido 20.08.2021
        _TipoComu = true;
        //Marcador Fijo Ethernet (IP/Puerto)
    }
    if (_TipoComu) {
        if (_NumIp == null || _NumIp == '') {
            messageResponseMix({ type: 'info', message: 'La IP debe ser ingresada' }, titulo_)//añadido 04/08/2021
            $('#notifry_error').html('');
            $('#notifry_errordes').html('');
            return;
        }
        if (!$('#txt-IP-Marcado')[0].validity.valid) {
            messageResponseMix({ type: 'info', message: 'Ingresar una IP correcta' }, 'IP (*)')//añadido 04/08/2021
            return;
        }
        if (_IntNumPuerto == null || _IntNumPuerto == '' || _IntNumPuerto == 0) {
            messageResponseMix({ type: 'info', message: 'Debe ingresar un N° de Puerto' }, titulo_)//añadido 04/08/2021
            $('#notifry_error').html('');
            $('#notifry_errordes').html('');
            return;
        }
        if (!$('#txt-Puerto-Marcador')[0].validity.valid) {
            messageResponseMix({ type: 'info', message: 'Ingresar un puerto correcto, entre 0 y 65535' }, 'Puerto (*)')//añadido 04/08/2021
            return;
        }
    }
    //cboTipoMarcador
    if (_TipoMarcador === null || _TipoMarcador === "Seleccione" || _TipoMarcador === '') {//modificado 20.08.2021
        messageResponseMix({ type: 'info', message: 'Seleccione un Tipo de Lector' }, titulo_)//añadido 04/08/2021
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }
    //se añade validación para que Serie sea obligatorio
    if (_camp1 === '' || _camp1 === null) {
        messageResponseMix({ type: 'info', message: 'Ingrese una N° de Serie' }, titulo_)
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }

    if (_uorg === '') {
        _uorg = null;
    }
    var Marcador = {

        intNumMarcador: _NumMarcador,
        strDesMarcador: _desc,
        intIdUniOrg: _uorg,
        intTipoFunc: _TipoFunc,
        intTipoMarcad: _TipoMarcador,  // Aún no se sabe de que campo o de donde se sacará PENDIENTE
        bitTipoComu: _TipoComu,
        strNumIP: _NumIp,
        intNumPuerto: _IntNumPuerto,
        strMarcadCampo1: _camp1,
        strMarcadCampo2: _camp2,
        strMarcadCampo3: _camp3,
        strMarcadCampo4: _camp4,
        strMarcadCampo5: _camp5,
        bitFlActivo: _activo,
        intIdMarcador: _idMarc,

    }
    $.post(
        '/Organizacion/ActualizarMarcador',
        { objDatos: Marcador },
        (response) => {
            console.log(response);
            if (response.type !== '') {

                if (response.type === 'success') {
                    messageResponseMix({ type: response.type, message: response.message }, titulo_)//añadido 04/08/2021
                    TablaMarcador();
                    $('.form-hide-Marcador').hide();
                } else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Marcador';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        messageResponseMix({ type: response.type, message: response.message }, titulo_)//añadido 04/08/2021
                    }
                    return;
                }

            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

});

$('#filActiMarc').on('change', function () {
    validarSession()
    TablaMarcador();
});

$('#btn-new-Marcador').on('click', function () {
    validarSession()
    $('#btn-update-marcador').hide();
    $('#btn-save-change-marcador').show();

    $('.form-hide-Marcador').show();
    $.post(
        '/Organizacion/NuevoMarcador',
        {},
        (response) => {
            if (response !== '') {
                $('.form-hide-Marcador .x_content').empty();
                $('.form-hide-Marcador .x_content').html(response);
                $('.form-hide-Marcador').show();
                BuscarUnidades();
                switcheryLoad();//checked verde

                var txtIP = 'strNumIP';
                var txtdes = 'strDesMarcador';

                $.post(
                    '/Organizacion/ListarCaracteresMax',
                    { strMaestro: 'TGMARCADOR' },
                    (response) => {
                        response.forEach(element => {
                            if (element.strColumnName == txtIP) {
                                $('#Valip').children("input").attr('maxlength', element.intMaxLength);
                            } if (element.strColumnName == txtdes) {
                                $('#Valdes').children("input").attr('maxlength', element.intMaxLength);
                            }
                        });
                    });

            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
});
$('#btn-cancel-marcador').on('click', function () {
    validarSession()
    $('.form-hide-Marcador').hide();
});
$('#filtroMarc').on('change', function () {
    validarSession()
    TablaMarcador();
})


//#endregion MANT. MARCADOR










/**------------------------------------------------------*//*ln_30840_all*/
/**28. Mantenimientos Servicio (de sisfood) */
/**------------------------------------------------------*//*ln_32888_all*/
/***************28.1-Servicio****************/
//#region MANT. SERVICIO

//Combos Servicios
function CombosServicios() {

    $.post(
        '/Personal/ListarCombosPersonal_',
        { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'COMEDOR', strSubGrupo: 'TIPOSERV' },// HG 13.03.21 
        (response) => {
            $('#TipServicio').empty()
            $('#TipServicios').empty();
            //Combo Tipo de Servicio para los Filtros
            $('#TipServicio').append('<option value="0">Todos</option>');
            //Combo Tipo de Servicio para Editar/Nuevo
            $('#TipServicios').append('<option value="0" >Seleccione</option>');

            response.forEach(element => {
                $('#TipServicio').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
                $('#TipServicios').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
            });

        });


    $.post(
        '/Personal/ListarCombosPersonal_',
        { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'COMEDOR', strSubGrupo: 'TIPOMENU' }, // HG 13.03.21
        (response) => {
            $('#TipMenu').empty();
            $('#TipMenus').empty();
            //Tipo de Menú Encabezado Principal
            $('#TipMenu').append('<option value="0">Todos</option>');
            // Tipo de Menú Editar/Nuevo
            $('#TipMenus').append('<option  value="0">Seleccione</option>');
            response.forEach(element => {
                $('#TipMenu').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
                $('#TipMenus').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
            });

        });

    $.post(
        '/Personal/ListarCombosPersonal_',
        { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'COMEDOR', strSubGrupo: 'CLASE' },
        (response) => {
            $('#ClaseServFiltro').empty();
            $('#ClaseServ').empty();
            $('#ClaseServFiltro').append('<option value="0">Todos</option>');
            $('#ClaseServ').append('<option  value="0">Seleccione</option>');
            response.forEach(element => {
                $('#ClaseServFiltro').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
                $('#ClaseServ').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
            });
        });
    $.post(
        '/Personal/ListarCombosPersonal_',
        { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'COMPLEM', strSubGrupo: 'CATEG' },
        (response) => {
            $('#CategSC').empty();
            $('#CategSC').append('<option  value="0">Seleccione</option>');
            response.forEach(element => {
                $('#CategSC').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
            });
        });

}



//===============================================================================================44251
//=============================== FUNCION CombosListarPersonalTipoUM() ==========================fclpt
//===============================================================================================
//function CombosListarPersonalTipoUM() {
//}

$('#filActi').on('change', function () {
    TablaServicios();
});

$('#TipMenu').on('change', function () {
    TablaServicios();
});

$('#TipServicio').on('change', function () {
    TablaServicios();
});

$('#filtro').on('change', function () {
    TablaServicios();
});
//añadido 18.03.2021
$('#ClaseServFiltro').on('change', function () {
    TablaServicios();
});

//===============================================================================================44270
//=============================== FUNCION TablaServicios() ======================================fts   
//===============================================================================================
var _varTablaServicios;
function TablaServicios() {
    validarSession();//AÑADIDO HG 22.04.2021
    var Activo = $('#filActi option:selected').val();
    var Descipción = $('#filtro').val();
    var TipServicio = $('#TipMenu option:selected').val();
    var TipMenu = $('#TipServicio option:selected').val();
    var iClase = $('#ClaseServFiltro option:selected').val(); //18.03.2021
    var SesionMovi = {
        IntIdMenu: 'M0305',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }

    //Inicio de código para solucionar observación 15.1   HG 24.02.2021
    $.ajax({
        url: '/Asistencia/GetTablaServicio',
        type: 'POST',
        //data: { objSession: SesionMovi, IntActivoFilter: Activo, strfilter: Descipción, intfiltrojer1: TipMenu, intfiltrojer2: TipServicio },
        data: { objSession: SesionMovi, IntActivoFilter: Activo, strfilter: Descipción, intfiltrojer1: TipMenu, intfiltrojer2: TipServicio, intfiltroClase: iClase, intUso: 0 }, //modificado 18.03.2021
        beforeSend: function () {
            $.blockUI({
                css: {
                    border: 'none',
                    padding: '15px',
                    backgroundColor: '#000',
                    '-webkit-border-radius': '10px',
                    '-moz-border-radius': '10px',
                    opacity: .5,
                    color: '#fff'
                },
                message: 'Procesando...'
            });
        },


        success: function (response) { //===========================INI

            if (typeof _varTablaServicios !== 'undefined') {
                _varTablaServicios.destroy();
            }

            _varTablaServicios = $('#tablaservicio').DataTable({
                data: response,
                columns: [
                    { data: 'strCoServicio' },
                    { data: 'strDesServicio' },
                    { data: 'strDesClase' },//añadido 18.03.2021
                    { data: 'strDesTipServicio' }, //Aqui por error se ha invertido el orden de strDesTipServicio y strDesTipMenu
                    { data: 'strDesTipMenu' },
                    { data: 'strDesEstado' },
                    {
                        sortable: false,
                        "render": (data, type, item, meta) => {
                            let intIdServicio = item.intIdServicio;
                            let strDesServicio = item.strDesServicio;
                            return `<button class="btn btn-success btn-xs btn-edit" dataid="${intIdServicio}" ><i class="fa fa-pencil"></i> Editar </button> 
                                           <button class="btn btn-primary btn-xs btn-delete" dataid="${intIdServicio}" des_data="${strDesServicio}" data="${item}" ><i class="fa fa-trash-o"></i> Eliminar </button>`;
                        }
                    },
                    { data: 'intIdServicio' }
                ],
                lengthMenu: [10, 25, 50],
                order: [],
                responsive: true,
                language: _datatableLanguaje,
                columnDefs: [
                    {
                        targets: [7],
                        visible: false,
                        searchable: false
                    }
                ],
                dom: 'lBfrtip',
            });


            $('#tablaservicio  tbody').on('click', 'tr button.btn-delete', function () {
                let ServicioId = $(this).attr("dataid")
                let Descripcion = $(this).attr("des_data")
                if (!isNaN(ServicioId)) {
                    intentEliminarServicio(ServicioId, Descripcion)
                }
            });
        },
        complete: function () {
            $.unblockUI();
        }
    });

    //Fin de código para solucionar observación 15.1   HG 24.02.2021
}


$('#tablaservicio  tbody').on('click', 'tr button.btn-edit', function () {
    validarSession();//AÑADIDO HG 22.04.2021
    let ServicioId = $(this).attr("dataid")
    if (!isNaN(ServicioId)) {
        CamposAdicionalesServicio();//añadido 22.09.2021
        editarServicio(ServicioId)
    }
});

//===============================================================================================44387
//=============================== FUNCION intentEliminarServicio() ==============================fies
//===============================================================================================
function intentEliminarServicio(ServicioId, Descripcion) {
    validarSession();//AÑADIDO HG 22.04.2021
    swal({
        title: "Eliminar Servicio",
        text: "¿Está seguro de eliminar el Servicio ''<strong>" + Descripcion + "</strong>''?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí, eliminar",
        cancelButtonText: "No, cancelar",
    }).then(function (isConfirm) {
        if (isConfirm) {
            yesEliminaServicio(ServicioId);
        } else {
            //swal("Cancelado", "La Operación fue cancelada", "error");
        }
    });
}

//===============================================================================================44408
//=============================== FUNCION  yesEliminaServicio() =================================fies
//===============================================================================================
function yesEliminaServicio(ServicioId) {
    validarSession();//AÑADIDO HG 22.04.2021
    var SesionMovi = {
        IntIdMenu: 'M0305',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }
    $.post(
        '/Asistencia/EliminarServicio',
        { objSession: SesionMovi, intIdServicio: ServicioId },
        (response) => {
            console.log(response);
            if (response.type !== '') {
                var tipo = 'Eliminado!';
                if (response.type === 'error')
                    tipo = 'NO SE PUEDE ELIMINAR EL REGISTRO';
                swal(tipo, response.message, response.type);

                if (response.type === 'success')
                    $('.form-hide-servicio').hide();
                TablaServicios();
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}


//===============================================================================================44440
//=============================== BOTON NUEVO Servicio ==========================================bnser Nuevo Servicio
//===============================================================================================
$('#btn-new-servicio').on('click', function () {
    validarSession();//AÑADIDO HG 22.04.2021
    CamposAdicionalesServicio();
    $('.form-hide-servicio').hide();
    $('#txtCoServicio').val('');
    $('#txtDescServicio').val('');
    $('#btn-save-change-servicio').hide();
    $('#btn-save-change-servicio').show();
    $('#btn-update-servicio').hide();
    $('#JerOrG').html('');
    $('#JerOrG').val(0); // GRUPO EMPRESARIAL:val(1)
    $('#JerOrG').append('<option value="0">Seleccione</option>');
    $('#UndOrG').attr('disabled', true);//estaba como true
    $('#UndOrG').html('');
    $('#UndOrG').append('<option value="0">Seleccione</option>');
    $('#TipServicios').val(0);//$('#TipServicios').val(1133);//Desayuno:124 //comentado 18.03.2021
    $('#TipMenus').val(0);//$('#TipMenus').val(1130);// Económico:121//comentado 18.03.2021
    $('#DivTipServicios').show();//AÑADIDO 18.03.2021
    $('#DivTipMenus').show();//AÑADIDO 18.03.2021
    $('#ClaseServ').val(0);//AÑADIDO 18.03.2021
    $('#CategSC').val(0);//AÑADIDO 20.03.2021

    //$('#Change_state').html();
    //$('#Change_state').html('<input type="checkbox" class=" js-switch" id="Activ_Serv" checked style="float:right;" /> Activo');
    //$('#Change_state').iCheck('check');
    //switcheryLoad(); //Debe ir despues del append

    $('#11').html('<label id="_lbl_">Activo</label> <input type = "checkbox" id = "Activ_Serv" class= "js-switch" checked /><script>switcheryLoad();</script >');


    $('#ConCosto').iCheck('uncheck');


    $.post(
        '/Organizacion/ListarCaracteresMax',//'/Proceso/MaestroMaxCaracteres',
        { strMaestro: 'TCSERVICIO' },
        (response) => {
            response.forEach(element => {
                if (element.strColumnName == 'strCoServicio') {
                    $('#' + element.strColumnName + '').empty();
                    $('#' + element.strColumnName + '').append('<label>Código (*)</label><input type = "text" class= "form-control" id = "txtCoServicio" placeholder = "Código" maxlength="' + element.intMaxLength + '" onkeypress="validarCodigoAll(event)"" ><div id="notifry_error" style="background-color:#4CA4DE;color:white;text-align:center;"></div>');
                } else if (element.strColumnName == 'strDesServicio') {
                    $('#' + element.strColumnName + '').empty();

                    $('#' + element.strColumnName + '').append('<label>Descripción (*)</label><input type = "text" class= "form-control" id = "txtDescServicio" placeholder = "Descripción" maxlength="' + element.intMaxLength + '"  onkeypress="validarDescripcionAll(event)"><div id="notifry_errordes" style="background-color:#4CA4DE;color:white;text-align:center;"></div>');
                } else if (element.strColumnName == 'strCoExporta') {
                    $('#' + element.strColumnName + '').empty();

                    $('#' + element.strColumnName + '').append('<label>Código Externo </label><input type = "text" class= "form-control" id = "txtCoExterno" placeholder = "Codigo Externo" maxlength="' + element.intMaxLength + '" onkeypress="validarCodigoAll(event)" ><div id="notifry_errorexp" style="background-color:#4CA4DE;color:white;text-align:center;"></div>');
                    $("#txtCoServicio").keyup(function () {
                        $('#notifry_error').html('');
                        document.getElementById("txtCoServicio").style.borderColor = "#CCCCCC";
                    });
                    $("#txtDescServicio").keyup(function () {
                        $('#notifry_errordes').html('');
                        document.getElementById("txtDescServicio").style.borderColor = "#CCCCCC";
                    });

                }

            });


        });

    $.post(
        '/Personal/ListarCombosPersonal_',
        { strEntidad: 'TGMONEDA', intIdFiltroGrupo: 0, strGrupo: 'D', strSubGrupo: '' },
        (response) => {
            $('#Moneda').html('');
            $('#Moneda').append('<option value="0">Seleccione</option>');

            response.forEach(element => {
                $('#Moneda').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
            });
            $('.form-hide-servicio').show();
        });

    $('#strMontoCosto').html('');
    $('#strMontoCosto').append('<label>Monto del Costo (*) </label><input class= "form-control" id="txtMontoCosto" placeholder="0.00"' +
        'type = "number" onkeypress = "return filterFloat(event,this);" maxlength = "6" min="0.01" max="999.99" step=".01">');

    if ($('#ConCosto').is(':checked') == true) {
        $('#Moneda').val(0);//$('#Moneda').val(1); // PEN 1, USD 2, EUR 3   //movido y modificado 18.03.2021
        $('#Money').show();
        $('#TipMoney').show();
        $('#div-contenedor-con-costo').show();
    }
    else if ($('#ConCosto').is(':checked') == false) {
        $('#Moneda').val(0);//$('#Moneda').val(1); // PEN 1, USD 2, EUR 3   //movido y modificado 18.03.2021
        $('#Money').hide();
        $('#TipMoney').hide();
        $('#div-contenedor-con-costo').hide();
    };

    $('#ConCosto').on('ifChanged', function () {
        if ($('#ConCosto').is(':checked') == true) {
            $('#Moneda').val(0);       // 0 es el "Seleccionar" del combo
            $('#txtMontoCosto').val(); // Estaba en 0 pero debe estar vacío
            $('#Money').show();
            $('#TipMoney').show();
            $('#div-contenedor-con-costo').show();
        }
        else if ($('#ConCosto').is(':checked') == false) {
            $('#Money').hide();
            $('#TipMoney').hide();
            $('#Moneda').val(0);
            $('#txtMontoCosto').val(''); //valor vacio del campo para que no lleve nada a la BD
            $('#div-contenedor-con-costo').hide();
        }
    });
});

//AÑADIDO 18.03.2021
$('#ClaseServ').on('change', function () {
    validarSession();//AÑADIDO HG 22.04.2021
    //OCULTAR O MOSTRAR TIPO SERVICIO Y TIPO MENU
    var CodClase = $('#ClaseServ').val();
    if (CodClase == 1 || CodClase == 0) {
        //Servicio: Mostrar
        $('#TipServicios').val(0);
        $('#TipMenus').val(0);
        $('#CategSC').val(0);
        $('#DivCategSC').hide();
        $('#DivTipServicios').show();
        $('#DivTipMenus').show();
    } else {
        //Complementario: No Mostrar
        $('#TipServicios').val(0);
        $('#TipMenus').val(0);
        $('#CategSC').val(0);
        $('#DivTipServicios').hide();
        $('#DivTipMenus').hide();
        $('#DivCategSC').show();
    }
});

$('#btn-cancel-servicio').on('click', function () {
    $('.form-hide-servicio').hide();
});

//===============================================================================================44550
//=============================== BOTON GUARDAR Servicio =======================================bgser nuevo servicio
//===============================================================================================
$('#btn-save-change-servicio').on('click', function () {
    var titulo_ = "Nuevo Servicio";
    validarSession();//AÑADIDO HG 22.04.2021
    var _activo = $('#Activ_Serv').is(':checked');
    var _codigo = $('#txtCoServicio').val();
    var _desc = $('#txtDescServicio').val();

    var _codExt = $('#txtCoExterno').val();
    if (_codExt == '') { // Si no hay nada
        _codExt = ' ';   // Lo toma como vacio
    }
    var _MonCosto = $('#txtMontoCosto').val();
    //var _UndOrg = $('#UndOrG  option:selected').val(0);

    var _UndOrg = 0; //Por qué cuandos se asigna "0" manda el mensaje de "null"? //Modificado el 18.03.2021
    var _Clase = $('#ClaseServ  option:selected').val();//añadido 18.03.2021
    var _TipMenu = $('#TipMenus  option:selected').val();  //Invertido para controlar error
    var _TipServ = $('#TipServicios  option:selected').val();//Invertido para controlar error
    var _TipMone = $('#Moneda  option:selected').val();
    var _CategSC = $('#CategSC  option:selected').val();//añadido 20.03.2021
    var _ChckCosto = $('#ConCosto').is(':checked');
    var _camp1 = '';
    var _camp2 = '';
    var _camp3 = '';
    var _camp4 = '';
    var _camp5 = '';

    //Inicio de código para solucionar observación 15.3   HG 24.02.2021
    if (_codigo === '') {
        messageResponseMix({ type: 'info', message: 'Ingrese un Código' }, titulo_)
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        $("#txtCoServicio").effect("highlight", { color: '#b8c5d275' }, 2500);
        return;
    }

    if (_desc === '') {
        messageResponseMix({ type: 'info', message: 'Ingrese una Descripción' }, titulo_)
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        $("#txtDescServicio").effect("highlight", { color: '#b8c5d275' }, 2500);
        return;
    }
    //Fin de código para solucionar observación 15.3   HG 24.02.2021
    if (_Clase == 0) {
        messageResponseMix({ type: 'info', message: 'Seleccione una Clase' }, titulo_)
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        $("#ClaseServ").effect("highlight", { color: '#b8c5d275' }, 3000);
        return;
    }

    //modificado 18.03.2021
    if (_Clase == 1) {
        if (_TipServ == 0) {
            messageResponseMix({ type: 'info', message: 'Seleccione un Tipo de Servicio' }, titulo_)
            $('#notifry_error').html('');
            $('#notifry_errordes').html('');
            $("#TipServicios").effect("highlight", { color: '#b8c5d275' }, 3000);
            return;
        }

        if (_TipMenu == 0) {
            messageResponseMix({ type: 'info', message: 'Seleccione un Tipo de Menú' }, titulo_)
            $('#notifry_error').html('');
            $('#notifry_errordes').html('');
            $("#TipMenus").effect("highlight", { color: '#b8c5d275' }, 3000);
            return;
        }

    } else {
        if (_CategSC == 0) {
            messageResponseMix({ type: 'info', message: 'Seleccione una Categoría para el Servicio' }, titulo_)
            $('#notifry_error').html('');
            $('#notifry_errordes').html('');
            $("#CategSC").effect("highlight", { color: '#b8c5d275' }, 3000);
            return;
        }
    }

    if (_ChckCosto == true) {
        if (_TipMone == 0) {
            messageResponseMix({ type: 'info', message: 'Seleccione un Tipo de Moneda' }, titulo_)
            $("#Moneda").effect("highlight", { color: '#b8c5d275' }, 3000);
            return;
        }
        if (_MonCosto == 0) {
            messageResponseMix({ type: 'info', message: 'Ingrese un Monto de Costo' }, titulo_)
            $("#txtMontoCosto").effect("highlight", { color: '#b8c5d275' }, 3000);
            return;
        }
    }

    var Servicio = {
        strCoServicio: _codigo,
        strDesServicio: _desc,
        strCoExporta: _codExt,
        intIdUniOrg: _UndOrg,
        intIdTipServ: _TipServ,
        intIdTipoMenu: _TipMenu,
        monCostoServ: _MonCosto,
        intIdMoneda: _TipMone,
        strServicioCampo1: _camp1,
        strServicioCampo2: _camp2,
        strServicioCampo3: _camp3,
        strServicioCampo4: _camp4,
        strServicioCampo5: _camp5,
        bitFlActivo: _activo,
        intClase: _Clase,//añadido 18.03.2021
        intCategSC: _CategSC,//añadido 20.03.2021
    }

    var SesionMovi = {
        IntIdMenu: 'M0305',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }

    $.post(
        '/Asistencia/IUServicio',
        { ObjConcepto: Servicio, intTipoOperacion: 1, objSession: SesionMovi },
        (response) => {
            console.log(response);
            if (response.type !== '') {
                if (response.type === 'success') {
                    messageResponseMix({ type: response.type, message: response.message }, titulo_)
                    $('.form-hide-servicio').hide();
                    TablaServicios();
                } else {
                    if (response.type === 'error') {
                        var nomMantemiento = 'Servicio';
                        var campo = 'txtCoServicio';
                        var msj = response.message;
                        var response = "info";
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                        document.getElementById("txtCoServicio").style.borderColor = "#3498dbe0";
                        return;
                    } else {
                        if (response.type === 'info') {
                            var nomMantemiento = 'Empresa';
                            var campo = 'txtDescServicio';
                            var msj = response.message;
                            var response = "info";
                            var deta = 'notifry_errordes';
                            document.getElementById("txtDescServicio").style.borderColor = "#3498dbe0";
                            INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                            return;
                        } else {
                            messageResponseMix({ type: 'info', message: response.message }, titulo_)
                        }
                    }
                }
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

});


//===============================================================================================44700
//=============================== BOTON ACTUALIZAR Servicio =====================================baser actualizar servicio
//===============================================================================================
$('#btn-update-servicio').on('click', function () {
    validarSession();//AÑADIDO HG 22.04.2021
    var titulo_ = "Actualización Servicio";
    var _activo = $('#Activ_Serv').is(':checked');
    var _codigo = $('#txtCoServicio').val();
    var _desc = $('#txtDescServicio').val();
    var _codExt = $('#txtCoExterno').val();
    if (_codExt == '') { // Si no hay nada
        _codExt = ' ';   // Lo toma como vacio
    }
    var _MonCosto = $('#txtMontoCosto').val();
    //var _UndOrg = $('#UndOrG  option:selected').val();
    var _UndOrg = 0; //Para controlar este campo, <option value="1">DESK</option>//select * from TGUNIDORG
    var _Clase = $('#ClaseServ  option:selected').val();//añadido 18.03.2021
    var _TipServ = $('#TipServicios  option:selected').val();
    var _TipMenu = $('#TipMenus  option:selected').val();
    var _TipMone = $('#Moneda  option:selected').val();
    var _CategSC = $('#CategSC  option:selected').val();//añadido 20.03.2021

    var _IdServ = $('#IntIdServicio').val();
    var _ChckCosto = $('#ConCosto').is(':checked');
    var _camp1 = '';
    var _camp2 = '';
    var _camp3 = '';
    var _camp4 = '';
    var _camp5 = '';

    //Inicio de código para solucionar observación 15.3   HG 24.02.2021
    if (_codigo === '') {
        messageResponseMix({ type: 'info', message: 'Ingrese un Código' }, titulo_)
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        $("#txtCoServicio").effect("highlight", { color: '#b8c5d275' }, 2500);
        return;
    }

    if (_desc === '') {
        messageResponseMix({ type: 'info', message: 'Ingrese una Descripción' }, titulo_)
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        $("#txtDescServicio").effect("highlight", { color: '#b8c5d275' }, 2500);
        return;
    }
    //Fin de código para solucionar observación 15.3   HG 24.02.2021
    if (_Clase == 0) {
        messageResponseMix({ type: 'info', message: 'Seleccione una Clase' }, titulo_)
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        $("#ClaseServ").effect("highlight", { color: '#b8c5d275' }, 3000);
        return;
    }

    //modificado 18.03.2021
    if (_Clase == 1) {
        if (_TipServ == 0) {
            messageResponseMix({ type: 'info', message: 'Seleccione un Tipo de Servicio' }, titulo_)
            $('#notifry_error').html('');
            $('#notifry_errordes').html('');
            $("#TipServicios").effect("highlight", { color: '#b8c5d275' }, 3000);
            return;
        }

        if (_TipMenu == 0) {
            messageResponseMix({ type: 'info', message: 'Seleccione un Tipo de Menú' }, titulo_)
            $('#notifry_error').html('');
            $('#notifry_errordes').html('');
            $("#TipMenus").effect("highlight", { color: '#b8c5d275' }, 3000);
            return;
        }

    } else {
        if (_CategSC == 0) {
            messageResponseMix({ type: 'info', message: 'Seleccione una Categoría para el Servicio' }, titulo_)
            $('#notifry_error').html('');
            $('#notifry_errordes').html('');
            $("#CategSC").effect("highlight", { color: '#b8c5d275' }, 3000);
            return;
        }
    }

    if (_ChckCosto == true) {
        if (_TipMone == 0) {
            messageResponseMix({ type: 'info', message: 'Seleccione un Tipo de Moneda' }, titulo_)
            $("#Moneda").effect("highlight", { color: '#b8c5d275' }, 3000);
            return;
        }
        if (_MonCosto == 0) {
            messageResponseMix({ type: 'info', message: 'Ingrese un Monto de Costo' }, titulo_)
            $("#txtMontoCosto").effect("highlight", { color: '#b8c5d275' }, 3000);
            return;
        }
    }


    var Servicio = {
        strCoServicio: _codigo,
        strDesServicio: _desc,
        strCoExporta: _codExt,
        intIdUniOrg: _UndOrg,
        intIdTipServ: _TipServ,
        intIdTipoMenu: _TipMenu,
        monCostoServ: _MonCosto,
        intIdMoneda: _TipMone,
        strServicioCampo1: _camp1,
        strServicioCampo2: _camp2,
        strServicioCampo3: _camp3,
        strServicioCampo4: _camp4,
        strServicioCampo5: _camp5,
        bitFlActivo: _activo,
        intIdServicio: _IdServ,
        intClase: _Clase,//añadido 18.03.2021
        intCategSC: _CategSC,//añadido 20.03.2021
    }

    var SesionMovi = {
        IntIdMenu: 'M0305',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }

    $.post(
        '/Asistencia/IUServicio',
        { ObjConcepto: Servicio, intTipoOperacion: 2, objSession: SesionMovi },
        (response) => {
            console.log(response);
            if (response.type !== '') {

                if (response.type === 'success') {
                    messageResponseMix({ type: response.type, message: response.message }, titulo_)
                    $('.form-hide-servicio').hide();
                    //$("#hg_loader_espera").hide().show().delay(1600).fadeOut();
                    TablaServicios();
                } else {
                    if (response.type === 'error') {
                        var nomMantemiento = 'Servicio';
                        var campo = 'txt_cod_Empresa';
                        var msj = response.message;
                        var response = "info";
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                        document.getElementById("txtCoServicio").style.borderColor = "#3498dbe0";
                        return;

                    } else {

                        if (response.type === 'info') {
                            document.getElementById("txtDescServicio").style.borderColor = "#3498dbe0";
                            var nomMantemiento = 'Empresa';
                            var campo = 'txt_desc_Empresa';
                            var msj = response.message;
                            var response = "info";
                            var deta = 'notifry_errordes';
                            INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                            return;
                        } else {
                            messageResponseMix({ type: 'info', message: response.message }, titulo_)
                        }

                    }
                }

            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

});


//TIPO DE SERVICIO: Desayuno 1133, Almuerzo 1134, Cena 1135
//===============================================================================================44988
//=============================== FUNCION editarServicio(ServicioId)=============================feser editar servicio
//===============================================================================================
function editarServicio(ServicioId) {
    $('.form-hide-servicio').hide();
    //$("#hg_loader_espera").hide().show().delay(1300).fadeOut();
    $('#btn-save-change-servicio').hide();
    $('#btn-update-servicio').show();
    $('#JerOrG').val(0);
    $('#JerOrG').append('<option value="0">Seleccione</option>');
    $('#UndOrG').attr('disabled', true);
    $('#UndOrG').val(0);
    $('#Moneda').val(0);
    //añadido 13.04.2021 HG
    $('#notifry_error').html('');
    $('#notifry_errordes').html('');

    //Hebert_28.10.2020_12:47:45_Servicio 
    //Cargar Combo Moneda (*) "id="Moneda"" del FORMULARIO EDITAR
    $('#strMontoCosto').html("");
    //Inicio de código para solucionar observación 15.5   HG 24.02.2021
    $('#strMontoCosto').append('<label>Monto del Costo (*) </label><input class= "form-control" id="txtMontoCosto" placeholder="0.00"' +
        'type = "number" onkeypress="return filterFloat(event,this);"  maxlength = "6" min="0.01" max="999.99" step=".01">');
    //Fin de código para solucionar observación 15.5   HG 24.02.2021
    //Cargar Combo Moneda (*)  de id="Moneda" del formulario Editar
    $.post(
        '/Personal/ListarCombosPersonal_',
        { strEntidad: 'TGMONEDA', intIdFiltroGrupo: 0, strGrupo: 'D', strSubGrupo: '' },
        (response) => {

            $('#Moneda').html('');
            $('#Moneda').append('<option value="0">Seleccione</option>');

            response.forEach(element => {
                $('#Moneda').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

            });


            //Inicio de código para solucionar observación 15.4   HG 24.02.2021
            //Mostrar/Esconder "CON COSTO" Hebert_27.10.2020_18:02:09_44616 
            if ($('#ConCosto').is(':checked') == true) {
                //$('#Moneda').append('<option value="0">Seleccione</option>');
                $('#Moneda').val(0);
                $('#txtMontoCosto').val();
                $('#Money').show();
                $('#TipMoney').show();
                //Esconder Borde del div: div-contenedor-con-costo
                $('#div-contenedor-con-costo').show();
            }
            else if ($('#ConCosto').is(':checked') == false) {
                $('#Money').hide();
                $('#TipMoney').hide();
                $('#Moneda').val('');
                $('#txtMontoCosto').val(''); //valor vacio del campo
                $('#div-contenedor-con-costo').hide();
            }


            $('#ConCosto').on('ifChanged', function () {
                if ($('#ConCosto').is(':checked') == true) {
                    $('#Moneda').val(0);
                    $('#txtMontoCosto').val();
                    $('#Money').show();
                    $('#TipMoney').show();
                    $('#div-contenedor-con-costo').show();
                }
                else if ($('#ConCosto').is(':checked') == false) {
                    $('#Money').hide();
                    $('#TipMoney').hide();
                    $('#Moneda').val('');
                    $('#txtMontoCosto').val(''); //valor vacio del campo
                    $('#div-contenedor-con-costo').hide();
                }

            });

            //Fin de código para solucionar observación 15.4   HG 24.02.2021


            var SesionMovi = {
                IntIdMenu: 'M0305',
                intIdUsuario: idUsuar,
                intIdSoft: idSoftw,
                intIdSesion: intIdSe
            }

            $.post(
                '/Asistencia/ObtenerRegistroServicio',
                { objSession: SesionMovi, intIdServicio: ServicioId },
                (response) => {

                    $('#txtCoServicio').val('');
                    $('#txtDescServicio').val('');
                    $('#txtCoExterno').val('');
                    $('#txtMontoCosto').val('');
                    $('#Moneda').val(0);
                    $('#TipServicios').val(0);
                    $('#ClaseServ').val(0);
                    $('#TipMenus').val(0);
                    $('#CategSC').val(0);
                    $('#IntIdServicio').val('');

                    response.forEach(element => {
                        $('#txtCoServicio').val(element.strCoServicio);
                        $('#txtDescServicio').val(element.strDesServicio);
                        $('#txtCoExterno').val(element.strCoExporta);

                        if (element.intIdMoneda == 0) {
                            $('#ConCosto').iCheck('uncheck');
                            $('#Money').hide();
                            $('#TipMoney').hide();
                            $('#div-contenedor-con-costo').hide();
                        } else if (element.intIdMoneda !== 0) {
                            $('#ConCosto').iCheck('check');
                            $('#Money').show();
                            $('#TipMoney').show();
                            $('#txtMontoCosto').val(element.monCostoServ);
                            $('#Moneda').val(element.intIdMoneda);
                            $('#div-contenedor-con-costo').show();
                        }
                        $('#ClaseServ').val(element.intClase);//añadido 18.03.2021
                        //añadido 18.03.2021
                        if (element.intClase == 1) {
                            $('#TipServicios').val(element.intIdTipServ);
                            $('#TipMenus').val(element.intIdTipoMenu);
                            $('#DivTipServicios').show();
                            $('#DivTipMenus').show();
                            $('#DivCategSC').hide();
                        } else {
                            $('#TipServicios').val(0);
                            $('#TipMenus').val(0);
                            $('#CategSC').val(element.intCategSC);
                            $('#DivTipServicios').hide();
                            $('#DivTipMenus').hide();
                            $('#DivCategSC').show();
                        }

                        $('#IntIdServicio').val(element.intIdServicio);

                        //if (element.bitFlActivo == true) {
                        //    $('#Change_state').html('<input type="checkbox" class="js-switch" id="Activ_Serv" checked style="float:right;" />Activo');

                        //} else if (element.bitFlActivo == false) {
                        //    $('#Change_state').html('<input type="checkbox" class="js-switch" id="Activ_Serv"  style="float:right;" /> Activo');
                        //}
                        //switcheryLoad();
                        if (element.bitFlActivo == true) {
                            $('#11').html('<label id="_lbl_">Activo</label> <input type = "checkbox" id = "Activ_Serv" class= "js-switch" checked /><script>switcheryLoad();</script >');
                        } else if (element.bitFlActivo == false) {
                            $('#11').html('<label id="_lbl_">Inactivo</label> <input type = "checkbox" id = "Activ_Serv" class= "js-switch" /><script>switcheryLoad();</script >');
                        }

                        $('.form-hide-servicio').show();
                    });
                });
        });//Añadido miercoles10: El combo monedas tiene que cargarse antes que el registro

}


//===============================================================================================42285
//=============================== FUNCION CamposAdicionalesServicio() ===========================fcaser
//===============================================================================================
function CamposAdicionalesServicio() {
    validarSession();//AÑADIDO HG 22.04.2021
    $.post(
        '/Organizacion/CamposAdicionales',
        { strEntidad: 'TCSERVICIO' },
        (response) => {

            console.log(response);
            $('#DivCamposAdicionalesServicio').empty();
            response.forEach(element => {

                $('#DivCamposAdicionalesServicio').append(
                    ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                    + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="' + element.strTitulo.replace("(*)", "") + '" maxlength="255"/>' + '</div></div>');


            });
        });
}

//#endregion MANT. SERVICIO




/***********************************************************/
/********* 28.2- Mantenimiento Regla de Negocio Comedor (Sisfood) **********/
/***********************************************************/
//#region MANT. REGLA DE NEGOCIO DE COMEDOR
var _varTablaRegNeg;
var _varTablaConfigHECD;
var _varTablaConfigHECDD;
var _varTablaSubsiDet;
var detalleSubs = new Array();
var _varTablaServReg;
var _varTablaServDet;
var detalleServ = new Array();

$('#ActvRegNegCom').on('change', function () {
    TablarReglaNegCom();
});
$('#BusqRegNeg').on('change', function () {
    TablarReglaNegCom();
});
$('#cboJerarRN').on('change', function () {
    TablarReglaNegCom();
});
//--------------------------------------
$('#TipMenuRN').on('change', function () {
    TablaRegNegComServ();
});
$('#TipServicioRN').on('change', function () {
    TablaRegNegComServ();
});
$('#filtro2').on('change', function () {
    TablaRegNegComServ();
});

// BUSCAR ELEMENTOS DE TODAS LAS FILAS DE LA TABLA SERVICIOS - COPIADO DESDE HTML
// input id = "filtro2"
//$("#filtro2").on('change', function () {
//    var value = $(this).val().toLowerCase();
//    $("#TablaServ tr").filter(function () {
//        $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
//        $("#TablaServ tr:first").show();//Mostrar siempre  el primer row
//    });
//});


//===============================================================================================
//=============================== FUNCION CombosReglaDeNegociocOM() =============================

function CombosReglaDeNegociocOM(data = null) {
    //ComboJerarquia formulario - modificado 23.08.2021
    $.post(
        '/Personal/ListarCombos',
        {
            intIdMenu: 1,
            strEntidad: 'TGJERARQORG',
            intIdFiltroGrupo: 0,
            strGrupo: 'DEPEN_MAESTROS',
            strSubGrupo: '',
        },
        (response) => {
            $('#cboJerarquia').empty();
            if (response.length > 1) {
                $('#cboJerarquia').append('<option value="0" selected>Seleccione</option>');
            }
            response.forEach(element => {
                $('#cboJerarquia').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
            });
            if (data != null) {
                //Combo Unid Organizacional Editar
                $("#cboJerarquia").val(data.intextra1);
                $.post(
                    '/Asistencia/LlenarTipoUM',
                    { strEntidad: 'TGUNIDORG', intIdFiltroGrupo: data.intextra1, strGrupo: 'JERAR', strSubGrupo: 'HORARIO' },//modificado 03.08.2021 añadiendo filtro subgrupo igual que el mantenimiento de Horario
                    (response) => {
                        $('#cboUndOrg').empty();
                        $('#cboUndOrg').attr('disabled', false);

                        var cantreg = response.length;

                        if (cantreg == 0) {
                            $('#cboUndOrg').append('<option value="0" selected>No existen Registros</option>');
                            $('#cboUndOrg').attr('disabled', true);
                        }
                        else if (cantreg !== 0) {
                            response.forEach(element => {
                                $('#cboUndOrg').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
                            });
                        }
                        if (data != null) {
                            $("#cboUndOrg").val(data.intextra2);
                        }

                    });
            }
        });


    //Combo UnidadOrganizacional
    $('#cboJerarquia').on('change', function () {
        var IntidJerar = $('#cboJerarquia option:selected').val();

        $.post(
            '/Asistencia/LlenarTipoUM',
            { strEntidad: 'TGUNIDORG', intIdFiltroGrupo: IntidJerar, strGrupo: 'JERAR', strSubGrupo: 'HORARIO' },//modificado 03.08.2021 añadiendo filtro subgrupo igual que el mantenimiento de Horario
            (response) => {
                $('#cboUndOrg').empty();
                $('#cboUndOrg').attr('disabled', false);

                var cantreg = response.length;

                if (cantreg == 0) {
                    $('#cboUndOrg').append('<option value="0" selected>No existen Registros</option>');
                    $('#cboUndOrg').attr('disabled', true);
                }
                else if (cantreg !== 0) {
                    response.forEach(element => {
                        $('#cboUndOrg').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
                    });
                }
            });
    });



    //Combo Subsisio "TipoSubs"
    $.post(
        '/Asistencia/LlenarTipoUM',
        { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'SUBSIDIO', strSubGrupo: 'TIPO' },
        (response) => {
            var cantreg = response.length;
            if (cantreg == 0) {
                $('#TipoSubs').empty(0);
                $('#TipoSubs').append('<option selected>No existen Registros</option>');
                $('#TipoSubs').attr('disabled', true);
            }
            else if (cantreg !== 0) {
                $('#TipoSubs').empty(0);
                //$('#TipoSubs').append('<option value="0" >Seleccione</option>');
                response.forEach(element => {
                    $('#TipoSubs').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
                });
            }
        });


    //Combo Empresa (*) "#IdEmp" - Combo En Regla De Negocio Comedor - Formulario Con Subsidio
    $.post(
        '/Asistencia/LlenarTipoUM',
        { strEntidad: 'TGEMPRESA', intIdFiltroGrupo: 0, strGrupo: 'TGEMPRESA', strSubGrupo: 'RN' },
        (response) => {
            $('#IdEmp').empty();
            response.forEach(element => {
                $('#IdEmp').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
            });
        });


    //Inicio de código para solucionar observación 1.3  HG 01.03.2021 CERRADO 01.03.2021 09:23AM

    $.post(
        '/Asistencia/LlenarTipoUM',
        { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'RN', strSubGrupo: 'TIPOMENU' },// HG 13.03.21 //martes16 strGrupo: de COMEDOR lo cambio por RN
        (response) => {

            //1er Combo: En el primer paso, con SUSIDIOS
            var cantreg = response.length;

            if (cantreg == 0) {
                $('#TipoMen').empty();
                $('#TipoMen').attr('disabled', true);
            }
            else if (cantreg !== 0) {
                $('#TipoMen').empty();
                response.forEach(element => {
                    $('#TipoMen').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
                });
            }

            //2do Combo: En el paso DOS, para filtrar los servicios
            $('#TipServicioRN').empty();
            response.forEach(element => {
                $('#TipServicioRN').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
            });
        });

    //Fin de código para solucionar observación 1.3  HG 01.03.2021

    //Combo Tipo de Servicio "TipMenuRN" - Cargar al EDITAR Regla de Negocio
    $.post(
        '/Personal/ListarCombosPersonal_',
        { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'RN', strSubGrupo: 'TIPOSERV' }, // HG 13.03.21 - Mantenimiento Regla de Negocio
        (response) => {
            $('#TipMenuRN').empty();
            $('#TipServiciosRNC').empty();
             response.forEach(element => {
                $('#TipMenuRN').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
                $('#TipServiciosRNC').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
            });
        });



    $.post(
        '/Personal/ListarCombosPersonal_',
        { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'CONSUMO', strSubGrupo: 'PERIODO' },
        (response) => {
            $('#TipControlConsumo').empty();
            //$('#TipControlConsumo').append('<option value="0">Seleccionar</option>');
            $('#TipControlConsumo').append('');
            response.forEach(element => {
                $('#TipControlConsumo').append('<option value="' + element.intidTipo + '" >' + element.strDeTipo + '</option>');
            });

        });
}

//===============================================================================================
//=============================== LISTADO PRINCIPAL =============================================tabla regla de negocio
/* Esta función se encarga de realizar el listado principal, hace el uso de otra 
funcion "cardarDatosRegNegCom" al momento de presionar EDITAR y del "intentEliminarRegNegCom"*/

function TablarReglaNegCom() {
    validarSession();//AÑADIDO HG 22.04.2021 
    var filtroActivo = $('#ActvRegNegCom').val();
    var strfiltro = $('#BusqRegNeg').val();
    var filtrojer = $('#cboJerarRN').val();

    //Inicio de código para solucionar observación 1.1  HG 24.02.2021
    $.ajax({
        url: '/Asistencia/GetTablaFiltradaReglaNegocioComedor',
        type: 'POST',
        data: { IntActivoFilter: filtroActivo, strfilter: strfiltro, intfiltrojer: filtrojer},
        beforeSend: function () {
            $.blockUI({
                css: {
                    border: 'none',
                    padding: '15px',
                    backgroundColor: '#000',
                    '-webkit-border-radius': '10px',
                    '-moz-border-radius': '10px',
                    opacity: .5,
                    color: '#fff'
                },
                message: 'Procesando...'
            });
        },
        success: function (response) {
            if (typeof _varTablaRegNeg !== 'undefined') {
                _varTablaRegNeg.destroy();
            }

            _varTablaRegNeg = $('#TablaRegCom').DataTable({
                data: response,
                columns: [
                    { data: 'strCoRegNeg' },
                    { data: 'strDesRegNeg' },
                    { data: 'strJerOrg' }, //añadido 23.09.2021
                    { data: 'strDescUO' }, //añadido 23.09.2021
                    //{ data: 'strTipoConsu' },
                    { data: 'strContSub' },
                    { data: 'strEstado' },//modificado 23.09.2021
                    {
                        sortable: false,
                        "render": (data, type, item, meta) => {
                            let IntIdReglaNeg = item.intIdReglaNeg;
                            let StrDesRegNeg = item.strDesRegNeg;
                            return `<button class="btn btn-success btn-xs btn-edit" dataid="${IntIdReglaNeg}" ><i class="fa fa-pencil"></i> Editar </button> 
                                           <button class="btn btn-primary btn-xs btn-delete" dataid="${IntIdReglaNeg}" des_data="${StrDesRegNeg}" data="${item}" ><i class="fa fa-trash-o"></i> Eliminar </button>`;
                        }
                    },
                    { data: 'intIdReglaNeg' }
                ],
                lengthMenu: [10, 25, 50],
                order: [],
                responsive: true,
                language: _datatableLanguaje,
                columnDefs: [//ocultar y definir columnas                  
                    {
                        targets: [7],
                        visible: false,
                        searchable: false
                    }
                ],
                dom: 'lBfrtip',
            });

            $('#TablaRegCom  tbody').on('click', 'tr button.btn-delete', function () {
                validarSession();//AÑADIDO HG 22.04.2021

                let RegNegComId = $(this).attr("dataid")
                let RegNegComDes = $(this).attr("des_data")
                if (!isNaN(RegNegComId)) {
                    intentEliminarRegNegCom(RegNegComId, RegNegComDes)
                }

            });

        },
        complete: function () {
            $.unblockUI();
        }
    });
}

//Inicio de código para solucionar observación 1.17  HG 25.02.2021 
$('#TablaRegCom  tbody').on('click', 'tr button.btn-edit', function () {
    validarSession();//AÑADIDO HG 22.04.2021
    let RegNegComId = $(this).attr("dataid")

    if (!isNaN(RegNegComId)) {
        cardarDatosRegNegCom(RegNegComId)
    }

});
//Fin de código para solucionar observación 1.17 HG 25.02.2021


//BOTON INTENT ELIMINAR - Regla de Negocio Comedor
function intentEliminarRegNegCom(RegNegComId, RegNegComDes) {
    validarSession();//AÑADIDO HG 22.04.2021
    swal({
        title: "Eliminar Regla de Negocio de Comedor",
        text: "¿Está seguro de eliminar la regla   ''<strong>" + RegNegComDes + "</strong>''?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí, eliminar",
        cancelButtonText: "No, cancelar",
    }).then(function (isConfirm) {
        if (isConfirm) {
            yesEliminaReglaCom(RegNegComId);
        } else {
            //swal("Cancelado", "La Operación fue cancelada", "error");
        }
    });
}


//FUNCION ELIMINAR - Regla de Negocio Comedor=
function yesEliminaReglaCom(RegNegComId) {
    validarSession();//AÑADIDO HG 22.04.2021

    $.post(
        '/Asistencia/EliminarReglaNegocioCom',
        { intIdReglaNeg: RegNegComId },
        (response) => {
            console.log(response);
            if (response.type !== '') {
                var tipo = 'Eliminado!';
                if (response.type === 'error')
                    tipo = 'NO SE PUEDE ELIMINAR EL REGISTRO';
                swal(tipo, response.message, response.type);

                if (response.type === 'success')
                    $('.form-hide-ReglaNegocio-Comedor').hide();
                    TablarReglaNegCom();

            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}


//CARGAR DATOS A EDITAR - Regla de Negocio Comedor
function cardarDatosRegNegCom(RegNegComId) {
    TablaRegNegComServ();
    //-------------------------------------------------------------------------------------------------------------
    //Añadido HG 12.04.21
    $.post(
        '/Organizacion/ListarCaracteresMax',//'/Proceso/MaestroMaxCaracteres',
        { strMaestro: 'TGREGLANEG' },
        (response) => {
            response.forEach(element => {
                if (element.strColumnName == 'strCoRegNeg') {
                    $('#' + element.strColumnName + '').empty();
                    $('#' + element.strColumnName + '').append('<label>Código (*)</label><input type = "text" class= "form-control" id = "txt_cod_RegNegCom" placeholder = "Código" maxlength="' + element.intMaxLength + '" onkeypress="validarCodigoAll(event)" ><div id="notifry_error" style="background-color:#4CA4DE;color:white;text-align:center;"></div>');
                } else if (element.strColumnName == 'strDesRegNeg') {
                    $('#' + element.strColumnName + '').empty();
                    $('#' + element.strColumnName + '').append('<label>Descripción (*)</label><input type = "text" class= "form-control" id = "txt_desc_RegNegCom" placeholder = "Descripción" maxlength="' + element.intMaxLength + '"  onkeypress="validarDescripcionAll(event)"><div id="notifry_errordes" style="background-color:#4CA4DE;color:white;text-align:center;"></div>');
                }
            });
            //=============================================================================
            var detalleSubs1 = new Array();
            $('#primer_sitch_form').click();
            $('.form-hide-ReglaNegocio-Comedor').hide();
            $('#txt_cod_RegNegCom').val('');
            $('#txt_desc_RegNegCom').val('');
            $('#notifry_error').html('');
            $('#notifry_errordes').html('');
            $('#TipControlConsumo').val(0);
            $('#txtCantConsumo').val('');
            $('#tiempo_tol').val('00:00');
            $('#tiempo_tol').val('00:00');
            $('#ConSubsi').iCheck('uncheck');
            $('#TipoSubs').val(0);
            $('#pocent_general').val(1);

            detalleSubs.splice(0, detalleSubs.length);
            detalleServ.splice(0, detalleServ.length);

            $('body').append('<style>.wizard_horizontal ul.wizard_steps li a.done:before, ' +
                '.wizard_horizontal ul.wizard_steps li a.done .step_no { ' +
                ' background: #73879C; color: #fff; ' +
                ' }</style >'
            )

            $('#segundo_sitch_form').on('click', function () {
                var g = 0;
                $('#span_02').click(function () {
                    g = 1;
                });

                if (g == 1) {
                }
                else {
                    $('body').append('<style>.wizard_horizontal ul.wizard_steps li a.done:before, ' +
                        '.wizard_horizontal ul.wizard_steps li a.done .step_no { ' +
                        ' background: #1ABB9C; color: #fff; ' +
                        ' }</style >'
                    )

                }
            });


            //TablarReglaNegServDet();//SÍ USADO Y SÍ IMPLEMENTADO//COMENTADO MIERCOLES24---para nuevo y editar //COPIADO DESDE HTML 23.09.2021
            var d = new Date();
            var n = d.getTime();

            class TGREGLANEG_SUBSIDIO_DET {
                constructor(IntIdReglaNeg, IntIdEmp, nmPorcentaje, bitFlEliminado, intIdUsuarReg, dttFeReg, intIdUsuarModif, dttFeModif, intidtipoMenu, clave) {

                    this.IntIdReglaNeg = IntIdReglaNeg  //almacena el IdEmpresa
                    this.IntIdEmp = IntIdEmp            //Descripcion de la Empresa
                    this.nmPorcentaje = nmPorcentaje
                    this.bitFlEliminado = bitFlEliminado
                    this.intIdUsuarReg = intIdUsuarReg  //se almacena idTipoMenu reutilizar
                    this.dttFeReg = dttFeReg
                    this.dttFeModif = dttFeModif
                    this.intidtipoMenu = intidtipoMenu  //se almacena la descripcion del TipoMenu
                    this.clave = n
                }
            }

            //--------MÉTODOS----



            //1.  CABECERA
            $.post(
                '/Asistencia/ObtenerRegistroReglaNegocioCom',
                { intIdReglaNeg: RegNegComId },
                (response) => {
                    response.forEach(element => {
                        $('#txt_cod_RegNegCom').val(element.strCoRegNeg);
                        $('#txt_desc_RegNegCom').val(element.strDesRegNeg);
                        CombosReglaDeNegociocOM(element)//añadido 22.09.2021


                        if (element.bitFlPrincipal === true) { //añadido 22.09.2021
                            $('#checkPrincipal').iCheck('check')
                        } else {
                            $('#checkPrincipal').iCheck('UNcheck')
                        }
                        if (element.bitFlActivo == true) {
                            $('#11').html('<label id="_lbl_">Activo</label> <input type = "checkbox" id = "chk-activo-RegNegCom" class= "js-switch" checked /><script>switcheryLoad();</script >');
                        } else if (element.bitFlActivo == false) {
                            $('#11').html('<label id="_lbl_">Inactivo</label> <input type = "checkbox" id = "chk-activo-RegNegCom" class= "js-switch" /><script>switcheryLoad();</script >');
                        }
                        //añadido para editar 23.09.2021
                        $.post(
                            '/Organizacion/CamposAdicionales',
                            { strEntidad: 'TGREGLANEG' },
                            (response) => {
                                $('#DivCamposAdicionalesPeriodo').empty();
                                response.forEach(element => {
                                    $('#DivCamposAdicionalesPeriodo').append(
                                        ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                                        + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="' + element.strTitulo.replace("(*)", "") + '" maxlength="255"/>' + '</div></div>');
                                });

                                if (element.strRegNegCampo1 != '' || element.strRegNegCampo1 != null) {
                                    $('#' + element.strNomCampo + '').val(element.strRegNegCampo1);
                                }
                                if (element.strRegNegCampo2 != '' || element.strRegNegCampo2 != null) {
                                    $('#' + element.strNomCampo + '').val(element.strRegNegCampo2);
                                }
                                if (element.strRegNegCampo3 != '' || element.strRegNegCampo3 != null) {
                                    $('#' + element.strNomCampo + '').val(element.strRegNegCampo3);
                                }
                                if (element.strRegNegCampo4 != '' || element.strRegNegCampo4 != null) {
                                    $('#' + element.strNomCampo + '').val(element.strRegNegCampo4);
                                }
                                if (element.strRegNegCampo5 != '' || element.strRegNegCampo5 != null) {
                                    $('#' + element.strNomCampo + '').val(element.strRegNegCampo5);
                                }

                            });
                        //añadido para editar 23.09.2021 - fin
                    });
                });


            //2.  DETALLE
            $('#IdRegNegCom').val(RegNegComId)

            // inicio --------------------------------
            $.post(
                '/Asistencia/ObtenerRegistroReglaNegocioDetCom',
                {intIdReglaNeg: RegNegComId },
                (response) => {

                    response.forEach(element => {

                        if (element.strCoReglaDet == 'TIPPERIODO_CONSUMO') { //Diario, Periodico
                            if (element.strValorRegla > 0) {
                                $('#TipControlConsumo').val(element.strPosibValor);
                            }
                        }

                        if (element.strCoReglaDet == 'NUMCONSUMO_MAXGENERAL') {
                            $('#txtCantConsumo').val(element.strPosibValor);
                        }

                        if (element.strCoReglaDet == 'TOLERANCIA_CONSUMO') {
                            $('#tiempo_tol').val(element.strPosibValor);
                        }


                        //lunes01
                        var ValorTipoSubs = '';
                        if (element.strCoReglaDet == 'TIPO_SUBSIDIO_CONSUMO') { //

                            

                            if (element.strPosibValor > 0) {
                                $('#TipoSubs').val(element.strPosibValor);
                                $('#ConSubsi').iCheck('check');
                                ValorTipoSubs = element.strValorRegla;


                                //evaluar por strcotipo=strValor  asignar intitipo =strPosibValor
                                if (ValorTipoSubs == '01') //01	GE	GENERAL	SUBSIDIO
                                {
                                    $('#PGeneral').show();
                                    $('#PEmpresa').hide();
                                    $("#porcentaje_general").show();

                                }

                                else if (ValorTipoSubs == '02') //02	ES	POR EMPRESA	SUBSIDIO
                                {
                                    $('#TipoSubs').val('128');
                                    $('#PEmpresa').show();
                                    $('#PGeneral').hide();
                                    $("#porcentaje_general").hide();
                                }
                                else {
                                    $('#PEmpresa').hide();
                                    $('#PGeneral').hide();
                                }

                            } else {

                                $('#ConSubsi').iCheck('uncheck');
                            }
                        }


                        if ($('#ConSubsi').is(':checked') == true) {
                            $('#Subsidio').show();
                        } else {
                            $('#Subsidio').hide();
                        }
                        if (element.strCoReglaDet == 'PORCENT_SUBSIDIO_CONSUMO') {
                            $('#pocent_general').val(element.strPosibValor);
                        }
                    });
                    $('.form-hide-ReglaNegocio-Comedor').show();
                });

            //fin--------------------------------

            //CARGAR SUBSISIOS
            cargarSubsidiosEditar(RegNegComId);

            //CARGAR SERVICIOS AÑADIDOS
            cargarServiciosAgregadosEditar(RegNegComId)

            //-------------------------------------------
        });
    //-------------------------------------------------------------------------------------------------------------

    //$('#TipMenuRN').on('change', function () {
    //    TablarReglaNegComSub();
    //});

    //$('#TipServicioRN').on('change', function () {
    //    TablarReglaNegComSub();
    //});

    //$('#filtro2').on('change', function () {
    //    TablarReglaNegComSub();
    //});

    $('#btn-update-ReglaNegocioCom').show();
    $('#btn-save-change-ReglaNegocioCom').hide();

    //------------------
    $('#ConSubsi').on('change', function () {
        validarSession();//AÑADIDO HG 22.04.2021 
        if ($('#ConSubsi').is(':checked') == true) {
            $('#Subsidio').show();
        } else if ($('#ConSubsi').is(':checked') == false) {
            $('#Subsidio').hide();
            //INICIO DE SOLUCION OBSERVACION  11 HG 29.03.2021 // 06.04.2021
            detalleSubs = [];
            //FIN DE SOLUCION OBSERVACION 11  HG 29.03.2021
        }
    });


    $('#TipoSubs').on('change', function () {
        validarSession();//AÑADIDO HG 22.04.2021 
        if ($('#TipoSubs').val() == 127) {
            $('#PGeneral').show();
            $('#PEmpresa').hide();
            $("#porcentaje_general").show();
        }
        else if ($('#TipoSubs').val() == 128) {
            $('#PEmpresa').show();
            $('#PGeneral').hide();
            $("#porcentaje_general").hide();
        }
        else if ($('#TipoSubs').val() == 0) {
            $('#PEmpresa').hide();
            $('#PGeneral').hide();
        }
    });

}


//SERVICIOS AÑADIDOS/AGREGADOS - Regla de Negocio Comedor
function cargarServiciosAgregadosEditar(RegNegComId) {


    //SERVICIOS AÑADIDOS
    $.post(
        '/Asistencia/ObtenerRegistroReglaNegocioServCom',
        { intIdReglaNeg: RegNegComId },
        (response) => {
            console.log(response);


            if (typeof _varTablaServDet !== 'undefined') {
                _varTablaServDet.destroy();
            }

            _varTablaServDet = $('#TablaDetServ').DataTable({
                data: response,
                //bFilter: true,
                //bJQueryUI: true,
                //bFilter: true,
                //bInfo: true,
                columns: [
                    { data: 'strCoServicio' },                            //IntIdReglaNeg  
                    { data: 'strDesServicio' },                           //intIdServicio  
                    { data: 'strDesTipoServicio' },                        //strCoServicio  
                    { data: 'strDesMenu' },                                //strDesServicio 
                    {
                        sortable: false,
                        "render": (data, type, item, meta) => {
                            //let intidServicio = item.intidServicio;
                            let intidServicio = item.strCoServicio; //modificado 02.03.2021 para borrar por codigo de servicio.
                            //ventana editar.
                            return `<button onclick='quitarFilaDeTablaServicio(this,"${intidServicio}")' class="btn btn-danger  btn-xs btn-delete" dataidServ="${intidServicio}" ><i class="fa fa-trash-o"></i> Quitar</button>  `;

                        }
                    }
                ],
                lengthMenu: [5, 10, 20],
                order: [],
                responsive: true,
                language: _datatableLanguaje,
                columnDefs: [//ocultar y definir columnas    
                    {
                    }
                ],
                dom: 'lBfrtip',
            });

            class TGREGLANEG_SERVICIO_DET {
                constructor(intidServicio, strcoServicio, strDesServicio, StrTipServ, StrTipMenu) {

                    this.intidServicio = intidServicio
                    this.strcoServicio = strcoServicio
                    this.strDesServicio = strDesServicio
                    this.StrTipServ = StrTipServ
                    this.StrTipMenu = StrTipMenu

                }

            }
            response.forEach(element => {
                var IntIdServ = element.intIdServicio;
                var strCoServ = element.strCoServicio;
                var StrDesServ = element.strDesServicio;
                var strDesTipSer = element.strDesTipoServicio;
                var strDesTipMenw = element.strDesMenu;
                detalleServ.push(new TGREGLANEG_SERVICIO_DET(IntIdServ, strCoServ, StrDesServ, strDesTipSer, strDesTipMenw));
            });
        });
}


//CARGAR SUSIDIOS A EDITAR - Regla de Negocio Comedor
function cargarSubsidiosEditar(RegNegComId) {

    //3.  SUBSIDIOS
    $.post(
        '/Asistencia/ObtenerRegistroReglaNegocioSubsiCom',
        { intIdReglaNeg: RegNegComId },
        (response) => {
            console.log(response);

            if (typeof _varTablaSubsiDet !== 'undefined') {
                _varTablaSubsiDet.destroy();
            }
            //dibujando tabla inferior
            _varTablaSubsiDet = $('#TablaDetReg').DataTable({
                data: response,//detalleSubs,
                columns: [
                    { data: 'IntIdEmp' },      //idempresa
                    { data: 'strDeEmpresa' },  //descripcion empresa
                    { data: 'strDeTipoServ' },  //Añadido 'Tipo de Servicios' martes16---revisar sp 
                    { data: 'strDeTipoMenu' }, //descripcion menu
                    { data: 'nmPorcentaje' },
                    {
                        sortable: false,
                        "render": (data, type, item, meta) => {
                            let IntIdEmp = item.IntIdEmp;
                            let strIdEmp = item.strDeEmpresa;
                            //ventana EDITAR
                            return `<button onclick='quitarFilaDeTablaSubsidio(this,"${strIdEmp}")' class="btn btn-danger  btn-xs btn-delete" dataidServ="${IntIdEmp}"><i class="fa fa-trash-o"></i> Quitar</button>  `;

                        }
                    }
                ],
                lengthMenu: [10, 25, 50],
                order: [],
                responsive: true,
                language: _datatableLanguaje,
                columnDefs: [//ocultar y definir columnas    
                    {
                        targets: [0],
                        visible: false,//true //Inicio y Fin de código para solucionar observación 1.7  HG 24.02.2021
                        searchable: false
                    }
                ],
                dom: 'lBfrtip',
            });

            //llenar objeto array con el objeto "response".        
            var d = new Date();
            var n = d.getTime();

            class TGREGLANEG_SUBSIDIO_DET {
                constructor(IntIdReglaNeg, IntIdEmp, nmPorcentaje, bitFlEliminado, intIdUsuarReg,
                    dttFeReg, intIdUsuarModif, dttFeModif, intidtipoMenu, clave) {

                    this.IntIdReglaNeg = IntIdReglaNeg      //almacena el IdEmpresa
                    this.IntIdEmp = IntIdEmp           //Descripcion de la Empresa
                    this.nmPorcentaje = nmPorcentaje
                    this.bitFlEliminado = bitFlEliminado
                    this.intIdUsuarReg = intIdUsuarReg      //se almacena idTipoMenu reutilizar
                    this.dttFeReg = dttFeReg           //this.dttFeReg       = dttFeReg
                    this.intIdTipServ = intIdUsuarModif    //ID TIPO DE SERVICIO      HG 16.03.21
                    this.strDescServi = dttFeModif         //TEXTO TIPO DE SERVICIO   HG 16.03.21
                    this.intidtipoMenu = intidtipoMenu      //se almacena la descripcion del TipoMenu
                    this.clave = n
                }
            }

            //Martes16.03
            response.forEach(element => {

                var IntIdEmp_ = element.IntIdEmp;
                var strDeEmpresa_ = element.strDeEmpresa;
                var intidtipoMenu_ = element.intidtipoMenu;
                var nmPorcentaje_ = element.nmPorcentaje;
                var strDeTipoMenu_ = element.strDeTipoMenu;
                var intIdServicio_ = element.intIdTipServ;
                var strDeServicio_ = element.strDeTipoServ;

                detalleSubs.push(new TGREGLANEG_SUBSIDIO_DET(IntIdEmp_, strDeEmpresa_, nmPorcentaje_, 0, intidtipoMenu_, d, intIdServicio_, strDeServicio_, strDeTipoMenu_, n));
            });
        });
}


//CAMPOS ADICIONALES REGLA DE NEGOCIO - Regla de Negocio Comedor
function CamposAdicionalesReglaNegocio() {
    validarSession();//AÑADIDO HG 22.04.2021
    $.post(
        '/Organizacion/CamposAdicionales',
        { strEntidad: 'TGREGLANEG' },
        (response) => {
            $('#DivCamposAdicionalesPeriodo').empty();
            response.forEach(element => {
                $('#DivCamposAdicionalesPeriodo').append(
                    ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                    + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="' + element.strTitulo.replace("(*)", "") +'" maxlength="255"/>' + '</div></div>');
            });
        });
}


//===============================================================================================
/*      TABLA        :   FORMULARIO     :         METODO           :          ARREGLO 
2.- "#TablaDetReg"   :  Con Subsidio    :  TablarReglaNegComSub()  :  detalleSubs = new Array();*/
function quitarFilaDeTablaSubsidio(e, ide) {
    validarSession();//AÑADIDO HG 22.04.2021
    const FuncionArray = (element) => element.IntIdEmp === ide; //IntIdReglaNeg
    var index = detalleSubs.findIndex(FuncionArray);

    if (index > -1) {
        detalleSubs.splice(index, 1)
        $(e).parents('tr').remove(); //RETIRA LA FILA CON ESE ITEM DE LA TABLA
    } //RETIRA EL ITEM DEL ARRAY

}

//TABLA DE SUBSIDIOS AÑADIDOS ó AGREGADOS - #TablaDetReg con el Objeto "detalleSubs""
function TablarReglaNegComSub() {
    validarSession();//AÑADIDO HG 22.04.2021

    if (typeof _varTablaSubsiDet !== 'undefined') {
        _varTablaSubsiDet.destroy();
    }

    _varTablaSubsiDet = $('#TablaDetReg').DataTable({
        data: detalleSubs,
        columns: [

            { data: 'IntIdReglaNeg' }, //{ data: 'strCoEmp' },
            { data: 'IntIdEmp' },
            { data: 'strDescServi' },  //Añadido 'Tipo de Servicios'
            { data: 'intidtipoMenu' },
            { data: 'nmPorcentaje' },
            {
                sortable: false,
                "render": (data, type, item, meta) => {
                    //let IntIdReglaNeg = item.intIdReglaNeg; //No usado
                    let IntIdEmp = item.IntIdEmp;
                    //ventana nuevo
                    return `<button onclick='quitarFilaDeTablaSubsidio(this,"${IntIdEmp}")' class="btn btn-danger  btn-xs btn-delete" dataidServ="${IntIdEmp}"><i class="fa fa-trash-o"></i> Quitar</button>  `;

                }
            }

        ],
        lengthMenu: [10, 25, 50],
        order: [],//1, 'asc'
        responsive: true,
        language: _datatableLanguaje,
        columnDefs: [//ocultar y definir columnas  

            {
                targets: [0],
                visible: false,
                searchable: false
            }


        ],
        dom: 'lBfrtip',
    });

    //Esconde Cabecera de filtros
    $('#TablaDetReg_info').hide();
    $('#TablaDetReg_filter').hide();
    $('#TablaDetReg_length').hide();

    $('#TablaDetReg  tbody').on('click', 'tr button.btn-delete', function () {
        validarSession();//AÑADIDO HG 22.04.2021

        let RegNegComId = $(this).attr("dataid")
        let RegNegComDes = $(this).attr("des_data")

        if (!isNaN(RegNegComId)) {

            intentEliminarRegNegCom(RegNegComId, RegNegComDes)

        }

    });

}


//TABLA DE SERVICIOS A AÑADIR - LISTADO INICIAL - En el Paso Dos - De Título: "ListarServicios"
//===============================================================================================
/*Esta función se encarga de llenar a la tabla "#TablaServ" en el formulario NUEVO/EDITAR, 
al seleccionar SERVICIO. En dicho listado nos cargará de la BD los tipos de servicios, los cuales 
se deben agregar a la Cuarta tabla "TablaDetServ". */
function TablaRegNegComServ() {
    validarSession();//AÑADIDO HG 22.04.2021 
    var Activorn = 2;
    var Descipciónrn = $('#filtro2').val();
    var TipMenurn = $('#TipMenuRN option:selected').val();         //COMOBO FILTRO 1: Tipo de Menú: Económico, Ejecutivo y Dietético
    var TipServiciorn = $('#TipServicioRN option:selected').val(); //COMOBO FILTRO 2: Tipo de Servicio: desayuno, almuerzo, cena

    var SesionMovi = {
        IntIdMenu: 'M0305',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }

    $.post(
        '/Asistencia/GetTablaServicio',
        { objSession: SesionMovi, IntActivoFilter: Activorn, strfilter: Descipciónrn, intfiltrojer1: TipMenurn, intfiltrojer2: TipServiciorn, intfiltroClase: 0, intUso: 1 }, //modificado 18.03.2021
        (response) => {
            console.log(response);

            if (typeof _varTablaServReg !== 'undefined') {
                _varTablaServReg.destroy();
            }

            _varTablaServReg = $('#TablaServ').DataTable({
                data: response,
                columns: [
                    //Boton Añadir Agregar Servicios
                    { data: 'strCoServicio' },
                    { data: 'strDesServicio' },
                    { data: 'strDesTipServicio' },
                    { data: 'strDesTipMenu' },
                    {
                        sortable: false,
                        "render": (data, type, item, meta) => {
                            let IntIdServ = item.intIdServicio;
                            let strCoServ = item.strCoServicio;
                            let StrDesServ = item.strDesServicio;
                            let strDesTipSer = item.strDesTipServicio;
                            let strDesTipMen = item.strDesTipMenu;

                            return ` <label class="btn btn-primary btn-xs btn-añadir "  dataidServ="${IntIdServ}" ` +
                                `datacose="${strCoServ}" datadesse="${StrDesServ}" ` +
                                `datadestiser="${strDesTipSer}" datadestipmen="${strDesTipMen}" ` +
                                ` > Agregar </label>`;
                        }
                    }
                ],
                lengthMenu: [3, 5, 10],
                order: [1, 'asc'][2, 'asc'],
                responsive: true,
                language: _datatableLanguaje,
                fixedHeader: //true,
                {
                    header: true,
                    footer: true
                },
                columnDefs: [
                ],
                dom: 'lBfrtip',
            });
        });
}


//BOTON EDITAR - Regla de Negocio 
$('#TablaServ  tbody').on('click', 'tr .btn-añadir', function () {
    validarSession();//AÑADIDO HG 22.04.2021
    //Valida no duplicidad al añadir a la cuarta tabla
    let IntIdServ = $(this).attr("dataidServ")
    let strCoServ = $(this).attr("datacose")

    //console.log(IntIdServ);

    var refTab = document.getElementById("TablaDetServ")
    var ttl;

    //valida versus el codigo de servicio
    /*Loop todas las filas y columnas de la tabla SERVICIO y asignarle 
    alguna condición. Este FOR verifica el contenido de cada celda*/
    for (var i = 0; row = refTab.rows[i]; i++) {
        row = refTab.rows[i];
        for (var j = 0; col = row.cells[j]; j++) {
            var val_en_tabla = col.firstChild.nodeValue //obtener la primera columna
            console.log(val_en_tabla);
            if (val_en_tabla == strCoServ) {
                messageResponseMix({ type: 'info', message: 'El Servicio "' + val_en_tabla + '" ya fue agregado a la lista' }, 'Agregar Servicios')
                return;
            }
        }
    }

    //Si no encuentra coincidencia de duplicidad permite añadirlo y continua
    let StrDesServ = $(this).attr("datadesse")
    let strDesTipSer = $(this).attr("datadestiser")
    let strDesTipMenw = $(this).attr("datadestipmen")


    class TGREGLANEG_SERVICIO_DET {
        constructor(intidServicio, strcoServicio, strDesServicio, StrTipServ, StrTipMenu) {
            this.intidServicio = intidServicio
            this.strcoServicio = strcoServicio
            this.strDesServicio = strDesServicio
            this.StrTipServ = StrTipServ
            this.StrTipMenu = StrTipMenu
        }

    }

    detalleServ.push(new TGREGLANEG_SERVICIO_DET(IntIdServ, strCoServ, StrDesServ, strDesTipSer, strDesTipMenw));
    TablarReglaNegServDet();


});


//QUITAR FILA DE LA TABLA SERVICIOS
function quitarFilaDeTablaServicio(e, Id) {
    validarSession();//AÑADIDO HG 22.04.2021 

    //var idx = detalleServ.indexOf(Id);
    const FuncionArray = (element) => element.strcoServicio === Id;

    var index = detalleServ.findIndex(FuncionArray);
    //console.log(index);
    if (index > -1) {
        detalleServ.splice(index, 1)
        $(e).parents('tr').remove();
    }
}


//SERVICIOS AÑADIDOS/AGREGADOS - LISTADO - Servicio Detalle
//===============================================================================================
//=============================== FUNCION TablaReglaNegServDet() ================================ Regla de Negocio
/*Ésta función TablarReglaNegServDet() se encarga de llenar a la tabla "#TablaDetServ", quien 
recibe los servicios añadidos desde la tabla de listado de servicios "#TablaServ". Ambas tablas 
estan en el formulario de SERVICIOS uno encima del otro. 
Ésta cuarta tabla "#TablaDetServ" de este formulario es cargado desde la otra tabla: "#TablaServ" */
//var detalleServ1 = new Array();
function TablarReglaNegServDet() {
    validarSession();//AÑADIDO HG 22.04.2021
    if (typeof _varTablaServDet !== 'undefined') {
        _varTablaServDet.destroy();
    }


    _varTablaServDet = $('#TablaDetServ').DataTable({
        data: detalleServ,
        columns: [

            { data: 'strcoServicio' },
            { data: 'strDesServicio' },
            { data: 'StrTipServ' },
            { data: 'StrTipMenu' },
            {
                sortable: false,
                "render": (data, type, item, meta) => {
                    //let intidServicio = item.intidServicio;
                    let intidServicio = item.strcoServicio; //modificado 02.03.2021 para borrar por codigo de servicio.
                    //ventana nuevo.
                    return `<button onclick='quitarFilaDeTablaServicio(this,"${intidServicio}")' class="btn btn-danger  btn-xs btn-delete" dataidServ="${intidServicio}" ><i class="fa fa-trash-o"></i> Quitar</button>  `;

                }
            }
        ],
        lengthMenu: [4, 25, 50],
        order: [],
        responsive: true,
        language: _datatableLanguaje,
        columnDefs: [//ocultar y definir columnas    
            {
                //targets: [5],
                //visible: false,//true //Inicio y Fin de código para solucionar observación 1.7  HG 24.02.2021
                //searchable: false
            }
        ],
        dom: 'lBfrtip',
    });
}

$('#segundo_sitch_form').on('click', function () {
    validarSession();//AÑADIDO HG 22.04.2021 
    var g = 0;

    $('#span_02').click(function () {
        g = 1;
    });

    if (g == 1) {

    }

    else {

        //Colorea de NEGRO: #34495E , el otro es VERDE: #1ABB9C //GreenYellow //PLOMO:#73879C
        //$('body').append('<style>.wizard_horizontal ul.wizard_steps li a.selected:before, .step_no {background-color:#1ABB9C;}</style>');

        $('body').append('<style>.wizard_horizontal ul.wizard_steps li a.done:before, ' +
            '.wizard_horizontal ul.wizard_steps li a.done .step_no { ' +
            ' background: #1ABB9C; color: #fff; ' +
            ' }</style >'
        )

        TablaRegNegComServ();   //Sí está implementado ln_38220_js   
    }

});

//===============================================================================================
//=============================== BOTON NUEVO Regla de Negocio ================================== Nuevo Regla de Negocio
$('#btn-new-ReglaNegocioCom').on('click', function () {
    validarSession();//AÑADIDO HG 22.04.2021 
    CombosReglaDeNegociocOM(null)//añadido 22.09.2021
    //TablaRegNegComServ();
    //Limpiar tabla  SERVICIOS AGREGADOS y dibujar el html
    detalleSubs.splice(0, detalleSubs.length);
    detalleServ.splice(0, detalleServ.length);
    detalleServ = [];
    TablarReglaNegServDet(); //añadido 23.09.2021
    //var tablaDetServ = $('#TablaDetServ').DataTable();
 
    $('#checkPrincipal').iCheck('UNcheck')//añadido 22.09.2021
    //tablaDetServ
    //    .clear()
    //    .draw();

    $.post(
        '/Asistencia/ObtenerRegistroReglaNegocioDetCom',
        { intIdReglaNeg: 0 },
        (response) => {

            response.forEach(element => {

                if (element.strCoReglaDet == 'TIPPERIODO_CONSUMO') {
                    if (element.strValorRegla > 0) {
                        $('#TipControlConsumo').val(element.strPosibValor);
                    }
                }

                if (element.strCoReglaDet == 'NUMCONSUMO_MAXGENERAL') {

                    $('#txtCantConsumo').val(element.strPosibValor);
                }

                if (element.strCoReglaDet == 'TOLERANCIA_CONSUMO') {

                    $('#tiempo_tol').val(element.strPosibValor);
                }

                var ValorTipoSubs = '';
                if (element.strCoReglaDet == 'TIPO_SUBSIDIO_CONSUMO') {
                    $('#TipoSubs').val(element.strPosibValor);
                    if (element.strPosibValor > 0) {

                        $('#ConSubsi').iCheck('check');
                        ValorTipoSubs = element.strValorRegla;

                    } else {
                        $('#ConSubsi').iCheck('uncheck');
                    }
                }

                if ($('#ConSubsi').is(':checked') == true) {
                    $('#Subsidio').show();
                } else {
                    $('#Subsidio').hide();
                }
                if (element.strCoReglaDet == 'PORCENT_SUBSIDIO_CONSUMO') {

                    $('#pocent_general').val(element.strPosibValor);

                }


                //evaluar por strcotipo=strValor  asignar intitipo =strPosibValor
                if (ValorTipoSubs == '01') //01	GE	GENERAL	SUBSIDIO
                {
                    $('#PGeneral').show();
                    $('#PEmpresa').hide();
                }
                else if (ValorTipoSubs == '02') //02	ES	POR EMPRESA	SUBSIDIO
                {
                    $('#PEmpresa').show();
                    $('#PGeneral').hide();
                }
                else {
                    $('#PEmpresa').hide();
                    $('#PGeneral').hide();
                }

            });

            $('.form-hide-ReglaNegocio-Comedor').show();
        });

    //fin copia 25.02.2021 -Hebert


    //Puntualiza el form en el primer "a"
    $('#primer_sitch_form').click();
    $('.form-hide-ReglaNegocio-Comedor').hide();
    $('#11').html('<label id="_lbl_">Activo</label> <input type = "checkbox" id = "chk-activo-RegNegCom" class= "js-switch" checked /><script>switcheryLoad();</script >');

    //COLOR PLOMO
    $('body').append('<style>.wizard_horizontal ul.wizard_steps li a.done:before, ' +
        '.wizard_horizontal ul.wizard_steps li a.done .step_no { ' +
        ' background: #73879C; color: #fff; ' +
        ' }</style >'

    )


    CamposAdicionalesReglaNegocio();

    $('#notifry_error').val('');
    $('#notifry_errordes').val('');
    $('#btn-update-ReglaNegocioCom').hide();
    $('#btn-save-change-ReglaNegocioCom').show();
    $('#txt_cod_RegNegCom').val('');
    $('#txt_desc_RegNegCom').val('');

    var d = new Date();
    var n = d.getTime();


    //Reubicado HG 25.02.21
    $('#ConSubsi').on('change', function () {
        validarSession();//AÑADIDO HG 22.04.2021
        if ($('#ConSubsi').is(':checked') == true) {

            $('#Subsidio').show();

        } else if ($('#ConSubsi').is(':checked') == false) {

            $('#Subsidio').hide();

        }

    });

    $('#TipoSubs').on('change', function () {
        validarSession();//AÑADIDO HG 22.04.2021
        if ($('#TipoSubs').val() == 127) { //GENERAL

            $('#PGeneral').show();
            $('#PEmpresa').hide();
            $("#porcentaje_general").show();

        }
        else if ($('#TipoSubs').val() == 128) {//POR EMPRESA           

            $('#PEmpresa').show();
            $('#PGeneral').hide();
            $("#porcentaje_general").hide(); //Esconde el input porcentaje 

        }
        else if ($('#TipoSubs').val() == 0) {

            $('#PEmpresa').hide();
            $('#PGeneral').hide();

        }
    });


    //Constructor - Regla de Negocio - BOTON NUEVO
    class TGREGLANEG_SUBSIDIO_DET {
        constructor(IntIdReglaNeg, IntIdEmp, nmPorcentaje, bitFlEliminado, intIdUsuarReg, dttFeReg, intIdUsuarModif, dttFeModif, intidtipoMenu, clave) {

            this.IntIdReglaNeg = IntIdReglaNeg
            this.IntIdEmp = IntIdEmp
            this.nmPorcentaje = nmPorcentaje
            this.bitFlEliminado = bitFlEliminado
            this.intIdUsuarReg = intIdUsuarReg
            this.dttFeReg = dttFeReg
            this.dttFeModif = dttFeModif
            this.intidtipoMenu = intidtipoMenu
            this.clave = n
        }
    }

    //============================
    detalleSubs = [];
    ListasDeReglas = [];
    ListasDeSubs = [];
    ListasDeServ = [];

    $.post('/Organizacion/ListarCaracteresMax',//'/Proceso/MaestroMaxCaracteres',
        { strMaestro: 'TGREGLANEG' },
        (response) => {
            response.forEach(element => {

                if (element.strColumnName == 'strCoRegNeg') {
                    $('#' + element.strColumnName + '').empty();
                    $('#' + element.strColumnName + '').append('<label>Código (*)</label><input type = "text" class= "form-control" id = "txt_cod_RegNegCom" placeholder = "Código" maxlength="' + element.intMaxLength + '" onkeypress="validarCodigoAll(event)" ><div id="notifry_error" style="background-color:#4CA4DE;color:white;text-align:center;"></div>');
                    //$('#' + element.NombreColum + '').append('<label>Código (*)</label><input type = "text" class= "form-control" id = "txt_cod_RegNegCom" placeholder = "Código" maxlength="' + element.intNumero + '" onkeypress = "return avoidSpaceInput(event)" onkeyup="this.value=caracteresValidosConEspacios(this.value)" ><div id="notifry_error" style="background-color:#4CA4DE;color:white;text-align:center;"></div>');
                } else if (element.strColumnName == 'strDesRegNeg') {
                    $('#' + element.strColumnName + '').empty();

                    $('#' + element.strColumnName + '').append('<label>Descripción (*)</label><input type = "text" class= "form-control" id = "txt_desc_RegNegCom" placeholder = "Descripción" maxlength="' + element.intMaxLength + '"   onkeypress="validarDescripcionAll(event)"><div id="notifry_errordes" style="background-color:#4CA4DE;color:white;text-align:center;"></div>');
                }

            });

        });


    TablarReglaNegComSub();
    $('.form-hide-ReglaNegocio-Comedor').show(40);

});


//===============================================================================================
//============================== BOTON AGREGAR SUBSIDIO ========================================= Nuevo Regla de Negocio
$('#Reg_Subs').on('click', function () {
    validarSession();//AÑADIDO HG 22.04.2021
    var _Empresa = $('#IdEmp').val();
    var _Empresa_txt = $('#IdEmp option:selected').text();
    var _TipoMen = $('#TipoMen').val();
    var _TipoMen_txt = $('#TipoMen option:selected').text();
    var _Servic = $('#TipServiciosRNC').val();
    var _Servic_txt = $('#TipServiciosRNC option:selected').text();

    var _Porcen = $('#txtPorce').val();

    if (_Porcen === '') {
        messageResponseMix({ type: 'info', message: 'Tiene que Asignar un Porcentaje de Subsidio' }, 'Agregar Subsidios por Empresa')
        return;
    }

    else if (_Empresa == 0 && _Servic == 0 && _TipoMen == 0) {
        messageResponseMix({ type: 'info', message: 'Debe seleccionar una Empresa ó Tipo de Servicio ó Tipo de Menú' }, 'Agregar Subsidios por Empresa')
        return;
    }


    //Probar los Casos Posibles, Antes de darle click a AGREGAR
    else if (_Empresa > 0 || _Servic > 0 || _TipoMen > 0) {
        //CASO 01
        if (_Empresa == 0 && _Servic == 0 && _TipoMen > 0) {
        }
        //CASO 02
        else if (_Empresa == 0 && _Servic > 0 && _TipoMen == 0) {
        }

        //CASO 03
        else if (_Empresa == 0 && _Servic > 0 && _TipoMen > 0) {
        }

        //CASO 04, 05, 06 , 07
        else if (_Empresa > 0) {
            if (_Servic == 0) {
                //CASO 04
                if (_TipoMen == 0) {
                }

                //CASO 05
                else if (_TipoMen > 0) {
                }

            }
            else if (_Servic > 0) {
                //CASO 06
                if (_TipoMen == 0) {
                }

                //CASO 07
                else if (_TipoMen > 0) {
                }
            }
        }
    }//FIN DEL ELSE


    //console.log();
    var d = new Date();
    var n = d.getTime();

    //CONSTUCTOR - AGREGAR SUBSIDIO - FORMULARIO NUEVO
    class TGREGLANEG_SUBSIDIO_DET {
        constructor(
            IntIdReglaNeg,
            IntIdEmp,
            nmPorcentaje,
            bitFlEliminado,
            intIdUsuarReg,
            dttFeReg,
            intIdUsuarModif,
            dttFeModif,
            intidtipoMenu,
            clave
        ) {
            this.IntIdReglaNeg = IntIdReglaNeg
            this.IntIdEmp = IntIdEmp
            this.nmPorcentaje = nmPorcentaje
            this.bitFlEliminado = bitFlEliminado
            this.intIdUsuarReg = intIdUsuarReg
            this.dttFeReg = dttFeReg
            this.intIdTipServ = intIdUsuarModif    //ID TIPO DE SERVICIO      HG 16.03.21
            this.strDescServi = dttFeModif         //TEXTO TIPO DE SERVICIO   HG 16.03.21
            this.intidtipoMenu = intidtipoMenu
            this.clave = n

        }
    }

    //Validamos para que se repita el mismo Subsidio - FORMULARIO NUEVO - Regla de Negocio HG 16.03.21
    for (var i = 0; i < detalleSubs.length; i++) {
        if (detalleSubs[i].IntIdEmp == _Empresa_txt && detalleSubs[i].strDescServi == _Servic_txt && detalleSubs[i].intidtipoMenu == _TipoMen_txt) {
            messageResponseMix({ type: 'info', message: 'El Subsidio para :' + '' + _Empresa_txt + '|| ' + _Servic_txt + '|| ' + _TipoMen_txt + '' + ' ya fue agregado' }, 'Agregar Subsidios por Empresa')
            return;
        }
    }

    $.post(
        '/Asistencia/LlenarTipoUM',
        { strEntidad: 'TGEMPRESA', intIdFiltroGrupo: 0, strGrupo: 'TGEMPRESA', strSubGrupo: 'RN' },
        (response) => {
            response.forEach(element => {
                //EL TEXTO DE LA EMPRESA
                if (_Empresa == element.intidTipo) {
                    var _EmpresaDes = element.strDeTipo;

                    var _TipoDeServicio =
                        $.post(
                            '/Asistencia/LlenarTipoUM',
                            { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'RN', strSubGrupo: 'TIPOMENU' }, // HG 13.03.21 - Regla de Negocio
                            (response) => {
                                response.forEach(element2 => {
                                    if (_TipoMen == element2.intidTipo) {
                                        var _TipoMenDes = element2.strDeTipo;
                                        detalleSubs.push(new TGREGLANEG_SUBSIDIO_DET(_Empresa, _EmpresaDes, _Porcen, 0, _TipoMen, d, _Servic, _Servic_txt, _TipoMenDes, n));// d, _Servic_txt, d, _TipoMenDes, n));
                                        TablarReglaNegComSub();
                                    }
                                });
                                $('#IdEmp').val(0);
                                $('#TipoMen').val(0);
                                $('#TipServiciosRNC').val(0);
                                $('#txtPorce').val('');
                            });
                }
            });
        });
});


//===============================================================================================
//============================== BOTON GUARDAR Regla de Negocio ================================= bgrnec Guardar Regla de Negocio
$('#btn-save-change-ReglaNegocioCom').on('click', function () {
    validarSession();//AÑADIDO HG 22.04.2021
    var titulo_='Nueva Regla de Negocio'
    //Datos Cabecera
    var chckactivo = $('#chk-activo-RegNegCom').is(':checked');
    //var _UnidadOrg = 0 // 0;
    var _Dependencia = $('#cboJerarquia option:selected').val();
    var _UnidadOrg = $('#cboUndOrg option:selected').val();
    var _Codigo = $('#txt_cod_RegNegCom').val();
    var _Descripcion = $('#txt_desc_RegNegCom').val();
    var _strRegNegCampo1 = null;
    var _strRegNegCampo2 = null;
    var _strRegNegCampo3 = null;
    var _strRegNegCampo4 = null;
    var _strRegNegCampo5 = null;
    var _principal = $('#checkPrincipal').is(':checked'); //añadido 22.09.2021

    if (_Dependencia === '' || _Dependencia === '0') {
        messageResponseMix({ type: 'info', message: 'Seleccione una Dependencia Jerárquica' }, titulo_)
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }
    if (_UnidadOrg === '' || _UnidadOrg === '0') {
        messageResponseMix({ type: 'info', message: 'Seleccione una Unidad Organizacional' }, titulo_)
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }

    //HG 0.03.21 lunes01
    if ($('#ConSubsi').is(':checked') == true) {
        if ($('#TipoSubs').val() == 0) {
            messageResponseMix({ type: 'info', message: 'Seleccione un Tipo de Subsidio'}, titulo_)
            return;
        }
    }


    //HG 0.03.21 lunes01
    if ($('#TipControlConsumo').val() == 0) {
        messageResponseMix({ type: 'info', message: 'Seleccione un Tipo de Control de Consumo' }, titulo_)
        return;
    }


    //Constructor Regla de Negocio - BOTON GUARDAR
    class TGREGNEG_DET {
        constructor(intIdRegNegDet, intIdReglaNeg, strCoReglaDet, strDesReglaDet, strValorRegla, strPosibValor, bitFlActivo) {
            this.intIdRegNegDet = intIdRegNegDet
            this.intIdReglaNeg = intIdReglaNeg
            this.strCoReglaDet = strCoReglaDet
            this.strDesReglaDet = strDesReglaDet
            this.strValorRegla = strValorRegla
            this.strPosibValor = strPosibValor
            this.bitFlActivo = bitFlActivo
        }
    }

    var ListasDeReglas = new Array();
    var ListasDeSubsi = new Array();
    var ListasDeServ = new Array();

    //Datos Servicio 1.1
    var _tipConsu = $('#TipControlConsumo').val();
    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TIPPERIODO_CONSUMO', null, _tipConsu, _tipConsu, true));

    var _cantconsu = $('#txtCantConsumo').val();

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'NUMCONSUMO_MAXGENERAL', null, _cantconsu, _cantconsu, true));

    var _tiemptol1 = $('#tiempo_tol').val();//strPosibValor  "00:07"
    var _tiemptol2 = _tiemptol1;

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TOLERANCIA_CONSUMO', null, _tiemptol2, _tiemptol1, true));

    //Inicio de código para solucionar observación 1.10  HG 25.02.2021
    var TipoSubs = $('#TipoSubs').val();

    if ($('#ConSubsi').is(':checked') == true) {
        TipoSubs = TipoSubs;
    }
    else {
        TipoSubs = 0;
    }

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TIPO_SUBSIDIO_CONSUMO', null, TipoSubs, TipoSubs, true));
    //Fin de código para solucionar observación 1.10  HG 25.02.2021

    var porcent_G = $('#pocent_general').val();

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'PORCENT_SUBSIDIO_CONSUMO', null, porcent_G, porcent_G, true));

    n = new Date();
    //Año
    y = n.getFullYear();
    //Mes
    m = n.getMonth() + 1;
    //Día
    d = n.getDate();

    //Lo ordenas a gusto.
    var DiadeHoy = y + "/" + m + "/" + d;


    //Constructor - Regla de Negocio - BOTON GUARDAR
    class TGREGLANEG_SUBSIDIO_DET {
        constructor(
            IntIdReglaNegSubsDet,  //                  IntIdReglaNegSubsDet] [int]
            IntIdReglaNeg,         //IntIdReglaNeg,    IntIdReglaNeg       ] [int] NULL,
            IntIdEmp,              //IntIdEmp,         IntIdEmp            ] [int] NULL,
            nmPorcentaje,          //nmPorcentaje,     nmPorcentaje        ] [decimal](18,
            intidtipoMenu,         //bitFlEliminado,   intidtipoMenu       ] [int] NULL,
            bitFlEliminado,        //intIdUsuarReg,    bitFlEliminado      ] [bit] NULL,
            intIdUsuarReg,         //dttFeReg,         intIdUsuarReg       ] [int] NULL,
            dttFeReg,              //intIdUsuarModif,  dttFeReg            ] [datetime] NULL,
            intIdUsuarModif,       //dttFeModif,       intIdUsuarModif     ] [int] NULL ---------- Se utilizará este campo para llegar a la tabla Typo
            dttFeModif             //intidtipoMenu,    dttFeModif          ] [datetime] NULL
        )                         //clave
        {
            this.IntIdReglaNegSubsDet = IntIdReglaNegSubsDet
            this.IntIdReglaNeg = IntIdReglaNeg
            this.IntIdEmp = IntIdEmp
            this.nmPorcentaje = nmPorcentaje
            this.intidtipoMenu = intidtipoMenu
            this.bitFlEliminado = bitFlEliminado
            this.intIdUsuarReg = intIdUsuarReg
            this.dttFeReg = dttFeReg
            this.intIdUsuarModif = intIdUsuarModif
            this.dttFeModif = dttFeModif
        }
    }

    for (var i = 0; i < detalleSubs.length; i++) {
        var intidEmp = detalleSubs[i].IntIdReglaNeg;
        var Porcent = detalleSubs[i].nmPorcentaje;
        var _TipoMen = detalleSubs[i].intIdUsuarReg;
        var _TipoServ = detalleSubs[i].intIdTipServ; //  this.intIdTipServ   = intIdUsuarModif

        ListasDeSubsi.push(new TGREGLANEG_SUBSIDIO_DET(0, 0, intidEmp, Porcent, _TipoMen, 0, idUsuar, DiadeHoy, _TipoServ, null));

    }

    //Constructor 03 - Regla de Negocio - BOTON GUARDAR
    class TGREGLANEG_SERV_DET {
        constructor(IntIdReglaNeg, intIdServicio, bitFlEliminado, intIdUsuarReg, dttFeReg, intIdUsuarModif, dttFeModif) {
            this.IntIdReglaNeg = IntIdReglaNeg
            this.intIdServicio = intIdServicio
            this.bitFlEliminado = bitFlEliminado
            this.intIdUsuarReg = intIdUsuarReg
            this.dttFeReg = dttFeReg
            this.intIdUsuarModif = intIdUsuarModif
            this.dttFeModif = dttFeModif
        }
    }
    for (var i = 0; i < detalleServ.length; i++) {
        var idServ = detalleServ[i].intidServicio;
        ListasDeServ.push(new TGREGLANEG_SERV_DET(0, idServ, 0, idUsuar, n, null, null));//71,0,0,1,NULL,NULL,NULL

    }


    //Validar CAMPOS EN BLACO
    if (_Codigo === '' || _Descripcion === '' || _tipConsu === '' || _cantconsu === '') {
        messageResponseMix({ type: 'info', message: 'Complete los campos obligatorios' }, titulo_)
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');

        //Manda de regreso al primer form(#primer_sitch_form)
        $('#primer_sitch_form').click(); //Intercambiar Forms Comedor(#primer_sitch_form)/Servicio(#segundo_sitch_form)
        //Colorea de NEGRO: #34495E , el otro es VERDE: #1ABB9C //GreenYellow //PLOMO:#73879C
        $('body').append('<style>.wizard_horizontal ul.wizard_steps li a.selected:before, .step_no {background-color:#34495E ;}</style>');
        return;
    }


    if (detalleServ.length == 0) {
        //if ($('#TablaDetServ tr').length == 0) { //Si tabla servicios añadidos esta vacio     
        $('#segundo_sitch_form').click();  // Envíase y habilitese el segundo form
        messageResponseMix({ type: 'info', message: 'Añadir al menos un Servicio' }, titulo_)
         $('#notifry_error').html('');
        $('#notifry_errordes').html('');

        return;
    }

    if ($('#TipoSubs').val() == 128 && detalleSubs.length == 0) {
        messageResponseMix({ type: 'info', message: 'Añadir al menos un Subsidio' }, 'Agregar Subsidios por Empresa')
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }

    var ReglaNegocio = {
        strCoRegNeg: _Codigo,
        strDesRegNeg: _Descripcion,
        IntIdUniOrg: _UnidadOrg,
        bitFlInterna: 0,
        strRegNegCampo1: _strRegNegCampo1,
        strRegNegCampo2: _strRegNegCampo2,
        strRegNegCampo3: _strRegNegCampo3,
        strRegNegCampo4: _strRegNegCampo4,
        strRegNegCampo5: _strRegNegCampo5,
        bitFlActivo: chckactivo,
        bitFlPrincipal: _principal //añadido 22.09.2021
    }


    // ListasDeServ.splice(0, 1);
    console.log(ListasDeSubsi);

    $.post(
        '/Asistencia/IUReglaCom',
        { intTipoOperacion: 1, ObjReglaNeg: ReglaNegocio, listaReglaNegDet: ListasDeReglas, listaDetSubsi: ListasDeSubsi, listaDetServ: ListasDeServ },
        (response) => {
            console.log(response);
            if (response.type !== '') {
                if (response.type === 'success') {
                    messageResponseMix({ type: response.type, message: response.message }, titulo_)
                    TablarReglaNegCom();
                    $('.form-hide-ReglaNegocio-Comedor').hide();
                    $('#txtCantConsumo').val('');
                    return;
                }
                else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Regla de Negocio';
                        var campo = list[1];
                        if (campo =='txt_codigo_RN')
                            campo ='txt_cod_RegNegCom';
                        else if (campo == 'txt_descripcion_RN')
                            campo = 'txt_desc_RegNegCom';
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        messageResponseMix({ type: response.type, message: response.message }, titulo_)
                        $('#notifry_error').html('');
                        $('#notifry_errordes').html('');
                    }
                    return;
                }
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

});


//===============================================================================================
//============================== BOTON CANCELAR Regla de Negocio ================================ Cancelar Regla de Negocio
$('#btn-cancel-ReglaNegocioCom').on('click', function () {
    validarSession();//AÑADIDO HG 22.04.2021 
    $('.form-hide-ReglaNegocio-Comedor').hide();
});


//===============================================================================================
//============================== BOTON ACTUALIZAR Regla de Negocio ============================== Actualizar Regla de Negocio
$('#btn-update-ReglaNegocioCom').on('click', function () {
    validarSession();//AÑADIDO HG 22.04.2021
    var titulo_="Actualización Regla de Negocio";
    var ListasDeReglas = new Array();
    var ListasDeSubsi = new Array();
    var ListasDeServ = new Array();

    $('#span_02').click();//Se debe mostrar las tablas
    var chckactivo = $('#chk-activo-RegNegCom').is(':checked');

    //var _UnidadOrg = 0;
    var _Dependencia = $('#cboJerarquia option:selected').val();
    var _UnidadOrg = $('#cboUndOrg option:selected').val();
    var _Codigo = $('#txt_cod_RegNegCom').val();
    var _Descripcion = $('#txt_desc_RegNegCom').val();
    var _strRegNegCampo1 = null;
    var _strRegNegCampo2 = null;
    var _strRegNegCampo3 = null;
    var _strRegNegCampo4 = null;
    var _strRegNegCampo5 = null;
    var _IdRegla = $('#IdRegNegCom').val();
    var _principal = $('#checkPrincipal').is(':checked'); //añadido 22.09.2021

    if (_Dependencia === '' || _Dependencia === '0') {
        messageResponseMix({ type: 'info', message: 'Seleccione una Dependencia Jerárquica' }, titulo_)
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }
    if (_UnidadOrg === '' || _UnidadOrg === '0') {
        messageResponseMix({ type: 'info', message: 'Seleccione una Unidad Organizacional' }, titulo_)
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }

    //HG 0.03.21 lunes01
    if ($('#ConSubsi').is(':checked') == true) {
        if ($('#TipoSubs').val() == 0) {
            messageResponseMix({ type: 'info', message: 'Seleccione un Tipo de Subsidio' }, titulo_)
            return;
        }
    }


    //HG 0.03.21 lunes01
    if ($('#TipControlConsumo').val() == 0) {
        messageResponseMix({ type: 'info', message: 'Seleccione un Tipo de Control de Consumo' }, titulo_)
        return;
    }


    //HG 0.03.21 lunes01
    if ($('#ConSubsi').is(':checked') == false) {
        ListasDeSubsi = [];
    }

    if (detalleServ.length == 0) {
        $('#segundo_sitch_form').click();  // Envíase y habilitese el segundo form
        messageResponseMix({ type: 'info', message: 'Añadir al menos un Servicio' }, titulo_)
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }


    if ($('#TipoSubs').val() == 128 && detalleSubs.length == 0) {
        messageResponseMix({ type: 'info', message: 'Añadir al menos un Subsidio' }, titulo_)
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }

    //Constructor - BOTON ACTUALIZAR 
    class TGREGNEG_DET {
        constructor(intIdRegNegDet, intIdReglaNeg, strCoReglaDet, strDesReglaDet, strValorRegla, strPosibValor, bitFlActivo) {
            this.intIdRegNegDet = intIdRegNegDet
            this.intIdReglaNeg = intIdReglaNeg
            this.strCoReglaDet = strCoReglaDet
            this.strDesReglaDet = strDesReglaDet
            this.strValorRegla = strValorRegla
            this.strPosibValor = strPosibValor
            this.bitFlActivo = bitFlActivo
        }
    }


    //Datos Servicio 1.1
    var _tipConsu = $('#TipControlConsumo').val();
    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TIPPERIODO_CONSUMO', null, _tipConsu, _tipConsu, true));

    var _cantconsu = $('#txtCantConsumo').val();

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'NUMCONSUMO_MAXGENERAL', null, _cantconsu, _cantconsu, true));

    //Inicio de código para solucionar observación 1.9 HG 25.02.2021 
    var _tiemptol1 = $('#tiempo_tol').val();//strPosibValor  "00:07"
    var _tiemptol2 = _tiemptol1;
    //Fin de código para solucionar observación 1.9 HG 25.02.2021

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TOLERANCIA_CONSUMO', null, _tiemptol2, _tiemptol1, true));

    //Inicio de código para solucionar observación 1.10  HG 25.02.2021
    var TipoSubs = $('#TipoSubs').val();

    if ($('#ConSubsi').is(':checked') == true) {
        TipoSubs = TipoSubs;
    }
    else {
        TipoSubs = 0;
    }

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'TIPO_SUBSIDIO_CONSUMO', null, TipoSubs, TipoSubs, true));
    //Fin de código para solucionar observación 1.10  HG 25.02.2021

    var porcent_G = $('#pocent_general').val();

    ListasDeReglas.push(new TGREGNEG_DET(null, null, 'PORCENT_SUBSIDIO_CONSUMO', null, porcent_G, porcent_G, true));

    n = new Date();
    //Año
    y = n.getFullYear();
    //Mes
    m = n.getMonth() + 1;
    //Día
    d = n.getDate();

    //Lo ordenas a gusto.
    var DiadeHoy = y + "/" + m + "/" + d;


    //Constructor - Regla de Negocio - BOTON ACTUALIZAR
    class TGREGLANEG_SUBSIDIO_DET1 {
        constructor(
            IntIdReglaNegSubsDet,  //IntIdReglaNegSubsDet] [int]
            IntIdReglaNeg,         //IntIdReglaNeg       ] [int] NULL,
            IntIdEmp,              //IntIdEmp            ] [int] NULL,
            nmPorcentaje,          //nmPorcentaje        ] [decimal](18,
            intidtipoMenu,         //intidtipoMenu       ] [int] NULL,
            bitFlEliminado,        //bitFlEliminado      ] [bit] NULL,
            intIdUsuarReg,         //intIdUsuarReg       ] [int] NULL,
            dttFeReg,              //dttFeReg            ] [datetime] NULL,
            intIdUsuarModif,       //intIdUsuarModif     ] [int] NULL ---------- Se utilizará este campo para llegar a la tabla Typo
            dttFeModif             //dttFeModif          ] [datetime] NULL
        ) {
            this.IntIdReglaNegSubsDet = IntIdReglaNegSubsDet //1
            this.IntIdReglaNeg = IntIdReglaNeg        //2
            this.IntIdEmp = IntIdEmp             //3
            this.nmPorcentaje = nmPorcentaje         //4
            this.intidtipoMenu = intidtipoMenu        //5
            this.bitFlEliminado = bitFlEliminado       //6
            this.intIdUsuarReg = intIdUsuarReg        //7
            this.dttFeReg = dttFeReg             //8 
            this.intIdUsuarModif = intIdUsuarModif      //9 --Campo utilizado como "Tipo de Servicio"
            this.dttFeModif = dttFeModif           //10
        }
    }

    for (var i = 0; i < detalleSubs.length; i++) { //martes16
        var intidEmp = detalleSubs[i].IntIdReglaNeg;
        var Porcent = detalleSubs[i].nmPorcentaje;
        var _TipoMen = detalleSubs[i].intIdUsuarReg;
        var _TipoServ = detalleSubs[i].intIdTipServ; //  this.intIdTipServ   = intIdUsuarModif
        ListasDeSubsi.push(new TGREGLANEG_SUBSIDIO_DET1(0, 0, intidEmp, Porcent, _TipoMen, 0, idUsuar, DiadeHoy, _TipoServ, null));
    }

    //SERVICIOS AÑADIDOS
    class TGREGLANEG_SERV_DET {
        constructor(IntIdReglaNeg, intIdServicio, bitFlEliminado, intIdUsuarReg, dttFeReg, intIdUsuarModif, dttFeModif) {
            this.IntIdReglaNeg = IntIdReglaNeg
            this.intIdServicio = intIdServicio
            this.bitFlEliminado = bitFlEliminado
            this.intIdUsuarReg = intIdUsuarReg
            this.dttFeReg = dttFeReg
            this.intIdUsuarModif = intIdUsuarModif
            this.dttFeModif = dttFeModif
        }
    }
    for (var i = 0; i < detalleServ.length; i++) {
        var idServ = detalleServ[i].intidServicio;
        ListasDeServ.push(new TGREGLANEG_SERV_DET(0, idServ, 0, idUsuar, n, null, null));
    }


    ///Validar CAMPOS EN Blanco
    if (_Codigo === '' || _Descripcion === '' || _tipConsu === '' || _cantconsu === '') {
        messageResponseMix({ type: 'info', message: 'Complete los campos obligatorios' }, titulo_)
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }

    //OBJETO REGLA - BOTON NUEVO 
    var ReglaNegocio = {
        strCoRegNeg: _Codigo,
        strDesRegNeg: _Descripcion,
        IntIdUniOrg: _UnidadOrg,
        bitFlInterna: 0,
        strRegNegCampo1: _strRegNegCampo1,
        strRegNegCampo2: _strRegNegCampo2,
        strRegNegCampo3: _strRegNegCampo3,
        strRegNegCampo4: _strRegNegCampo4,
        strRegNegCampo5: _strRegNegCampo5,
        bitFlActivo: chckactivo,
        intIdReglaNeg: _IdRegla,
        bitFlPrincipal: _principal //añadido 22.09.2021
    }

 
    $.post(
        '/Asistencia/IUReglaCom',
        { intTipoOperacion: 2, ObjReglaNeg: ReglaNegocio, listaReglaNegDet: ListasDeReglas, listaDetSubsi: ListasDeSubsi, listaDetServ: ListasDeServ },
        (response) => {
            console.log(response);
            if (response.type !== '') {
                if (response.type === 'success') {
                    messageResponseMix({ type: response.type, message: response.message }, titulo_)
                    TablarReglaNegCom();
                    $('.form-hide-ReglaNegocio-Comedor').hide();
                    //Añadido HG 02.03.21 07:55AM
                    detalleServ = [];
                    detalleSubs = [];
                }
                else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Regla de Negocio';
                        var campo = list[1];
                        if (campo == 'txt_codigo_RN')
                            campo = 'txt_cod_RegNegCom';
                        else if (campo == 'txt_descripcion_RN')
                            campo = 'txt_desc_RegNegCom';
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        messageResponseMix({ type: response.type, message: response.message }, titulo_)
                        $('#notifry_error').html('');
                        $('#notifry_errordes').html('');
                    }
                    return;
                }
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });


});

function init_SmartWizard_RegNegCom() {
    if (typeof ($.fn.smartWizard) === 'undefined') { return; }

    $('#wizardCom').smartWizard({
        selected: 0,
        enableFinishButton: true,
        enableAllSteps: true
    });

    $('#wizard_verticle').smartWizard({
        transitionEffect: 'slide'
    });

    $('.buttonNext').hide();//.addClass('btn btn-success');
    $('.buttonPrevious').hide();//.addClass('btn btn-primary');
    $('.buttonFinish').hide();//.addClass('btn btn-default');
};

/********************** Fin de Mantenimiento Regla de Negocio *****************/
//#endregion MANT. REGLA DE NEGOCIO DE COMEDOR









/**----------------------------------------------------------- */
/**10. Feriado */
/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
//#region MANT. FERIADO
var _vartableFeriado;

function traerDatosFeriados(filtrojer_ini_var = null, filtrojer_fin_var = null) {
    let filtrosActivo = ($('#filActiFeriado').val() != "") ? $('#filActiFeriado').val() : 2;
    let strfiltro = $('#filtroFeriado').val();
    let filtrojer_ini = filtrojer_ini_var ? filtrojer_ini_var : null;
    let filtrojer_fin = filtrojer_fin_var ? filtrojer_fin_var : null;

    $.ajax({
        url: '/Asistencia/GetTablaFeriado',
        type: 'POST',
        data: {
            IntActivoFilter: filtrosActivo,
            strfilter: strfiltro,
            intfiltrojer1: filtrojer_ini,
            intfiltrojer2: filtrojer_fin
        },
        beforeSend: function () {
            $.blockUI({
                css: {
                    border: 'none',
                    padding: '15px',
                    backgroundColor: '#000',
                    '-webkit-border-radius': '10px',
                    '-moz-border-radius': '10px',
                    opacity: .5,
                    color: '#fff'
                },
                message: 'Procesando...'
            });
        },
        success: function (response) {
            $('#tablaFeriado tbody').empty();
            response.forEach(element => {

                if (typeof _vartableFeriado !== 'undefined') {
                    _vartableFeriado.destroy();
                }

                //Diseño de la tabla
                _vartableFeriado = $('#tablaFeriado').DataTable({
                    data: response,
                    columns: [
                        { data: 'dttfechaIni' },
                        { data: 'strDeFeriado' },
                        { data: 'CAMPO_CONCAT' },
                        { data: 'bitEspecifica_DESC' },
                        { data: 'bitFlActivo_desc' },
                        {
                            sortable: false,
                            "render": (data, type, item, meta) => {
                                let feriadoId = item.IntIdFeriado;
                                let strDeFeriado = item.strDeFeriado;
                                return `<button class="btn btn-success btn-xs btn-edit" dataid="${feriadoId}" ><i class="fa fa-pencil"></i> Editar </button>
                                           <button class="btn btn-primary btn-xs btn-delete" dataid="${feriadoId}" des_data="${strDeFeriado}" data="${item}" ><i class="fa fa-trash-o"></i> Eliminar </button>`;
                            }
                        },
                        { data: 'CAMPO_CONCAT' },
                        { data: 'CAMPO_CONCAT' },
                        { data: 'CAMPO_CONCAT' }
                    ],
                    lengthMenu: [10, 25, 50],
                    responsive: true,
                    language: _datatableLanguaje,
                    order: [],
                    columnDefs: [//ocultar y definir columnas
                        {
                            targets: [6],//IntIdJerOrg
                            visible: false,
                            searchable: false
                        },
                        {
                            targets: [7],//strCoIntJO
                            visible: false,
                            searchable: false
                        },
                        {
                            targets: [8],//strCoJerPadre
                            visible: false,
                            searchable: false
                        }

                    ],
                    dom: 'lBfrtip',

                });
            });
        }, complete: function () {
            $.unblockUI();
        }
    });
}
function getDateRangePickerFeriado() {
    const idRange = ".range-datepicker";
    const fechaInicio = $(idRange).data('daterangepicker').startDate.format('DD/MM/YYYY');
    const fechaFin = $(idRange).data('daterangepicker').endDate.format('DD/MM/YYYY');
    return { fInicio: fechaInicio, fFin: fechaFin }
}
function CombosFeriado() {
    $('#txtHoraFinFer').attr('disabled', true);
    $('#txtHoraIniFer').attr('disabled', true);

    $.post(
        '/Asistencia/LlenarTipoUM',
        { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'PER', strSubGrupo: 'REGI' },
        (response) => {
            $('#idRegi').empty();
            $('#idRegi').append('<option value="0">Seleccione</option>');
            response.forEach(element => {
                $('#idRegi').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');


            });
        });

    // combo comcepto
    $.post(
        '/Personal/ListarCombos',//'/Asistencia/LlenarTipoUM',
        { strEntidad: 'TGCONCEPTO', intIdFiltroGrupo: 0, strGrupo: 'FER', strSubGrupo: 'FER' },
        (response) => {
            $('#idConcep').empty();
            $('#idConcep').append('<option value="0">Seleccione</option>');
            response.forEach(element => {
                $('#idConcep').append('<option value="' + element.intidTipo + '" TipoUM="' + element.strextra1 + '">' + element.strDeTipo + '</option>');
            });
        });

    $('#idConcep').on('change', function () {
        //var ValidaUM = $('#idConcep').val();
        var _ConceptoUM = $("#idConcep option:selected").attr('TipoUM')

        if (_ConceptoUM == '02') {//Días
            $('#txtHoraFinFer').attr('disabled', true);
            $('#txtHoraIniFer').attr('disabled', true);
        }
        else if (_ConceptoUM == '01') {//Horas
            $('#txtHoraFinFer').attr('disabled', false);
            $('#txtHoraIniFer').attr('disabled', false);
            $('#txtHoraIniFer').val("");
            $('#txtHoraFinFer').val("");
        }

        //$.post(
        //    '/Asistencia/ObtenerConceptoPorsuPK',
        //    { intIdConcepto: ValidaUM },
        //    (response) => {
        //        response.forEach(element => {
        //            if (element.intTipoUM == 25) {
        //                $('#txtHoraFinFer').attr('disabled', false);
        //                $('#txtHoraIniFer').attr('disabled', false);
        //            }
        //            else if (element.intTipoUM == 26) {
        //                $('#txtHoraFinFer').attr('disabled', true);
        //                $('#txtHoraIniFer').attr('disabled', true);
        //                $('#txtHoraIniFer').val("");
        //                $('#txtHoraFinFer').val("");
        //            }

        //        });
        //    });
    });



    //ComboJerarquia
    $.post(
        '/Asistencia/LlenarTipoUM',
        { strEntidad: 'TGJERARQORG', intIdFiltroGrupo: 0, strGrupo: 'DEPEN', strSubGrupo: 'LOCAL' },
        (response) => {
            $('#cboJerar').empty();
            if (response.length > 1) {
                $('#cboJerar').append('<option value="0">Seleccione</option>');
            }
            response.forEach(element => {
                $('#cboJerar').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
            });
            var IntidJerar = $('#cboJerar option:selected').val();
            if (IntidJerar > 0) {
                $.post(
                    '/Asistencia/LlenarTipoUM',
                    {
                        strEntidad: 'TGUNIDORG', intIdFiltroGrupo: IntidJerar, strGrupo: 'JERAR', strSubGrupo: 'FERIADO_LOCAL'
                    }, response => {
                        $('#cboUndOrg').empty();
                        $('#cboUndOrg').attr('disabled', false);
                        if (response.length == 0) {
                            $('#cboUndOrg').append('<option style="color:red" value="0"> No existen datos a mostrar para la Dependencia Jerárquica seleccionada.</option>');
                        }
                        else {
                            response.forEach(element => {
                                $('#cboUndOrg').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

                            });
                        }
                        $('#cboUndOrg').attr('disabled', true);
                    });
            }

        });
    //No modificar - Nuevo Feriado(#01)
    //Combo UnidadOrganizacional
    $('#cboJerar').on('change', function () {

        var IntidJerar = $('#cboJerar option:selected').val();

        $.post(
            '/Asistencia/LlenarTipoUM',
            {
                strEntidad: 'TGUNIDORG', intIdFiltroGrupo: IntidJerar, strGrupo: 'JERAR', strSubGrupo: 'FERIADO_LOCAL'
            }, response => {
                $('#cboUndOrg').empty();
                $('#cboUndOrg').attr('disabled', false);
                if (response.length == 0) {
                    $('#cboUndOrg').append('<option style="color:red" value="0"> No existen datos a mostrar para la Dependencia Jerárquica seleccionada.</option>');
                }
                else {
                    response.forEach(element => {
                        $('#cboUndOrg').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

                    });
                }
            });
    });

}
function CamposAdicionalesFeriado() {

    $.post(
        '/Organizacion/CamposAdicionales',
        { strEntidad: 'TGFERIADO' },
        (response) => {
            $('#containerCampose').empty();
            response.forEach(element => {

                $('#containerCampose').append(
                    ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                    + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="' + element.strTitulo.replace("(*)", "") +'" maxlength="255"/>' + '</div></div>');


            });
        });
}
function eliminarFeriado(feriadoId, DescripcionFer) {

    swal({
        title: "Eliminar Feriado",
        text: "Esta seguro de eliminar el registro <strong>" + DescripcionFer + "</strong> ?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí, eliminar",
        cancelButtonText: "No, cancelar",
    }).then(function (isConfirm) {
        validarSession()
        if (isConfirm) {

            $.post(
                '/Asistencia/EliminarFeriado',
                { intIdFeriado: feriadoId },
                (response) => {
                    console.log(response);
                    if (response.type !== '') {
                        var tipo = 'Eliminado!';
                        if (response.type === 'error')
                            tipo = 'NO SE PUEDE ELIMINAR EL REGISTRO';
                        swal(tipo, response.message, response.type);

                        if (response.type === 'success') {
                            swal("Eliminado!", "El resgistro fue eliminado correctamente", "success");//19.04.2021
                            $('.form-hide-feriado').hide();//20.04.2021
                            const date = getDateRangePickerFeriado();
                            if ($("#tablaFeriado").length) {
                                traerDatosFeriados(date.fInicio, date.fFin);
                            }
                        }
                    }
                }
            ).fail(function (result) {
                alert('ERROR ' + result.status + ' ' + result.statusText);
            });
        } else {
            swal("Cancelled", "Your imaginary file is safe :)", "error");
        }
    });

}
function editarFeriado(feriadoId) {
    $('#btn-save-change-feriado').hide();
    $('#btn-update-feriado').show();
    $('.form-hide-feriado').show();
    $.post(
        '/Asistencia/EditarFeriado',
        {},
        (response) => {

            if (response !== '') {
                $('.form-hide-feriado .x_content').empty();
                $('.form-hide-feriado .x_content').html(response);
                $('.form-hide-feriado').show();
                CamposAdicionalesFeriado();

                $.post(
                    '/Asistencia/ObtenerRegistroFeriado',
                    { intIdFeriado: feriadoId },
                    (response) => {
                        var element = response[0]
                        console.log(element);

                        $('#IntidFer').val(element.IntIdFeriado);

                        $('#txt_desc_fer').val(element.strDeFeriado);
                        //$('#txtFechaIniFer').val(element.dttfechaIni);
                        //----------------------------------------------------------
                        //AÑADIDO 23.07.2021
                        if (element.dttfechaIni != null) {
                            var x = element.dttfechaIni.substr(6, 4) + '-' + element.dttfechaIni.substr(3, 2) + '-' + element.dttfechaIni.substr(0, 2);
                            $('#txtFechaIniFer').val(x);
                        } else {
                            $('#txtFechaIniFer').val("");
                        }
                        //----------------------------------------------------------

                        $('#strFeriaCampo1').val(element.strFeriaCampo1);
                        $('#strFeriaCampo2').val(element.strFeriaCampo2);
                        $('#strFeriaCampo3').val(element.strFeriaCampo3);
                        $('#strFeriaCampo4').val(element.strFeriaCampo4);
                        $('#strFeriaCampo5').val(element.strFeriaCampo5);


                        if (element.bitEspecifica == 1) {
                            $('#chck_bitEspecifica').attr('checked', true)
                        } else if (element.bitEspecifica == 0) {
                            $('#chck_bitEspecifica').attr('checked', false)
                        }

                        if (element.bitRecursiv == 1) {
                            $('#chck_bitRecursiv').attr('checked', true)
                        } else if (element.bitRecursiv == 0) {
                            $('#chck_bitRecursiv').attr('checked', false)
                        }

                        if (element.bitFlActivo == false) {
                            $('#11').html('<label id="_lbl_">Inactivo</label> <input type="checkbox" id="chck_activo_fer" class="js-switch" /><script>switcheryLoad();</script >');//21.05.2021 ES
                        } else if (element.bitFlActivo == true) {
                            $('#11').html('<label id="_lbl_">Activo</label> <input type="checkbox" id="chck_activo_fer" class="js-switch" checked /><script>switcheryLoad();</script >');
                        }

                        init_checkBox_styles();

                        if ($('#chck_bitEspecifica').is(':checked') == true) {
                            $('#cboJerar').attr('disabled', false);
                            $('#cboUndOrg').attr('disabled', false);
                        } else if ($('#chck_bitEspecifica').is(':checked') == false) {
                            $('#cboJerar').attr('disabled', true);
                            $('#cboUndOrg').attr('disabled', true);
                        }


                        // combo comcepto
                        $.post(
                            '/Personal/ListarCombos',//'/Asistencia/LlenarTipoUM',
                            { strEntidad: 'TGCONCEPTO', intIdFiltroGrupo: 0, strGrupo: 'FER', strSubGrupo: 'FER' },
                            (response) => {
                                $('#idConcep').empty();
                                $('#idConcep').append('<option value="0">Seleccione</option>');
                                response.forEach(e => {
                                    if (e.intidTipo == element.intIdConcepto) {
                                        $('#idConcep').append('<option selected value="' + e.intidTipo + '" TipoUM="' + e.strextra1 + '">' + e.strDeTipo + '</option>');
                                    } else {
                                        $('#idConcep').append('<option value="' + e.intidTipo + '" TipoUM="' + e.strextra1 + '">' + e.strDeTipo + '</option>');
                                    }
                                });

                                var _ConceptoUM = $("#idConcep option:selected").attr('TipoUM')
                                if (_ConceptoUM == '01') {//Horas
                                    if (element.timeHoraIni_desc == '' || element.timeHoraFin_desc == '') {
                                        $('#txtHoraIniFer').attr('disabled', true);
                                        $('#txtHoraFinFer').attr('disabled', true);
                                    } else {
                                        $('#txtHoraIniFer').attr('disabled', false);
                                        $('#txtHoraFinFer').attr('disabled', false);
                                        $('#txtHoraIniFer').val(element.timeHoraIni_desc);
                                        $('#txtHoraFinFer').val(element.timeHoraFin_desc);
                                    }
                                } else {
                                    $('#txtHoraIniFer').attr('disabled', true);
                                    $('#txtHoraFinFer').attr('disabled', true);
                                }
                            });

                        // combo Régimen
                        $.post(
                            '/Asistencia/LlenarTipoUM',
                            { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'PER', strSubGrupo: 'REGI' },
                            (response) => {
                                $('#idRegi').empty();
                                $('#idRegi').append('<option value="0">Seleccione</option>');
                                response.forEach(e => {
                                    if (e.intidTipo == element.intTipoReg) {
                                        $('#idRegi').append('<option selected value="' + e.intidTipo + '">' + e.strDeTipo + '</option>');
                                    } else {
                                        $('#idRegi').append('<option value="' + e.intidTipo + '">' + e.strDeTipo + '</option>');
                                    }
                                });
                            });

                        //ComboJerarquia
                        $.post(
                            '/Asistencia/LlenarTipoUM',
                            { strEntidad: 'TGJERARQORG', intIdFiltroGrupo: 0, strGrupo: 'DEPEN', strSubGrupo: 'LOCAL' },
                            (response) => {
                                $('#cboJerar').empty();
                                if (response.length > 1) {
                                    $('#cboJerar').append('<option value="0">Seleccione</option>');
                                }
                                response.forEach(e => {
                                    $('#cboJerar').append('<option value="' + e.intidTipo + '">' + e.strDeTipo + '</option>');
                                });

                                var IntIdJerOrg = $('#cboJerar').val(); //modificado 01.09.2021

                                $.post(
                                    '/Asistencia/LlenarTipoUM',
                                    {
                                        strEntidad: 'TGUNIDORG', intIdFiltroGrupo: IntIdJerOrg, strGrupo: 'JERAR', strSubGrupo: 'FERIADO_LOCAL'
                                    }, response => {
                                        $('#cboUndOrg').empty();
                                        $('#cboUndOrg').attr('disabled', false);
                                        if (response.length == 0) {
                                            $('#cboUndOrg').append('<option style="color:red" value="0"> No existen datos a mostrar para la Dependencia Jerárquica seleccionada.</option>');
                                        }
                                        else {
                                            response.forEach(element => {
                                                $('#cboUndOrg').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

                                            });

                                            //Aqui marca los asignados : feriadoId
                                            $.post(
                                                '/Asistencia/ListarHorarioEspecifico',
                                                { strEntidad: 'TGFER_UNIORG_DET', intId: feriadoId, intUso: 2, strGrupo: '', strSubGrupo: '' },
                                                (response) => {
                                                    response.forEach(e => {
                                                        $('#cboUndOrg option[value=' + e.intIdTipRegimen + ']').prop('selected', true);
                                                    });
                                                });
                                        }
                                        if (element.bitEspecifica == 1) {
                                            $('#cboUndOrg').attr('disabled', false)
                                        } else if (element.bitEspecifica == 0) {
                                            $('#cboUndOrg').attr('disabled', true)
                                        }


                                    });
                            });

                        //Cambiar combo en proceso editar / Modificado 26.05.2021 (#03)
                        //------------------------------------------------------------------------------------------------
                        $('#cboJerar').on('change', function () {
                            var IntIdJerOrg = $('#cboJerar option:selected').val();

                            $.post(
                                //'/Asistencia/LlenarTipoUM',
                                //{ strEntidad: 'TGUNIDORG', intIdFiltroGrupo: IntidJerar, strGrupo: 'JERAR', strSubGrupo: 'FERIADO_LOCAL' },
                                //(response) => {
                                '/Personal/ListarComboGeneral_FiltroPerson',
                                {
                                    intIdMenu: 1,
                                    strEntidad: 'TGUNIDORG',
                                    intIdFiltroGrupo: IntIdJerOrg,
                                    intIdFiltroPerson: feriadoId, //parámetro añadido
                                    strGrupo: 'JERAR',
                                    strSubGrupo: 'FERIADO_LOCAL',
                                }, response => {
                                    $('#cboUndOrg').empty();
                                    $('#cboUndOrg').attr('disabled', false);
                                    //response.forEach(e => {
                                    //    $('#cboUndOrg').append('<option value="' + e.intidTipo + '">' + e.strDeTipo + '</option>');
                                    //});
                                    if (response.length == 0) {
                                        $('#cboUndOrg').append('<option style="color:red" value="0"> No existen datos a mostrar para la Dependencia Jerárquica seleccionada.</option>');
                                    }
                                    else {
                                        response.forEach(e => {
                                            $('#cboUndOrg').append('<option value="' + e.intId + '">' + e.strDescripcion + '</option>');
                                            //$('#cboUndOrg').append('<option value="' + e.intidTipo + '">' + e.strDeTipo + '</option>');
                                        });

                                        //Aqui marca los asignados : feriadoId
                                        $.post(
                                            '/Asistencia/ListarHorarioEspecifico',
                                            { strEntidad: 'TGFER_UNIORG_DET', intId: feriadoId, intUso: 2, strGrupo: '', strSubGrupo: '' },
                                            (response) => {
                                                response.forEach(e => {
                                                    $('#cboUndOrg option[value=' + e.intIdTipRegimen + ']').prop('selected', true);
                                                });
                                            });
                                    }
                                });
                        });
                        //------------------------------------------------------------------------------------------------

                        $('#idConcep').on('change', function () {
                            var _ConceptoUM = $("#idConcep option:selected").attr('TipoUM')

                            if (_ConceptoUM == '02') {//Días
                                $('#txtHoraFinFer').attr('disabled', true);
                                $('#txtHoraIniFer').attr('disabled', true);
                            }
                            else if (_ConceptoUM == '01') {//Horas
                                $('#txtHoraFinFer').attr('disabled', false);
                                $('#txtHoraIniFer').attr('disabled', false);
                                $('#txtHoraIniFer').val("");
                                $('#txtHoraFinFer').val("");
                            }

                            //var ValidaUM = $('#idConcep').val();
                            //$.post(
                            //    '/Asistencia/ObtenerConceptoPorsuPK',
                            //    { intIdConcepto: ValidaUM },
                            //    (response) => {
                            //        response.forEach(element => {
                            //            if (element.intTipoUM == 25) {
                            //                $('#txtHoraFinFer').attr('disabled', false);
                            //                $('#txtHoraIniFer').attr('disabled', false);
                            //            }
                            //            else if (element.intTipoUM == 26) {
                            //                $('#txtHoraFinFer').attr('disabled', true);
                            //                $('#txtHoraIniFer').attr('disabled', true);
                            //                $('#txtHoraIniFer').val("");
                            //                $('#txtHoraFinFer').val("");
                            //            }

                            //        });
                            //    });
                        });

                        $('#chck_bitEspecifica').on('ifChanged', function () {
                            if ($('#chck_bitEspecifica').is(':checked') == true) {
                                $('#cboJerar').attr('disabled', false);
                                $('#cboUndOrg').attr('disabled', false);
                            } else if ($('#chck_bitEspecifica').is(':checked') == false) {
                                $('#cboJerar').attr('disabled', true);
                                $('#cboUndOrg').attr('disabled', true);
                            }
                        });


                        var txtdes = 'strDeFeriado';
                        $.post(
                            '/Organizacion/ListarCaracteresMax',
                            { strMaestro: 'TGFERIADO' },
                            (response) => {
                                response.forEach(element => {
                                    if (element.strColumnName == txtdes) {
                                        $('.Valdes').children("input").attr('maxlength', element.intMaxLength);
                                    }
                                });
                            });

                    });
            }
        });

}

$('#tablaFeriado  tbody').on('click', 'tr button.btn-delete', function () {
    validarSession()
    let feriadoId = $(this).attr("dataid")
    let DescripcionFer = $(this).attr("des_data")
    if (!isNaN(feriadoId)) {
        eliminarFeriado(feriadoId, DescripcionFer)
    }
})
$('#tablaFeriado  tbody').on('click', 'tr button.btn-edit', function () {
    validarSession()
    let feriadoId = $(this).attr("dataid")

    if (!isNaN(feriadoId)) {
        editarFeriado(feriadoId)
    }
})
$('#btn-new-feriado').on('click', function () {
    validarSession()
    $('#btn-save-change-feriado').show();
    $('#btn-update-feriado').hide();
    $('.form-hide-feriado').show();
    $.post(
        '/Asistencia/NuevoFeriado',
        {},
        (response) => {
            if (response !== '') {
                $('.form-hide-feriado .x_content').empty();
                $('.form-hide-feriado .x_content').html(response);
                $('.form-hide-feriado').show();
                $('#chck_bitEspecifica').iCheck('unchecked');

                //cargarDaterangePicker();
                //init_daterangepicker();
                CombosFeriado();
                CamposAdicionalesFeriado();



                $('#chck_bitEspecifica').on('ifChanged', function () {

                    if ($('#chck_bitEspecifica').is(':checked') == true) {

                        $('#cboJerar').attr('disabled', false);

                        $('#cboUndOrg').attr('disabled', false);

                    } else if ($('#chck_bitEspecifica').is(':checked') == false) {

                        $('#cboJerar').attr('disabled', true);

                        $('#cboUndOrg').attr('disabled', true);


                    }
                });

                if ($('#chck_bitEspecifica').is(':checked') == true) {
                    $('#cboJerar').attr('disabled', false);
                    $('#cboUndOrg').attr('disabled', false);
                } else if ($('#chck_bitEspecifica').is(':checked') == false) {
                    $('#cboJerar').attr('disabled', true);
                    $('#cboUndOrg').attr('disabled', true);
                }
                switcheryLoad();
                init_checkBox_styles();

                var txtdes = 'strDeFeriado';

                $.post(
                    '/Organizacion/ListarCaracteresMax',
                    { strMaestro: 'TGFERIADO' },
                    (response) => {
                        response.forEach(element => {
                            if (element.strColumnName == txtdes) {
                                $('#Valdes').children("input").attr('maxlength', element.intMaxLength);
                            }
                        });
                    });
            }
        });

});
$('#btn-save-change-feriado').on('click', function () {
    validarSession()
    var titulo_ = 'Nuevo Feriado'

    var _Recursividad = $('#chck_bitRecursiv').is(':checked');
    var _Regimen = $('#idRegi option:selected').val();
    var _Concepto = $('#idConcep option:selected ').val();
    var _desc = $('#txt_desc_fer').val();
    var _FechaInicio = $('#txtFechaIniFer').val();//añadido 23.07.2021
    var _HoraIniFer = $('#txtHoraIniFer').val();
    var _HoraFinFer = $('#txtHoraFinFer').val();
    var _bitEspecifica = $('#chck_bitEspecifica').is(':checked');
    var _strFeriaCampo1 = $('#strFeriaCampo1').val();
    var _strFeriaCampo2 = $('#strFeriaCampo2').val();
    var _strFeriaCampo3 = $('#strFeriaCampo3').val();
    var _strFeriaCampo4 = $('#strFeriaCampo4').val();
    var _strFeriaCampo5 = $('#strFeriaCampo5').val();
    var _chckActivoFer = $('#chck_activo_fer').is(':checked');
    var _ConceptoUM = $("#idConcep option:selected").attr('TipoUM')

    if (_Regimen === '' || _Regimen === '0' || _desc === '' || _Concepto === '' || _Concepto === '0' || _FechaInicio === '' || _FechaInicio === null) {

        if (_Concepto === '' || _Concepto === '0') {
            _txt = 'Seleccione un concepto';
        } else if (_desc === '') {
            _txt = 'Registre una descripción';
        } else if (_FechaInicio === '' || _FechaInicio === null) {
            var _txt = 'Seleccione una Fecha';
        } else if (_Regimen === '' || _Regimen === '0') {
            var _txt = 'Seleccione un Régimen';
        }

        messageResponseMix({ type: 'info', message: _txt }, titulo_)//añadido 04/08/2021
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }
    if (_ConceptoUM == '01') { //Horas
        var TIni = _HoraIniFer.indexOf(":");
        var TFin = _HoraFinFer.indexOf(":");
        var IntIniHr = (parseInt(_HoraIniFer.substr(0, TIni), 10) * 60) + parseInt(_HoraIniFer.substr(TIni + 1, 2), 10);
        var IntFinHr = (parseInt(_HoraFinFer.substr(0, TFin), 10) * 60) + parseInt(_HoraFinFer.substr(TFin + 1, 2), 10);
        if (_HoraIniFer.indexOf("P") > 0) {
            IntIniHr = IntIniHr + 720;
        }
        if (_HoraFinFer.indexOf("P") > 0) {
            IntFinHr = IntFinHr + 720;
        }
        if (IntIniHr >= IntFinHr) {
            messageResponseMix({ type: 'info', message: "La Hora Fin debe ser posterior a la Hora Inicio" }, titulo_)
            return;
        }
    }

    var Feriado = {
        bitRecursiv: _Recursividad,
        intTipoReg: _Regimen,
        intIdConcepto: _Concepto,
        strDeFeriado: _desc,
        dttfechaIni: _FechaInicio,
        timeHoraIni: _HoraIniFer,
        timeHoraFin: _HoraFinFer,
        bitEspecifica: _bitEspecifica,
        strFeriaCampo1: _strFeriaCampo1,
        strFeriaCampo2: _strFeriaCampo2,
        strFeriaCampo3: _strFeriaCampo3,
        strFeriaCampo4: _strFeriaCampo4,
        strFeriaCampo5: _strFeriaCampo5,
        bitFlActivo: _chckActivoFer,

    }

    class TGFER_UNIORG_DET {
        constructor(intIdFerUniOrg, intIdFeriado, intIdUniOrg) {
            this.intIdFerUniOrg = intIdFerUniOrg
            this.intIdFeriado = intIdFeriado
            this.intIdUniOrg = intIdUniOrg
        }
    }


    var detalleOrgi = new Array();

    if (_bitEspecifica) {

        if ($("#cboJerar").val() == 0) {
            messageResponseMix({ type: 'info', message: 'Seleccione una Dependencia Jerárquica ' }, titulo_)//añadido 04/08/2021
            return;
        }
        if ($('#cboUndOrg option:selected').length == 0) {
            messageResponseMix({ type: 'info', message: 'Seleccione al menos una Und. Organizacional' }, titulo_)//añadido 04/08/2021
            return;
        }

        $('#cboUndOrg option:selected').each((index, item) => {
            var tr_cogido = $(item).val();
            detalleOrgi.push(new TGFER_UNIORG_DET(null, null, tr_cogido));
        });
    }

    $.post(
        '/Asistencia/RegistrarEditarFeriado',
        { ObjFeriado: Feriado, listaOrgxFer: detalleOrgi, intTipoOperacion: 1 },
        (response) => {
            console.log(response);
            if (response.type !== '') {

                if (response.type === 'success') {
                    messageResponseMix({ type: response.type, message: response.message }, titulo_)//añadido 04/08/2021
                    const date = getDateRangePickerFeriado();
                    if ($("#tablaFeriado").length) {
                        traerDatosFeriados(date.fInicio, date.fFin);
                    }

                    $('.form-hide-feriado').hide();
                } else {

                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Feriado';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        messageResponseMix({ type: response.type, message: response.message }, titulo_)//añadido 04/08/2021
                    }
                    return;
                }

            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

});
$('#btn-update-feriado').on('click', function () {
    validarSession()
    var titulo_ = 'Actualización de Feriado'

    var _Recursividad = $('#chck_bitRecursiv').is(':checked');
    var _Regimen = $('#idRegi option:selected').val();
    var _Concepto = $('#idConcep option:selected ').val();
    var _ConceptoUM = $("#idConcep option:selected").attr('TipoUM')
    var _desc = $('#txt_desc_fer').val();

    var _FechaInicio = $('#txtFechaIniFer').val();//añadido 23.07.2021
    var _HoraIniFer = $('#txtHoraIniFer').val();
    var _HoraFinFer = $('#txtHoraFinFer').val();

    var _bitEspecifica = $('#chck_bitEspecifica').is(':checked');

    var _strFeriaCampo1 = $('#strFeriaCampo1').val();
    var _strFeriaCampo2 = $('#strFeriaCampo2').val();
    var _strFeriaCampo3 = $('#strFeriaCampo3').val();
    var _strFeriaCampo4 = $('#strFeriaCampo4').val();
    var _strFeriaCampo5 = $('#strFeriaCampo5').val();
    var _chckActivoFer = $('#chck_activo_fer').is(':checked');
    var _intidferiado = $('#IntidFer').val();

    if (_Regimen === '' || _Regimen === '0' || _desc === '' || _Concepto === '' || _Concepto === '0' || _FechaInicio === '' || _FechaInicio === null) {

        if (_Concepto === '' || _Concepto === '0') {
            _txt = 'Seleccione un concepto';
        } else if (_desc === '') {
            _txt = 'Registre una descripción';
        } else if (_FechaInicio === '' || _FechaInicio === null) {
            var _txt = 'Seleccione una Fecha';
        } else if (_Regimen === '' || _Regimen === '0') {
            var _txt = 'Seleccione un Régimen';
        }

        messageResponseMix({ type: 'info', message: _txt }, titulo_)//añadido 04/08/2021
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }
    if (_ConceptoUM == '01') { //Horas
        var TIni = _HoraIniFer.indexOf(":");
        var TFin = _HoraFinFer.indexOf(":");
        var IntIniHr = (parseInt(_HoraIniFer.substr(0, TIni), 10) * 60) + parseInt(_HoraIniFer.substr(TIni + 1, 2), 10);
        var IntFinHr = (parseInt(_HoraFinFer.substr(0, TFin), 10) * 60) + parseInt(_HoraFinFer.substr(TFin + 1, 2), 10);
        if (_HoraIniFer.indexOf("P") > 0) {
            IntIniHr = IntIniHr + 720;
        }
        if (_HoraFinFer.indexOf("P") > 0) {
            IntFinHr = IntFinHr + 720;
        }
        if (IntIniHr >= IntFinHr) {
            messageResponseMix({ type: 'info', message: "La Hora Fin debe ser posterior a la Hora Inicio" }, titulo_)
            return;
        }
    }

    var Feriado = {
        bitRecursiv: _Recursividad,
        intTipoReg: _Regimen,
        intIdConcepto: _Concepto,
        strDeFeriado: _desc,
        dttfechaIni: _FechaInicio,
        timeHoraIni: _HoraIniFer,
        timeHoraFin: _HoraFinFer,
        bitEspecifica: _bitEspecifica,
        strFeriaCampo1: _strFeriaCampo1,
        strFeriaCampo2: _strFeriaCampo2,
        strFeriaCampo3: _strFeriaCampo3,
        strFeriaCampo4: _strFeriaCampo4,
        strFeriaCampo5: _strFeriaCampo5,
        bitFlActivo: _chckActivoFer,
        IntIdFeriado: _intidferiado
    }

    class TGFER_UNIORG_DET {
        constructor(intIdFerUniOrg, intIdFeriado, intIdUniOrg) {
            this.intIdFerUniOrg = intIdFerUniOrg
            this.intIdFeriado = intIdFeriado
            this.intIdUniOrg = intIdUniOrg
        }
    }

    var detalleOrgi = new Array();

    if (_bitEspecifica) {

        if ($("#cboJerar").val() == 0) {
            messageResponseMix({ type: 'info', message: 'Seleccione una Dependencia Jerárquica ' }, titulo_)//añadido 04/08/2021
            return;
        }
        if ($('#cboUndOrg option:selected').length == 0) {
            messageResponseMix({ type: 'info', message: 'Seleccione al menos una Unidad Organizacional' }, titulo_)//añadido 04/08/2021
            return;
        }

        $('#cboUndOrg option:selected').each((index, item) => {
            var tr_cogido = $(item).val();
            detalleOrgi.push(new TGFER_UNIORG_DET(null, null, tr_cogido));
        });
    }

    $.post(
        '/Asistencia/RegistrarEditarFeriado',
        { ObjFeriado: Feriado, listaOrgxFer: detalleOrgi, intTipoOperacion: 2 },
        (response) => {
            console.log(response);
            if (response.type !== '') {

                if (response.type === 'success') {
                    messageResponseMix({ type: response.type, message: response.message }, titulo_)//añadido 04/08/2021
                    const date = getDateRangePickerFeriado();
                    if ($("#tablaFeriado").length) {
                        traerDatosFeriados(date.fInicio, date.fFin);
                    }

                    $('.form-hide-feriado').hide();
                } else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Feriado';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        messageResponseMix({ type: response.type, message: response.message }, titulo_)//añadido 04/08/2021
                    }
                    return;
                }

            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

});
$('#btn-cancel-feriado').on('click', function () {
    validarSession()
    $('.form-hide-feriado').hide();
});

$('.range-datepicker').on('apply.daterangepicker', function (ev, picker) {
    validarSession()
    const filtrojer_ini = picker.startDate.format('DD/MM/YYYY');
    const filtrojer_fin = picker.endDate.format('DD/MM/YYYY');
    if ($("#tablaFeriado").length) {
        traerDatosFeriados(filtrojer_ini, filtrojer_fin)
    }
});
$('#filActiFeriado').on('change', function () {
    validarSession()
    const date = getDateRangePickerFeriado();
    traerDatosFeriados(date.fInicio, date.fFin)
});
//$('#filtroFeriado').keyup(function () {
//    validarSession()
//    const date = getDateRangePickerFeriado();
//    traerDatosFeriados(date.fInicio, date.fFin)

//});
$('#filtroFeriado').on('change', function () {
    validarSession()
    const date = getDateRangePickerFeriado();
    traerDatosFeriados(date.fInicio, date.fFin)
})

//#endregion MANT. FERIADO









/**----------------------------------------------------------- */
/**11. Variable */
/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
//#region MANT. VARIABLE
var _varTablaVariable;

function TablaVariable() {
    var filtroActivo = $('#filActiVar').val();
    var strfiltro = $('#filtroVar').val();
    var filtrojer = $('#campTipoVar').val();

    $.ajax({
        url: '/Asistencia/GetTablaFiltradaVariable',
        type: 'POST',
        data: {
            IntActivoFilter: filtroActivo, strfilter: strfiltro, intfiltrojer: filtrojer
        },
        beforeSend: function () {
            $.blockUI({
                css: {
                    border: 'none',
                    padding: '15px',
                    backgroundColor: '#000',
                    '-webkit-border-radius': '10px',
                    '-moz-border-radius': '10px',
                    opacity: .5,
                    color: '#fff'
                },
                message: 'Procesando...'
            });
        },
        success: function (response) {

            if (typeof _varTablaVariable !== 'undefined') {
                _varTablaVariable.destroy();
            }
            _varTablaVariable = $('#tablaVariable').DataTable({
                data: response,
                columns: [
                    { data: 'strCoConcepto' },
                    { data: 'strDesConcepto' },
                    { data: 'strDeTipotipo' },
                    { data: 'strDeTipoum' },
                    { data: 'strActivo' },
                    {
                        sortable: false,
                        "render": (data, type, item, meta) => {
                            return `<button class="btn btn-success btn-xs btn-edit" ><i class="fa fa-pencil"></i> Editar </button>
                                           <button class="btn btn-primary btn-xs btn-delete"><i class="fa fa-trash-o"></i> Eliminar </button>`;
                        }
                    },
                ],
                lengthMenu: [10, 25, 50],
                order: [],
                responsive: true,
                language: _datatableLanguaje,
                dom: 'lBfrtip',
            });
        },
        complete: function () {
            $.unblockUI();
        },
    });

}

function TablaExtra() {

    var variable = $('#cboVariable option:selected').val();
    $.post(
        '/Asistencia/ListarHorasExtrasxPrio',
        { strEntidad: 'TGCONCEPTO', intIdFiltroGrupo: variable, strGrupo: '', strSubGrupo: '' },

        (response) => {
            $('#tb_HorasExtras').empty();
            $('#HE').empty();
            Prioridad = 1;
            response.forEach(element => {

                $('#tb_HorasExtras').append('<tr><td  style="display:none" class="id">' + element.intIdConcepto + '</td><td class="strcoconcepto">' + element.strCoConcepto + '</td><td class="strDesConcepto">' + element.strDesConcepto + '</td><td class="tinPrioridadHE">' + element.tinPrioridadHE + '</td><td><select class= "form-control ComboPrioridad" id ="Prioridad' + Prioridad + '" onchange="Prueba_(' + Prioridad + ')" > ' +

                    '</select> </td></tr>');

                $('#HE').append('<div id="abc" ><input type="hidden" class="HEP' + Prioridad + '" id="' + Prioridad + '" value="' + element.intIdConcepto + '"/></div>')


                Prioridad = Prioridad + 1;

            });
            var count_hours = response.length;

            for (var y = 1; y <= count_hours; y++) {

                for (var i = 0; i <= count_hours; i++) {

                    $('#Prioridad' + y + '').append('<option value="' + i + '" >' + i + '</option>');

                }
                //priority(count_hours, y);
                var seleccionados = new Array();
                var iddd = new Array();


                if ($('#Prioridad' + y + '  option:selected').val() !== 0) {


                } else if ($('#Prioridad' + x + '  option:selected').val() == 0) {


                    iddd.push(x);
                    seleccionados.push(selecets);

                }
            }

            $('#Reset').on('click', function () {

                for (var i = 0; i <= Prioridad; i++) {

                    $('#Prioridad' + i + '').val(0);

                }

            });
        });
}

function Prueba_(numPrio) {

    console.log('Aqui...');
    var TotalCombos = Prioridad - 1;

    //var idComboChange = $('#Prioridad' + numPrio + '').attr("id");
    var ValComboChange = $('#Prioridad' + numPrio + '').val();
    if (ValComboChange != 0) {
        for (var y = 1; y <= TotalCombos; y++) {

            if (y != numPrio) {
                //Compara con otros
                var ValComboY = $('#Prioridad' + y + '').val();

                if (ValComboChange == ValComboY) {
                    $('#Prioridad' + y + '').val(0);
                    messageResponseMix({ type: 'info', message: 'La prioridad #' + ValComboY + ' solo puede asignarse una vez. Se respeta la nueva prioridad seleccionada' }, 'Prioridad de Horas Extras')
                    return;
                }
            }

        }
    }
}
function EdiatarPrioridades() {
    var variable = $('#cboVariable option:selected').val();
    $.post(
        '/Asistencia/ListarHorasExtrasxPrio',
        { strEntidad: 'TGCONCEPTO', intIdFiltroGrupo: variable, strGrupo: '', strSubGrupo: '' },
        (response) => {


            Prioridad = 1;
            response.forEach(element => {

                if ($('#' + Prioridad + '').val() == element.intIdConcepto) {
                    $('#Prioridad' + Prioridad + '').val(element.tinPrioridadHE);

                } else if ($('#' + Prioridad + '').val() !== element.intIdConcepto) {

                    $('#Prioridad' + Prioridad + '').val(0);

                }
                Prioridad = Prioridad + 1;
            });
        });
}
function CamposAdicionalesConcepto() {

    $.post(
        '/Organizacion/CamposAdicionales',//Asistencia
        { strEntidad: 'TGCONCEPTO' },
        (response) => {
            console.log(response);
            $('#containerCampose').empty();
            response.forEach(element => {

                $('#containerCampose').append(
                    ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                    + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="Campo Adicional" maxlength="255"/>' + '</div></div>');
            });
            if (response.length == 0) {
                $('#headingSix1').hide();
            } else {
                $('#headingSix1').show();
            }
        });
}
function intentEliminarVariable(idVar, tipo, strDesc) {
    swal({
        title: "Eliminar Variable",
        text: "¿Está seguro de eliminar la variable   ''<strong>" + strDesc + "</strong>''  de tipo  " + tipo + "   ?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí, eliminar",
        cancelButtonText: "No, cancelar",
    }).then(function (isConfirm) {
        validarSession()
        if (isConfirm) {
            yesEliminaVariable(idVar);
        } else {
            //swal("Cancelado", "La Operación fue cancelada", "error");
        }
    });
}
function yesEliminaVariable(idVar) {
    $.post(
        '/Asistencia/EliminarConcepto',
        { intIdConcepto: idVar },
        (response) => {
            console.log(response);
            if (response.type !== '') {
                var tipo = 'Eliminado!';
                if (response.type === 'error')
                    tipo = 'NO SE PUEDE ELIMINAR EL REGISTRO';
                swal(tipo, response.message, response.type);

                if (response.type === 'success')
                    $('.form-hide-variable').hide();
                TablaVariable();
                TablaExtra();
                EdiatarPrioridades();
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}


function cardarDatosVariable(data) {
    $.post(
        '/Asistencia/EditarVariable',
        {
            IdVar: data.intIdConcepto, //añadido 26.05.2021
        },
        (response) => {

            if (response !== '') {
                $('.form-hide-variable .x_content').empty();
                $('.form-hide-variable .x_content').html(response);
                $('.form-hide-variable').show();
                $('#btn-update-variable').show();
                $('#btn-save-change-variable').hide();

                switcheryLoad();
                init_checkBox_styles();

                $.post(
                    '/Asistencia/ObtenerConceptoPorsuPK',
                    { intIdConcepto: data.intIdConcepto },
                    (response) => {

                        console.log(response);
                        response.forEach(element => {

                            $('#cboVariable').val(element.intTipoConcepto);
                            $('#cboVariable').attr("disabled", true);
                            var variableds = $('#cboVariable').val();

                            $.post(
                                '/Asistencia/LlenarTipoUM',
                                { strEntidad: 'TGTIPO', intIdFiltroGrupo: variableds, strGrupo: 'VARI', strSubGrupo: 'UM' },
                                (response) => {

                                    $('#campTipoum').empty();
                                    response.forEach(element2 => {
                                        if (element.intTipoUM == element2.intidTipo) {
                                            $('#campTipoum').append('<option value="' + element2.intidTipo + '" selected>' + element2.strDeTipo + '</option>');
                                        } else if (element.intTipoUM !== element2.intidTipo) {
                                            $('#campTipoum').append('<option value="' + element2.intidTipo + '">' + element2.strDeTipo + '</option>');
                                        }
                                        if ($('#campTipoum').val() == 25) {
                                            $('#Horas').show();
                                            $('#cboAplica').val(79);
                                            $('#cboRedondeo').val(82);
                                            $('#cboRedondeo').attr('disabled', true);
                                        } else {
                                            $('#Horas').hide();
                                        }
                                    });
                                    $('#campTipoum').attr('disabled');
                                });

                            $('#txt_cod_Var').val(element.strCoConcepto);
                            $('#txt_desc_Var').val(element.strDesConcepto);
                            $('#txt_codPla_Var').val(element.strCoPlaniExp);
                            $('#txt_codExte_Var').val(element.strCoPDT);
                            $('#txtIdConcepto').val(element.intIdConcepto);
                            $('#strConceptoCampo1').val(element.strConceptoCampo1);
                            $('#strConceptoCampo2').val(element.strConceptoCampo2);
                            $('#strConceptoCampo3').val(element.strConceptoCampo3);
                            $('#strConceptoCampo4').val(element.strConceptoCampo4);
                            $('#strConceptoCampo5').val(element.strConceptoCampo5);
                            $('#strConceptoCampo5').val(element.strConceptoCampo5);

                            if (element.timeHoraIni == 0) {
                            } else if (element.timeHoraIni !== 0) {
                                $('#tiempo_in').val(element.timeHoraIni);
                            }

                            if (element.timeHoraFin == 0) {
                            } else if (element.timeHoraFin !== 0) {
                                $('#tiempo_fil').val(element.timeHoraFin);
                            }

                            if (element.timeTiempoMin == 0) {
                            } else if (element.timeTiempoMin !== 0) {
                                $('#tiempo_min').val(element.timeTiempoMin);
                            }

                            if (element.timeTolerancia == 0) {
                            } else if (element.timeTolerancia !== 0) {
                                $('#tiempo_tol').val(element.timeTolerancia);
                            }

                            if (element.bitHoraIni == 1) {
                                $('#bitBonoEspIni').iCheck('check');
                            }
                            if (element.bitHoraFin == 1) {
                                $('#bitBonoEspFin').iCheck('check');
                            }

                            if (element.bitClasifica == 0) {
                                $('#chck_inc').iCheck('check');
                                $('#chck_ause').iCheck('uncheck');
                            } else if (element.bitClasifica == 1) {
                                $('#chck_inc').iCheck('uncheck');
                                $('#chck_ause').iCheck('check');
                            }

                            if (element.bitClasifica == 0) {
                                $('#chck_inc').iCheck('check');
                                $('#chck_ause').iCheck('uncheck');
                            } else if (element.bitClasifica == 1) {
                                $('#chck_inc').iCheck('uncheck');
                                $('#chck_ause').iCheck('check');
                            }


                            if (element.bitReqMarca == 0) {
                                $('#chck_Requiere').iCheck('uncheck');
                            } else if (element.bitReqMarca == 1) {
                                $('#chck_Requiere').iCheck('check');
                            }

                            if (element.bitPermiteMarca == 0) {
                                $('#chck_Permite').iCheck('uncheck');
                            } else if (element.bitPermiteMarca == 1) {
                                $('#chck_Permite').iCheck('check');
                            }

                            $('#chck_Permite').on('ifChanged', function () {
                                if ($('#chck_Permite').is(':checked') == true) {
                                    $('#chck_Requiere').iCheck('uncheck');
                                }
                            });
                            $('#chck_Requiere').on('ifChanged', function () {
                                if ($('#chck_Requiere').is(':checked') == true) {
                                    $('#chck_Permite').iCheck('uncheck');
                                }
                            });


                            if (element.bitAplTodosDias == 0) {
                                $('#chck_ToDias').iCheck('uncheck');
                            } else if (element.bitAplTodosDias == 1) {
                                $('#chck_ToDias').iCheck('check');
                            }

                            if (element.bitAplDiaLabor == 0) {
                                $('#chck_DiLab').iCheck('uncheck');
                            } else if (element.bitAplTodosDias == 1) {
                                $('#chck_DiLab').iCheck('check');
                            }

                            if (element.bitAplDiaDescanso == 0) {
                                $('#chck_DiDesc').iCheck('uncheck');
                            } else if (element.bitAplTodosDias == 1) {
                                $('#chck_DiDesc').iCheck('check');
                            }

                            if (element.bitAplDiaFeriado == 0) {
                                $('#chck_DiFer').iCheck('uncheck');
                            } else if (element.bitAplTodosDias == 1) {
                                $('#chck_DiFer').iCheck('check');
                            }

                            if (element.bitAplDiaSabado == 0) {
                                $('#chck_DiSab').iCheck('uncheck');
                            } else if (element.bitAplDiaSabado == 1) {
                                $('#chck_DiSab').iCheck('check');
                            }

                            if (element.bitAplDiaDomingo == 0) {
                                $('#chck_DiDom').iCheck('uncheck');
                            } else if (element.bitAplDiaDomingo == 1) {
                                $('#chck_DiDom').iCheck('check');
                            }

                            if (element.smlTipoRedondeo == 0) {
                                $('#cboTipoRed').val(75);
                            } else if (element.smlTipoRedondeo !== 0) {
                                $('#cboTipoRed').val(element.smlTipoRedondeo);
                            }

                            if (element.smlFormaRedond == 0 && element.smlFormaRedond == 1) {
                            } else if (element.smlAplicaRedond !== 0 && element.smlFormaRedond !== 1) {
                                $('#cboAplica').val(element.smlAplicaRedond);
                            }

                            $('#Redondeo').val(element.intTiempoRedond);

                            if (element.smlFormaRedond == 0 && element.smlFormaRedond == 1) {

                            } else if (element.smlFormaRedond !== 0 && element.smlFormaRedond !== 1) {
                                $('#cboRedondeo').val(element.smlFormaRedond);
                            }

                            if (element.bitFlHT == 0) {
                                $('#chckHorTra').iCheck('uncheck');
                            } else if (element.bitFlHT == 1) {
                                $('#chckHorTra').iCheck('check');
                            }

                            if (element.bitFlDT == 0) {
                                $('#chckDiaTra').iCheck('uncheck');
                            } else if (element.bitFlDT == 1) {
                                $('#chckDiaTra').iCheck('check');
                            }


                            if (element.bitFlHTE == 0) {
                                $('#chckTraEfec').iCheck('uncheck');
                            } else if (element.bitFlDT == 1) {
                                $('#chckTraEfec').iCheck('check');
                            }

                            if (element.bitExportPlani == 0) {
                                $('#chckExpPlan').iCheck('uncheck');
                            } else if (element.bitExportPlani == 1) {
                                $('#chckExpPlan').iCheck('check');
                            }

                            if (element.bitFlSubsidio == 0) {
                                $('#chckExpSubs').iCheck('uncheck');
                            } else if (element.bitFlSubsidio == 1) {
                                $('#chckExpSubs').iCheck('check');
                            }

                            if (element.bitFlDiaNoLabNiSub == 0) {
                                $('#chckExpNoTraNoSubs').iCheck('uncheck');
                            } else if (element.bitFlDiaNoLabNiSub == 1) {
                                $('#chckExpNoTraNoSubs').iCheck('check');
                            }

                            if (element.bitFlCTS == 0) {
                                $('#chckCalculoCTS').iCheck('uncheck');
                            } else if (element.bitFlCTS == 1) {
                                $('#chckCalculoCTS').iCheck('check');
                            }

                            if (element.bitFlActivo == 0) {
                                $('#11').html('<label id="_lbl_">Inactivo</label> <input type = "checkbox" id = "chck_Activo_Var" class= "js-switch" /><script>switcheryLoad();</script >');
                            } else if (element.bitFlActivo == 1) {
                                $('#11').html('<label id="_lbl_">Activo</label> <input type = "checkbox" id = "chck_Activo_Var" class= "js-switch" checked /><script>switcheryLoad();</script >');
                            }

                            if (element.bitFlGenerarHA == 0) {
                                $('#chckGenerHoras').iCheck('uncheck');
                            } else if (element.bitFlGenerarHA == 1) {
                                $('#chckGenerHoras').iCheck('check');
                            }


                            if ($('#cboVariable option:selected').val() == 31) {
                                $('#txt_cod_Var').attr('disabled', true);
                                $('#campTipoum').attr('disabled', true);
                            }

                            $('#Incidencia-det').show();

                            //EDITAR VARIABLE:
                            if ($('#cboVariable').val() == 30) { //Justificación
                                $('#Ausencia-det').show();//añadido 27.09.2021
                                $('#GeneralChecks').show();
                                $('#Todos').show();
                                $('#BonificaCheck').hide();//añadido 27.09.2021
                                $('#extras').hide();
                                $('#Marcas-det').show();
                                $('#bonificacion-det').show();
                                $('#bonificacion-det').html('<p>' +
                                    '<input type = "checkbox" id = "chck_Descontable" class= "flat" name = "iCheck2" > Descontable</p>' +
                                    '<p id="Comp_" hidden><input type = "checkbox" id = "chckCompensable" class= "flat" name = "iCheck2" > Compensable</p>' +
                                    '<p><input type="checkbox" id="chck_Sustentación" class="flat" name="iCheck2"> Sustentación</p>');
                                init_checkBox_styles();
                                $('#Específicos').hide();
                                $('#horarios-det').hide();
                                $('#UsoMax-Det').show();//añadido 27.09.2021
                                $('#ConfiguracionBonificaciones').hide();
                                $('#Acumulables').show();
                                $('#cboRedondeo').attr('disabled', false);
                                $('#Comp_').hide();

                                $('#chck_Descontable').on('ifChanged', function () {
                                    if ($('#chck_Descontable').is(':checked') == true) {
                                        $('#chckCompensable').iCheck('uncheck');
                                        $('#Comp_').show();
                                    } else {
                                        $('#Comp_').hide();
                                    }
                                });
                                $('#chck_Permite').on('ifChanged', function () {
                                    if ($('#chck_Permite').is(':checked') == true) {
                                        $('#chck_Requiere').iCheck('uncheck');
                                    }
                                });
                                $('#chck_Requiere').on('ifChanged', function () {
                                    if ($('#chck_Requiere').is(':checked') == true) {
                                        $('#chck_Permite').iCheck('uncheck');
                                    }
                                });
                            }
                            else if ($('#cboVariable').val() == 31) {//Internos
                                $('#Ausencia-det').show();//añadido 27.09.2021
                                $('#GeneralChecks').show();
                                $('#Todos').hide();
                                $('#BonificaCheck').hide();//añadido 27.09.2021
                                $('#extras').hide();
                                $('#Marcas-det').show();
                                $('#bonificacion-det').show();
                                $('#bonificacion-det').html('<p>' +
                                    '<input type = "checkbox" id = "chck_Descontable" class= "flat" name = "iCheck2" > Descontable</p>' +
                                    '<p id="Comp_" hidden><input type = "checkbox" id = "chckCompensable" class= "flat" name = "iCheck2" > Compensable</p>' +
                                    '<p><input type="checkbox" id="chck_Sustentación" class="flat" name="iCheck2"> Sustentación</p>');
                                init_checkBox_styles();
                                $('#Específicos').hide();
                                $('#horarios-det').hide();
                                $('#UsoMax-Det').show();//añadido 27.09.2021
                                $('#ConfiguracionBonificaciones').hide();
                                $('#Acumulables').hide();
                                $('#Comp_').hide();

                                $('#chck_Descontable').on('ifChanged', function () {
                                    if ($('#chck_Descontable').is(':checked') == true) {
                                        $('#chckCompensable').iCheck('uncheck');
                                        $('#Comp_').show();
                                    } else {
                                        $('#Comp_').hide();
                                    }
                                });
                                $('#chck_Permite').on('ifChanged', function () {
                                    if ($('#chck_Permite').is(':checked') == true) {
                                        $('#chck_Requiere').iCheck('uncheck');
                                    }
                                });
                                $('#chck_Requiere').on('ifChanged', function () {
                                    if ($('#chck_Requiere').is(':checked') == true) {
                                        $('#chck_Permite').iCheck('uncheck');
                                    }
                                });

                            }
                            else if ($('#cboVariable').val() == 32) {//Extras
                                $('#Ausencia-det').hide();//añadido 27.09.2021
                                $('#GeneralChecks').hide();
                                $('#extras').show();
                                $('#UsoMax-Det').hide();//añadido 27.09.2021
                                $('#bonificacion-det').hide();
                                TablaExtra();
                                EdiatarPrioridades();
                                $('#horarios-det').hide();
                                $('#Específicos').hide();
                                $('#ConfiguracionBonificaciones').hide();
                                $('#Marcas-det').hide();
                                $('#Acumulables').hide();
                                $('#cboRedondeo').attr('disabled', false);
                            }
                            else if ($('#cboVariable').val() == 33) {//Bonifica
                                $('#Ausencia-det').hide();//añadido 27.09.2021
                                //Limpiar checks
                                $('#chck_DiLab').iCheck('uncheck');
                                $('#chck_DiDesc').iCheck('uncheck');
                                $('#chck_DiFer').iCheck('uncheck');
                                $('#chck_DiSab').iCheck('uncheck');
                                $('#chck_DiDom').iCheck('uncheck');
                                $('#GeneralChecks').show();
                                $('#Todos').hide();
                                $('#BonificaCheck').show();//añadido 27.09.2021
                                $('#extras').hide();
                                //$('#Específicos').hide();
                                $('#bonificacion-det').html('<p>' +
                                    '<input type = "radio" id = "chck_Total" class= "flat" checked name = "iCheck1" > Bono Total' +
                                    '</p ><p><input type="radio" id="chck_Específico" class="flat" name="iCheck1"> Bono Específico' +
                                    '</p>');
                                $('#horarios-det').html('<p>' +
                                    '<input type="radio" id="chck_HorTotal" class="flat" checked name="iCheck3X"<input type="radio" id="chck_HorTotal" class="flat" checked name="iCheck3X"> Cualquier Jornada' +
                                    '</p ><p><input type="radio" id="chck_HorEspeci" class="flat" name="iCheck3X"> Jornadas Específicas' +
                                    '</p>');
                                $('#UsoMax-Det').hide();//añadido 27.09.2021
                                $('#Específicos').hide();
                                $('#Marcas-det').hide();
                                $('#bonificacion-det').show();
                                $('#horarios-det').show();
                                $('#cboRedondeo').attr('disabled', false);

                                $('#chck_Específico').on('ifChanged', function (event) {
                                    if ($('#chck_Específico').is(':checked') == true) {
                                        $('#ConfiguracionBonificaciones').show();
                                    } else {
                                        $('#ConfiguracionBonificaciones').hide();
                                    }
                                });
                                if ($('#chck_Específico').is(':checked') == true) {
                                    $('#ConfiguracionBonificaciones').show();
                                } else {
                                    $('#ConfiguracionBonificaciones').hide();
                                }

                                $('#chck_HorEspeci').on('ifChanged', function (event) {
                                    if ($('#chck_HorEspeci').is(':checked') == true) {
                                        $('#Específicos').show();
                                    } else {
                                        $('#Específicos').hide();
                                    }
                                });
                                if ($('#chck_HorEspeci').is(':checked') == true) {
                                    $('#Específicos').show();
                                } else {
                                    $('#Específicos').hide();
                                }

                                init_checkBox_styles();

                                $('#selects').on('ifChanged', function () {
                                    if ($('#selects').is(':checked') == true) {
                                        $('#ListaHorario option').prop('hidden', true);
                                        $('#ListaHorario option:selected').prop('hidden', false);
                                    } else {
                                        $('#ListaHorario option').prop('hidden', false);
                                    }
                                });

                                $('#select_All').on('ifChanged', function () {
                                    if ($('#select_All').is(':checked') == true) {
                                        $('#ListaHorario option').prop('selected', true);
                                    } else {
                                        $('#ListaHorario option').prop('selected', false);
                                    }
                                });

                                if (element.intIdTipBoni == 4) {
                                    $('#chck_Específico').iCheck('check');
                                } else if (element.intIdTipBoni == 3) {
                                    $('#chck_Específico').iCheck('uncheck');
                                }

                            }
                            else {
                                $('#Ausencia-det').show();//añadido 27.09.2021
                                $('#GeneralChecks').hide();
                                $('#Todos').hide();
                                $('#BonificaCheck').hide();//añadido 27.09.2021
                                $('#extras').hide();
                                $('#cboRedondeo').attr('disabled', false);
                                $('#Acumulables').hide();
                            }


                            $('#cboVariable').on('change', function () { //modificado 27.09.2021 #2 - EDITAR
                                $('#Incidencia-det').show();
                                if ($('#cboVariable').val() == 30) {//Justi
                                    $('#Ausencia-det').show();//añadido 27.09.2021
                                    $('#GeneralChecks').show();
                                    $('#Todos').show();
                                    $('#BonificaCheck').hide();//añadido 27.09.2021
                                    $('#extras').hide();
                                    $('#Marcas-det').show();
                                    $('#bonificacion-det').show();
                                    $('#bonificacion-det').html('<p>' +
                                        '<input type = "checkbox" id = "chck_Descontable" class= "flat" name = "iCheck2" > Descontable</p>' +
                                        '<p id="Comp_" hidden><input type = "checkbox" id = "chckCompensable" class= "flat" name = "iCheck2" > Compensable</p>' +
                                        '<p><input type="checkbox" id="chck_Sustentación" class="flat" name="iCheck2"> Sustentación</p>');
                                    init_checkBox_styles();
                                    $('#Específicos').hide();
                                    $('#horarios-det').hide();
                                    $('#UsoMax-Det').hide();//añadido 27.09.2021
                                    $('#ConfiguracionBonificaciones').hide();
                                    $('#Acumulables').show();
                                    $('#Comp_').hide();

                                    $('#chck_Descontable').on('ifChanged', function () {
                                        if ($('#chck_Descontable').is(':checked') == true) {
                                            $('#chckCompensable').iCheck('uncheck');
                                            $('#Comp_').show();
                                        } else {
                                            $('#Comp_').hide();
                                        }
                                    });
                                    $('#chck_Permite').on('ifChanged', function () {
                                        if ($('#chck_Permite').is(':checked') == true) {
                                            $('#chck_Requiere').iCheck('uncheck');
                                        }
                                    });
                                    $('#chck_Requiere').on('ifChanged', function () {
                                        if ($('#chck_Requiere').is(':checked') == true) {
                                            $('#chck_Permite').iCheck('uncheck');
                                        }
                                    });

                                }
                                else if ($('#cboVariable').val() == 31) {//Internas
                                    $('#Ausencia-det').show();//añadido 27.09.2021
                                    $('#GeneralChecks').show();
                                    $('#Todos').hide();
                                    $('#BonificaCheck').hide();//añadido 27.09.2021
                                    $('#extras').hide();
                                    $('#Marcas-det').show();
                                    $('#bonificacion-det').show();
                                    $('#bonificacion-det').html('<p>' +
                                        '<input type = "checkbox" id = "chck_Descontable" class= "flat" name = "iCheck2" > Descontable</p>' +
                                        '<p id="Comp_" hidden><input type = "checkbox" id = "chckCompensable" class= "flat" name = "iCheck2" > Compensable</p>' +
                                        '<p><input type="checkbox" id="chck_Sustentación" class="flat" name="iCheck2"> Sustentación</p>');
                                    init_checkBox_styles();
                                    $('#Específicos').hide();
                                    $('#horarios-det').hide();
                                    $('#UsoMax-Det').show();//añadido 27.09.2021
                                    $('#ConfiguracionBonificaciones').hide();
                                    $('#Acumulables').hide();
                                    $('#Comp_').hide();

                                    $('#chck_Descontable').on('ifChanged', function () {
                                        if ($('#chck_Descontable').is(':checked') == true) {
                                            $('#chckCompensable').iCheck('uncheck');
                                            $('#Comp_').show();
                                        } else {
                                            $('#Comp_').hide();
                                        }
                                    });
                                    $('#chck_Permite').on('ifChanged', function () {
                                        if ($('#chck_Permite').is(':checked') == true) {
                                            $('#chck_Requiere').iCheck('uncheck');
                                        }
                                    });
                                    $('#chck_Requiere').on('ifChanged', function () {
                                        if ($('#chck_Requiere').is(':checked') == true) {
                                            $('#chck_Permite').iCheck('uncheck');
                                        }
                                    });
                                }
                                else if ($('#cboVariable').val() == 32) {//H.E.
                                    $('#Ausencia-det').hide();//añadido 27.09.2021
                                    $('#GeneralChecks').hide();
                                    $('#extras').show();
                                    $('#horarios-det').show();
                                    $('#bonificacion-det').hide();
                                    TablaExtra();
                                    EdiatarPrioridades();
                                    $('#horarios-det').hide();
                                    $('#UsoMax-Det').hide();//añadido 27.09.2021
                                    $('#Específicos').hide();
                                    $('#ConfiguracionBonificaciones').hide();
                                    $('#Marcas-det').hide();
                                    $('#Acumulables').hide();

                                }
                                else if ($('#cboVariable').val() == 33) {//Bonos
                                    $('#Ausencia-det').hide();//añadido 27.09.2021
                                    //Limpiar checks
                                    $('#chck_DiLab').iCheck('uncheck');
                                    $('#chck_DiDesc').iCheck('uncheck');
                                    $('#chck_DiFer').iCheck('uncheck');
                                    $('#chck_DiSab').iCheck('uncheck');
                                    $('#chck_DiDom').iCheck('uncheck');
                                    $('#GeneralChecks').show();
                                    $('#Todos').hide();
                                    $('#BonificaCheck').show();//añadido 27.09.2021
                                    $('#extras').hide();
                                    $('#bonificacion-det').html('<p>' +
                                        '<input type = "radio" id = "chck_Total" class= "flat" checked name = "iCheck1" > Bono Total' +
                                        '</p ><p><input type="radio" id="chck_Específico" class="flat" name="iCheck1"> Bono Específico' +
                                        '</p>');
                                    $('#horarios-det').html('<p>' +
                                        '<input type="radio" id="chck_HorTotal" class="flat" checked name="iCheck3X"<input type="radio" id="chck_HorTotal" class="flat" checked name="iCheck3X"> Cualquier Jornada' +
                                        '</p ><p><input type="radio" id="chck_HorEspeci" class="flat" name="iCheck3X"> Jornadas Específicas' +
                                        '</p>');
                                    $('#UsoMax-Det').hide();//añadido 27.09.2021
                                    $('#Específicos').hide();
                                    $('#Marcas-det').hide();
                                    $('#bonificacion-det').show();
                                    $('#horarios-det').show();

                                    $('#chck_Específico').on('ifChanged', function (event) {
                                        if ($('#chck_Específico').is(':checked') == true) {
                                            $('#ConfiguracionBonificaciones').show();
                                        } else {
                                            $('#ConfiguracionBonificaciones').hide();
                                        }
                                    });
                                    if ($('#chck_Específico').is(':checked') == true) {
                                        $('#ConfiguracionBonificaciones').show();
                                    } else {
                                        $('#ConfiguracionBonificaciones').hide();
                                    }
                                    $('#chck_HorEspeci').on('ifChanged', function (event) {
                                        if ($('#chck_HorEspeci').is(':checked') == true) {
                                            $('#Específicos').show();
                                        } else {
                                            $('#Específicos').hide();
                                        }
                                    });
                                    if ($('#chck_HorEspeci').is(':checked') == true) {
                                        $('#Específicos').show();
                                    } else {
                                        $('#Específicos').hide();
                                    }
                                    init_checkBox_styles();

                                    $('#selects').on('ifChanged', function () {
                                        if ($('#selects').is(':checked') == true) {
                                            $('#ListaHorario option').prop('hidden', true);
                                            $('#ListaHorario option:selected').prop('hidden', false);
                                        } else {
                                            $('#ListaHorario option').prop('hidden', false);
                                        }
                                    });

                                    $('#select_All').on('ifChanged', function () {
                                        if ($('#select_All').is(':checked') == true) {
                                            $('#ListaHorario option').prop('selected', true);
                                        } else {
                                            $('#ListaHorario option').prop('selected', false);
                                        }
                                    });

                                }
                                else {
                                    $('#Ausencia-det').show();//añadido 27.09.2021
                                    $('#GeneralChecks').hide();
                                    $('#Todos').hide();
                                    $('#BonificaCheck').hide();//añadido 27.09.2021
                                    $('#extras').hide();
                                    $('#Acumulables').hide();
                                }

                            });

                            $('#campTipoum').on('change', function () {

                                if ($('#campTipoum').val() == 25) {
                                    $('#Horas').show();
                                    $('#cboAplica').val(79);
                                    $('#cboRedondeo').val(82);
                                    $('#cboRedondeo').attr('disabled', false);
                                } else {
                                    $('#Horas').hide();

                                }

                            });

                            $('#cboAplica').on('change', function () {
                                if ($('#cboAplica').val() == 79) {
                                    $('#cboRedondeo').val(82);
                                    $('#cboRedondeo').attr('disabled', false);

                                } else {
                                    $('#cboRedondeo').val('Seleccione');
                                    $('#cboRedondeo').attr('disabled', true);
                                }
                            });

                            $('#cboTipoRed').on('change', function () {

                                if ($('#cboTipoRed').val() == 76) {
                                    $('#ChnageRedondeo').empty();

                                    $('#ChnageRedondeo').html('<label>Factor de Redondeo(Tiempo)</label>' +
                                        '<select class= "form-control" id = "Redondeo" disabled>' +
                                        '<option value="0">00:00</option>' +
                                        '<option value="5">00:05</option>' +
                                        '<option value="10">00:10</option>' +
                                        '<option value="15">00:15</option>' +
                                        '<option value="20">00:20</option>' +
                                        '<option value="25">00:25</option>' +
                                        '<option value="30">00:30</option>' +
                                        '<option value="60">01:00</option>' +
                                        '</select >');

                                    $('#Redondeo').attr('disabled', false);
                                    $('#Redondeo').val(5);

                                } else if ($('#cboTipoRed').val() == 77) {
                                    $('#ChnageRedondeo').empty();
                                    $('#ChnageRedondeo').html('<label>Factor de Redondeo(Tiempo)</label>' +
                                        '<select class= "form-control" id = "Redondeo" disabled>' +
                                        '<option value="0">00:00</option>' +
                                        '<option value="5">00:05</option>' +
                                        '<option value="10">00:10</option>' +
                                        '<option value="15">00:15</option>' +
                                        '<option value="20">00:20</option>' +
                                        '<option value="25">00:25</option>' +
                                        '<option value="30">00:30</option>' +
                                        '<option value="60">01:00</option>' +
                                        '</select >');

                                    $('#Redondeo').attr('disabled', false);
                                    $('#Redondeo').val(60);

                                } else if ($('#cboTipoRed').val() == 78) {

                                    $('#Redondeo').attr('disabled', false);
                                    $('#Redondeo').val(30);
                                    $('#ChnageRedondeo').empty();

                                    $('#ChnageRedondeo').html('<label>Factor de Redondeo(Tiempo)</label>' +
                                        '<input type="time" id="tiempo_in" min="00:00"' +
                                        ' max="24:00" accept="hh:mm" value="00:00" class="form-control" />');


                                } else {
                                    $('#ChnageRedondeo').empty();
                                    $('#ChnageRedondeo').html('<label>Factor de Redondeo(Tiempo)</label>' +
                                        '<select class= "form-control" id = "Redondeo" disabled>' +
                                        '<option value="0">00:00</option>' +
                                        '<option value="5">00:05</option>' +
                                        '<option value="10">00:10</option>' +
                                        '<option value="15">00:15</option>' +
                                        '<option value="20">00:20</option>' +
                                        '<option value="25">00:25</option>' +
                                        '<option value="30">00:30</option>' +
                                        '<option value="60">01:00</option>' +
                                        '</select >');
                                    $('#Redondeo').attr('disabled', true);
                                    $('#Redondeo').val(0);
                                }
                            });

                            $('#txtMaxUso').val(element.intUsoMaximo);

                            if (element.bitSustentacion == 0) {
                                $('#chck_Sustentación').iCheck('uncheck');
                            } else if (element.bitSustentacion == 1) {
                                $('#chck_Sustentación').iCheck('check');
                            }

                            if (element.bitFlGrati == 0) {
                                $('#chckCalculoGrat').iCheck('uncheck');
                            } else if (element.bitFlGrati == 1) {
                                $('#chckCalculoGrat').iCheck('check');
                            }

                            if (element.bitFlDescontable == 0) {
                                $('#chck_Descontable').iCheck('uncheck');
                            } else if (element.bitFlDescontable == 1) {
                                $('#chck_Descontable').iCheck('check');
                            }
                            if (element.tinFlCompensacion == 0) {
                                $('#chckCompensable').iCheck('uncheck');
                            } else if (element.tinFlCompensacion == 1) {
                                $('#chckCompensable').iCheck('check');
                            }
                            if (element.bitFlUtilidades == false) {
                                $('#chckCalidadUtili').iCheck('uncheck');
                            } else if (element.bitFlUtilidades == true) {
                                $('#chckCalidadUtili').iCheck('check');
                            }

                            if (element.bitJornadaEspecif == false) {
                                $('#chck_HorTotal').iCheck('check');
                            } else if (element.bitJornadaEspecif == true) {
                                $('#chck_HorEspeci').iCheck('check');
                            }

                            if (element.intIdTipBoni == 4) {
                                $('#chck_Específico').iCheck('check');
                            } else if (element.intIdTipBoni == 3) {
                                $('#chck_Total').iCheck('check');
                            }
                            //--> (#01)
                            $.post(
                                '/Asistencia/ListarHorarioEspecifico',
                                { strEntidad: 'TGJOR_BON_DET', intId: data.intIdConcepto, intUso: 1, strGrupo: '', strSubGrupo: '' },
                                (response) => {
                                    response.forEach(element => {
                                        $('#ListaHorario option[value=' + element.intIdTipRegimen + ']').prop('selected', true);
                                    });
                                });

                        });
                        TablaExtra();
                        EdiatarPrioridades();

                        var txtco = 'strCoConcepto'
                        var txtdes = 'strDesConcepto'
                        var txtcoPla = 'strCoPlaniExp'
                        var txtcoPDT = 'strCoPDT'

                        $.post(
                            '/Organizacion/ListarCaracteresMax',
                            { strMaestro: 'TGCONCEPTO' },
                            (response) => {
                                response.forEach(element => {
                                    if (element.strColumnName == txtco) {
                                        $('.Valco').children("input").attr('maxlength', element.intMaxLength);
                                    } else if (element.strColumnName == txtdes) {
                                        $('.Valdes').children("input").attr('maxlength', element.intMaxLength);
                                    } else if (element.strColumnName == txtcoPla) {
                                        $('.ValcoPla').children("input").attr('maxlength', element.intMaxLength);
                                    } else if (element.strColumnName == txtcoPDT) {
                                        $('.ValcoExt').children("input").attr('maxlength', element.intMaxLength);
                                    }
                                });
                            });

                    });
            }
        });
}
function LlenarTipoVar() {
    $.post(
        '/Asistencia/LlenarTipoVar',
        {},
        (response) => {
            if (true) {
                response.forEach(element => {
                    $('#campTipoVar').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
                });
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}

$('#tablaVariable  tbody').on('click', 'tr button.btn-delete', function () {
    validarSession()
    var data = _varTablaVariable.row($(this).parents('tr')).data();

    if (data == null) {
        data = null;

        var data = _varTablaVariable.row($(this).parents('li')).data();
        intentEliminarVariable(data['intIdConcepto'], data['strDeTipotipo'], data['strDesConcepto']);
    } else {
        var data = _varTablaVariable.row($(this).parents('tr')).data();
        intentEliminarVariable(data['intIdConcepto'], data['strDeTipotipo'], data['strDesConcepto']);
    }
});
$('#tablaVariable  tbody').on('click', 'tr button.btn-edit', function () {
    validarSession()
    var data = _varTablaVariable.row($(this).parents('tr')).data();
    if (data == null) {
        data = null;
        var data = _varTablaVariable.row($(this).parents('li')).data();
        cardarDatosVariable(data);
    } else {
        var data = _varTablaVariable.row($(this).parents('tr')).data();
        cardarDatosVariable(data);
    }
});
$('#btn-new-variable').on('click', function () {
    validarSession()
    $('#btn-update-variable').hide();
    $('#btn-save-change-variable').show();
    $('.form-hide-variable').show();
    $.post(
        '/Asistencia/NuevoVariable',
        {},
        (response) => {
            if (response !== '') {
                $('.form-hide-variable .x_content').empty();
                $('.form-hide-variable .x_content').html(response);
                $('.form-hide-variable').show();
                switcheryLoad();

                $('#cboRedondeo').attr('disabled', true);
                $('#cboVariable').on('change', function () { //modificado 27.09.2021 #1 - Nuevo
                    $('#Incidencia-det').show();

                    var variable = $('#cboVariable').val();
                    $('#campTipoum').empty();
                    if (variable == 'undefinied' || variable == '') {
                        $('#campTipoum').attr('disabled', true);
                    } else {
                        $.post(
                            '/Asistencia/LlenarTipoUM',
                            { strEntidad: 'TGTIPO', intIdFiltroGrupo: variable, strGrupo: 'VARI', strSubGrupo: 'UM' },
                            (response) => {
                                $('#campTipoum').append('<option value=0> Seleccione </option>');
                                response.forEach(element => {
                                    $('#campTipoum').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
                                });
                                $('#campTipoum').attr('disabled', false);
                            });
                    }

                    if ($('#cboVariable').val() == 30) {//Justi
                        $('#Ausencia-det').show();//añadido 27.09.2021
                        $('#GeneralChecks').show();
                        $('#Todos').show();
                        $('#BonificaCheck').hide();//añadido 27.09.2021
                        $('#extras').hide();
                        $('#Marcas-det').show();
                        $('#bonificacion-det').show();
                        $('#bonificacion-det').html('<p>' +
                            '<input type = "checkbox" id = "chck_Descontable" class= "flat"  name = "iCheck9" > Descontable</p>' +
                            '<p id="Comp_" hidden><input type = "checkbox" id = "chckCompensable" class= "flat" name = "iCheck9" > Compensable</p>' +
                            '<p><input type="checkbox" id="chck_Sustentación" class="flat" name="iCheck5"> Sustentación</p>');
                        init_checkBox_styles();
                        $('#Específicos').hide();
                        $('#horarios-det').hide();//modificado 27.09.2021
                        $('#UsoMax-Det').show();//añadido 27.09.2021
                        $('#ConfiguracionBonificaciones').hide();
                        $('#Acumulables').show();
                        $('#chck_Sustentación').iCheck('uncheck');
                        $('#chck_Descontable').iCheck('uncheck');
                        $('#chck_Permite').iCheck('uncheck');
                        $('#chck_Requiere').iCheck('uncheck');
                        $('#Comp_').hide();

                        $('#chck_Descontable').on('ifChanged', function () {
                            if ($('#chck_Descontable').is(':checked') == true) {
                                $('#chckCompensable').iCheck('uncheck');
                                $('#Comp_').show();
                            } else {
                                $('#Comp_').hide();
                            }
                        });
                        $('#chck_Permite').on('ifChanged', function () {
                            if ($('#chck_Permite').is(':checked') == true) {
                                $('#chck_Requiere').iCheck('uncheck');
                            }
                        });
                        $('#chck_Requiere').on('ifChanged', function () {
                            if ($('#chck_Requiere').is(':checked') == true) {
                                $('#chck_Permite').iCheck('uncheck');
                            }
                        });

                        $("#chck_ToDias").iCheck('uncheck');

                        $('#chck_ToDias').on('ifChecked', function () {
                            $("#chck_DiLab").iCheck('uncheck');
                        });
                        $('#chck_DiLab').on('ifChecked', function () {
                            $("#chck_ToDias").iCheck('uncheck');
                        });
                    }//Justi
                    else if ($('#cboVariable').val() == 31) {//Internas
                        $('#Ausencia-det').show();//añadido 27.09.2021
                        $('#GeneralChecks').show();
                        $('#Todos').hide();
                        $('#BonificaCheck').hide();//añadido 27.09.2021
                        $('#extras').hide();
                        $('#Marcas-det').show();
                        $('#bonificacion-det').show();
                        $('#bonificacion-det').html('<p>' +
                            '<input type = "checkbox" id = "chck_Descontable" class= "flat"  name = "iCheck9" > Descontable</p>' +
                            '<p id="Comp_" hidden><input type = "checkbox" id = "chckCompensable" class= "flat" name = "iCheck9" > Compensable</p>' +
                            '<p><input type="checkbox" id="chck_Sustentación" class="flat" name="iCheck5"> Sustentación</p>');
                        init_checkBox_styles();
                        $('#Específicos').hide();
                        $('#horarios-det').hide();
                        $('#UsoMax-Det').show();//añadido 27.09.2021
                        $('#ConfiguracionBonificaciones').hide();
                        $('#Acumulables').hide();
                        $('#chck_Sustentación').iCheck('uncheck');
                        $('#chck_Descontable').iCheck('uncheck');
                        $('#chck_Permite').iCheck('uncheck');
                        $('#chck_Requiere').iCheck('uncheck');
                        $('#Comp_').hide();

                        $('#chck_Descontable').on('ifChanged', function () {
                            if ($('#chck_Descontable').is(':checked') == true) {
                                $('#chckCompensable').iCheck('uncheck');
                                $('#Comp_').show();
                            } else {
                                $('#Comp_').hide();
                            }
                        });
                        $('#chck_Permite').on('ifChanged', function () {
                            if ($('#chck_Permite').is(':checked') == true) {
                                $('#chck_Requiere').iCheck('uncheck');
                            }
                        });
                        $('#chck_Requiere').on('ifChanged', function () {
                            if ($('#chck_Requiere').is(':checked') == true) {
                                $('#chck_Permite').iCheck('uncheck');
                            }
                        });
                    }
                    else if ($('#cboVariable').val() == 32) {//H.E.
                        $('#Ausencia-det').hide();//añadido 27.09.2021
                        $('#GeneralChecks').hide();
                        $('#extras').show();
                        $('#UsoMax-Det').hide();//añadido 27.09.2021
                        $('#bonificacion-det').hide();
                        TablaExtra();
                        EdiatarPrioridades();

                        $('#horarios-det').hide();
                        $('#Específicos').hide();
                        $('#ConfiguracionBonificaciones').hide();
                        $('#Marcas-det').hide();
                        $('#Acumulables').hide();

                    }
                    else if ($('#cboVariable').val() == 33) {//Bonificacion
                        $('#Ausencia-det').hide();//añadido 27.09.2021
                        //Limpiar checks
                        $('#chck_DiLab').iCheck('uncheck');
                        $('#chck_DiDesc').iCheck('uncheck');
                        $('#chck_DiFer').iCheck('uncheck');
                        $('#chck_DiSab').iCheck('uncheck');
                        $('#chck_DiDom').iCheck('uncheck');

                        $('#GeneralChecks').show();
                        $('#Todos').hide();
                        $('#BonificaCheck').show();//añadido 27.09.2021
                        $('#extras').hide();
                        $('#bonificacion-det').html('<p>' +
                            '<input type = "radio" id = "chck_Total" class= "flat" checked name = "iCheck1" > Bono Total' +
                            '</p ><p><input type="radio" id="chck_Específico" class="flat" name="iCheck1"> Bono Específico' +
                            '</p>');
                        $('#horarios-det').html('<p>' +
                            '<input type="radio" id="chck_HorTotal" class="flat" checked name="iCheck3X"<input type="radio" id="chck_HorTotal" class="flat" checked name="iCheck3X"> Cualquier Jornada' +
                            '</p ><p><input type="radio" id="chck_HorEspeci" class="flat" name="iCheck3X"> Jornadas Específicas' +
                            '</p>');
                        $('#horarios-det').show();//modificado 27.09.2021
                        $('#UsoMax-Det').hide();//añadido 27.09.2021
                        $('#Marcas-det').hide();
                        $('#bonificacion-det').show();
                        $('#Específicos').hide();

                        $('#chck_Específico').on('ifChanged', function (event) {
                            if ($('#chck_Específico').is(':checked') == true) {
                                $('#ConfiguracionBonificaciones').show();
                            } else {
                                $('#ConfiguracionBonificaciones').hide();
                            }
                        });
                        if ($('#chck_Específico').is(':checked') == true) {
                            $('#ConfiguracionBonificaciones').show();
                        } else {
                            $('#ConfiguracionBonificaciones').hide();
                        }
                        $('#chck_HorEspeci').on('ifChanged', function (event) {
                            if ($('#chck_HorEspeci').is(':checked') == true) {
                                $('#Específicos').show();
                            } else {
                                $('#Específicos').hide();
                            }

                        });
                        if ($('#chck_HorEspeci').is(':checked') == true) {
                            $('#Específicos').show();
                        } else {
                            $('#Específicos').hide();
                        }
                        init_checkBox_styles();
                        $('#selects').on('ifChanged', function () {
                            if ($('#selects').is(':checked') == true) {
                                $('#ListaHorario option').prop('hidden', true);
                                $('#ListaHorario option:selected').prop('hidden', false);
                            } else {
                                $('#ListaHorario option').prop('hidden', false);
                            }
                        });

                        $('#select_All').on('ifChanged', function () {
                            if ($('#select_All').is(':checked') == true) {
                                $('#ListaHorario option').prop('selected', true);
                            } else {
                                $('#ListaHorario option').prop('selected', false);
                            }
                        });


                    }
                    else {
                        $('#Ausencia-det').show();//añadido 27.09.2021
                        $('#GeneralChecks').hide();
                        $('#Todos').hide();
                        $('#BonificaCheck').hide();//añadido 27.09.2021
                        $('#extras').hide();
                        $('#Acumulables').hide();
                    }

                });
                $('#campTipoum').on('change', function () {

                    if ($('#campTipoum').val() == 25) {
                        $('#Horas').show();
                        $('#cboAplica').val(79);
                        $('#cboRedondeo').val(82);
                        $('#cboRedondeo').attr('disabled', false);
                    } else {
                        $('#Horas').hide();

                    }

                });
                $('#cboAplica').on('change', function () {
                    if ($('#cboAplica').val() == 79) {
                        $('#cboRedondeo').val(82);
                        $('#cboRedondeo').attr('disabled', false);

                    } else {
                        $('#cboRedondeo').val('Seleccione');
                        $('#cboRedondeo').attr('disabled', true);
                    }
                });
                $('#cboTipoRed').on('change', function () {

                    if ($('#cboTipoRed').val() == 76) {
                        $('#ChnageRedondeo').empty();

                        $('#ChnageRedondeo').html('<label>Factor de Redondeo(Tiempo)</label>' +
                            '<select class= "form-control" id = "Redondeo" disabled>' +
                            '<option value="0">00:00</option>' +
                            '<option value="5">00:05</option>' +
                            '<option value="10">00:10</option>' +
                            '<option value="15">00:15</option>' +
                            '<option value="20">00:20</option>' +
                            '<option value="25">00:25</option>' +
                            '<option value="30">00:30</option>' +
                            '<option value="60">01:00</option>' +
                            '</select >');

                        $('#Redondeo').attr('disabled', false);
                        $('#Redondeo').val(5);

                    } else if ($('#cboTipoRed').val() == 77) {
                        $('#ChnageRedondeo').empty();
                        $('#ChnageRedondeo').html('<label>Factor de Redondeo(Tiempo)</label>' +
                            '<select class= "form-control" id = "Redondeo" disabled>' +
                            '<option value="0">00:00</option>' +
                            '<option value="5">00:05</option>' +
                            '<option value="10">00:10</option>' +
                            '<option value="15">00:15</option>' +
                            '<option value="20">00:20</option>' +
                            '<option value="25">00:25</option>' +
                            '<option value="30">00:30</option>' +
                            '<option value="60">01:00</option>' +
                            '</select >');

                        $('#Redondeo').attr('disabled', false);
                        $('#Redondeo').val(60);

                    } else if ($('#cboTipoRed').val() == 78) {

                        $('#Redondeo').attr('disabled', false);
                        $('#Redondeo').val(30);
                        $('#ChnageRedondeo').empty();

                        $('#ChnageRedondeo').html('<label>Factor de Redondeo(Tiempo)</label>' +
                            '<input type="time" id="tiempo_in" min="00:00"' +
                            ' max="24:00" accept="hh:mm" value="00:00" class="form-control" />');


                    } else {
                        $('#ChnageRedondeo').empty();
                        $('#ChnageRedondeo').html('<label>Factor de Redondeo(Tiempo)</label>' +
                            '<select class= "form-control" id = "Redondeo" disabled>' +
                            '<option value="0">00:00</option>' +
                            '<option value="5">00:05</option>' +
                            '<option value="10">00:10</option>' +
                            '<option value="15">00:15</option>' +
                            '<option value="20">00:20</option>' +
                            '<option value="25">00:25</option>' +
                            '<option value="30">00:30</option>' +
                            '<option value="60">01:00</option>' +
                            '</select >');
                        $('#Redondeo').attr('disabled', true);
                        $('#Redondeo').val(0);
                    }
                });

                var txtco = 'strCoConcepto'
                var txtdes = 'strDesConcepto'
                var txtcoPla = 'strCoPlaniExp'
                var txtcoPDT = 'strCoPDT'

                $.post(
                    '/Organizacion/ListarCaracteresMax',
                    { strMaestro: 'TGCONCEPTO' },
                    (response) => {
                        response.forEach(element => {
                            if (element.strColumnName == txtco) {
                                $('#Valco').children("input").attr('maxlength', element.intMaxLength);
                            } else if (element.strColumnName == txtdes) {
                                $('#Valdes').children("input").attr('maxlength', element.intMaxLength);
                            } else if (element.strColumnName == txtcoPla) {
                                $('#ValcoPla').children("input").attr('maxlength', element.intMaxLength);
                            } else if (element.strColumnName == txtcoPDT) {
                                $('#ValcoExt').children("input").attr('maxlength', element.intMaxLength);
                            }
                        });
                    });

                init_checkBox_styles();
            }
        });

    $('#chck_Descontable').on('ifChanged', function () {
        console.log("");
        if ($('#chck_Descontable').is(':checked') == true) {
            $('#Acumulables').hide();
        } else {
            $('#Acumulables').show();
        }
    })
});
$('#btn-save-change-variable').on('click', function () {
    validarSession()
    var titulo_ = 'Nueva Variable'

    var _TipoVariable = $('#cboVariable option:selected').val();
    var _TipoUniMed = $('#campTipoum option:selected').val();
    var _codigo = $('#txt_cod_Var').val();
    var _desc = $('#txt_desc_Var').val();
    var _codigoPlani = $('#txt_codPla_Var').val();
    var _codigoExter = $('#txt_codExte_Var').val();
    var _chckinci = $('#chck_inc').is(':checked');
    var _chckusen = $('#chck_ause').is(':checked');

    var _marcas = null;
    var _Reqmarcas = 0;//añadido 02.09.2021
    var _Permarcas = 0;//añadido 02.09.2021
    if ($('#chck_Permite').is(':checked') == true) {
        _Permarcas = 1;
    }
    if ($('#chck_Requiere').is(':checked') == true) {
        _Reqmarcas = 1;
    }
    var _jor = null;
    if ($('#chck_HorTotal').is(':checked') == true) {
        _jor = false;
    } if ($('#chck_HorEspeci').is(':checked') == true) {
        _jor = true;
    } if ($('#chck_HorTotal').is(':checked') == null || $('#chck_HorEspeci').is(':checked') == null) {
        _jor = null;
    }

    var _intboni = null;
    var _chckdiaLab = $('#chck_DiLab').is(':checked');
    var _chckdiadesc = $('#chck_DiDesc').is(':checked');
    var _chckdiafer = $('#chck_DiFer').is(':checked');
    var _chckdiasab = $('#chck_DiSab').is(':checked');
    var _chckdiadom = $('#chck_DiDom').is(':checked');
    var _bitBonoEspIni = $('#bitBonoEspIni').is(':checked')
    var _bitBonoEspFin = $('#bitBonoEspFin').is(':checked')
    var _intIdConcepto = $('#txtIdConcepto').val();

    if ($('#cboVariable').val() == 33) {//Bonos
        if ($('#chck_Específico').is(':checked') == true) {
            _intboni = 04;
        } if ($('#chck_Total').is(':checked') == true) {
            _intboni = 03;
        } if ($('#chck_Total').is(':checked') == null) {
            _intboni = null;
        }
        if ($('#chck_Específico').is(':checked') == null) {
            _intboni = null;
        }
    }

    if (_TipoVariable == 30) {//Justi
        var _chcktodias = $('#chck_ToDias').is(':checked');
        var _chckdiaLab = $('#chck_DiLab_').is(':checked');

        //if ($("#GeneralChecks .checkbox:visible .checked").length == 0 || $("#GeneralChecks .checkbox:visible .checked").length == 2) {
        //    messageResponseMix({ type: 'info', message: 'Seleccione una opción de Aplicable a:' }, titulo_)//añadido 04/08/2021
        //    return;
        //}
        //if (_chcktodias && _chckdiaLab) {
        //    messageResponseMix({ type: 'info', message: 'Solo puede seleccionar una opción de APLICABLE A' }, titulo_)//añadido 04/08/2021
        //    return;
        //}
    }

    if ($('#tiempo_min').val() == null) {
        var _tiempmin = null;
    } else {
        var _tiempmin = $('#tiempo_min').val();
    }

    if ($('#tiempo_tol').val() == null) {
        var _tiemptol = null;
    } else {
        var _tiemptol = $('#tiempo_tol').val();
    }
    if ($('#txtMaxUso').val() == null) {
        var _txtMaxUso = null;
    } else {
        var _txtMaxUso = $('#txtMaxUso').val();
    }

    if ($('#tiempo_in').val() == null) {
        var _tiempo_in = '00:00:00';
    } else {
        var _tiempo_in = $('#tiempo_in').val();
    }

    if ($('#tiempo_fil').val() == null) {
        var _tiempo_fil = '00:00:00';
    } else {
        var _tiempo_fil = $('#tiempo_fil').val();
    }
    if ($('#tiempo_min').val() == null) {

        var _tiempo_min = '00:00:00';
    } else {
        var _tiempo_min = $('#tiempo_min').val();
    }

    if ($('#tiempo_tol').val() == '') {
        var _tiempo_tol = '00:00:00';
    } else {
        var _tiempo_tol = $('#tiempo_tol').val();
    }

    if ($('#cboTipoRegimen option:selected').val() == null) {
        var _TipoRgimen = null;
    } else {
        var _TipoRgimen = $('#cboTipoRegimen option:selected').val();
    }

    if ($('#cboTipoRed option:selected').val() == null) {
        var _TipoRedondeo = null;
    } else {
        var _TipoRedondeo = $('#cboTipoRed option:selected').val();
    }

    if ($('#cboAplica option:selected').val() == null) {
        var _AplicaPor = null;
    } else {
        var _AplicaPor = $('#cboAplica option:selected').val();
    }

    if ($('#Redondeo option:selected').val() == null) {
        var _FactorRed = null;
    } else {
        var _FactorRed = $('#Redondeo option:selected').val();
    }

    if ($('#cboRedondeo option:selected').val() == null) {
        var _FormaRedondeo = null;
    } else {
        var _FormaRedondeo = $('#cboRedondeo option:selected').val();
    }

    if ($('#ListaHorario option:selected').val() == null) {
        var _HorEspeci = null;
    } else {
        var _HorEspeci = $('#ListaHorario option:selected').val();
    }

    if ($('#Prioridad1 option:selected').val() == null) {
        var _Prioridad = null;
    } else {
        var _Prioridad = $('#Prioridad option:selected').val();
    }

    var _chckHorTra = $('#chckHorTra').is(':checked');
    var _chckDiaTra = $('#chckDiaTra').is(':checked');
    var _chckTraEfec = $('#chckTraEfec').is(':checked');
    var _chckExpPlan = $('#chckExpPlan').is(':checked');
    var _chckExpSubs = $('#chckExpSubs').is(':checked');
    var _chckExpNoTraNoSub = $('#chckExpNoTraNoSubs').is(':checked');
    var _chckCalculoCTS = $('#chckCalculoCTS').is(':checked');
    var _chckCalidadUti = $('#chckCalidadUtili').is(':checked');
    var _chckCalculoGrat = $('#chckCalculoGrat').is(':checked');
    var _chckActivo = $('#chck_Activo_Var').is(':checked');

    if ($('#chckCompensable').is(':checked')) {
        var _chckComp = 1;
    } else {
        var _chckComp = 0;
    }
    var _chckGenera = $('#chckGenerHoras').is(':checked');

    var _chck_Descontable = $('#chck_Descontable').is(':checked');
    var _chck_Sustentación = $('#chck_Sustentación').is(':checked');

    if ($('#strConceptoCampo1').val() == null) {
        var _campVar1 = null;
    } else {
        var _campVar1 = $('#strConceptoCampo1').val();
    }

    if ($('#strConceptoCampo2').val() == null) {
        var _campVar2 = null;
    } else {
        var _campVar2 = $('#strConceptoCampo2').val();
    }

    if ($('#strConceptoCampo3').val() == null) {
        var _campVar3 = null;
    } else {
        var _campVar3 = $('#strConceptoCampo3').val();
    }

    if ($('#strConceptoCampo4').val() == null) {
        var _campVar4 = null;
    } else {
        var _campVar4 = $('#strConceptoCampo4').val();
    }

    if ($('#strConceptoCampo5').val() == null) {
        var _campVar5 = null;
    } else {
        var _campVar5 = $('#strConceptoCampo5').val();
    }

    if (_TipoVariable === '' || _TipoVariable === "0") {
        messageResponseMix({ type: 'info', message: 'Seleccione un Tipo de Variable' }, titulo_)//añadido 04/08/2021
        return;
    }
    if (_TipoUniMed === '' || _TipoUniMed === "0") {
        messageResponseMix({ type: 'info', message: 'Seleccione un Tipo de Unidad de Medida' }, titulo_)//añadido 04/08/2021
        return;
    }

    if (_codigo === '') {
        messageResponseMix({ type: 'info', message: 'Ingrese un Código' }, titulo_)//añadido 04/08/2021
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }
    if (_desc === '') {
        messageResponseMix({ type: 'info', message: 'Ingrese una Descripción' }, titulo_)//añadido 04/08/2021
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }
    if (_codigoPlani === '') {//se retiran de la validación los campos  _codigoExter === ''
        messageResponseMix({ type: 'info', message: 'Ingrese un Código de Integración (Planilla)' }, titulo_)//añadido 04/08/2021
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }
    if (/\s/.test($('#txt_cod_Var').val())) { //Añadido HGM 10.11.2021
        messageResponseMix({ type: 'info', message: 'Ingrese solo números y letras sin espacios en blanco.' }, 'Código (*)')//añadido 04/08/2021
        return;
    }

    if (/\s/.test($('#txt_codPla_Var').val())) { //Añadido HGM 10.11.2021
        messageResponseMix({ type: 'info', message: 'Ingrese código sin espacios en blanco.' }, 'Código de Integración (Planilla)')//añadido 04/08/2021
        return;
    }

    if (/\s/.test($('#txt_codExte_Var').val())) { //Añadido HGM 10.11.2021
        messageResponseMix({ type: 'info', message: 'Ingrese código sin espacios en blanco.' }, 'Código de Integración (Externo)')//añadido 04/08/2021
        return;
    }
    /*COMENTADO HGM 10.11.2021
    if (!$('#txt_cod_Var')[0].validity.valid) {
        messageResponseMix({ type: 'info', message: 'Ingrese solo números y letras, sin espacios en blanco.' }, 'Codigo(*)')//añadido 04/08/2021
        return;
    }

    if (!$('#txt_codPla_Var')[0].validity.valid) {
        messageResponseMix({ type: 'info', message: 'Ingrese código sin espacios en blanco.' }, 'Codigo de Integración (Planilla)')//añadido 04/08/2021
        return;
    }

    if (!$('#txt_codExte_Var')[0].validity.valid) {
        messageResponseMix({ type: 'info', message: 'Ingrese código sin espacios en blanco.' }, 'Codigo de Integración (Externo)')//añadido 04/08/2021
        return;
    }
    */

    if (_TipoVariable == 33) {
        if (_jor && $('#ListaHorario option:selected').length == 0) {
            messageResponseMix({ type: 'info', message: 'Debe Seleccionar al menos una jornada' }, 'Jornadas Específicas')//añadido 04/08/2021
            return;
        }
        if (_intboni == 4) {
            var horaIni_t = moment($("#tiempo_in").val(), 'HH:mm')
            var horaFin_t = moment($("#tiempo_fil").val(), 'HH:mm')

            if (horaIni_t.isSame(horaFin_t)) {
                messageResponseMix({ type: 'info', message: 'Hora Inicio es igual que Hora Fin' }, 'Configuración Bono Específico')//añadido 04/08/2021
                return;
            }
        }
        if ($("#GeneralChecks .checkbox:visible .checked").length == 0) {
            messageResponseMix({ type: 'info', message: 'Debe Seleccionar un Tipo de Día para aplicar la Bonificación' }, 'Aplicable a:')//añadido 04/08/2021
            return;
        }
    }


    var Variable = {
        intTipoConcepto: _TipoVariable,
        bitInternoSis: 0,
        strCoConcepto: _codigo,
        strDesConcepto: _desc,
        bitReqMarca: _Reqmarcas,
        bitPermiteMarca: _Permarcas,//añadido 02.09.2021
        strCoPlaniExp: _codigoPlani,
        strCoPDT: _codigoExter,
        intTipoUM: _TipoUniMed,
        bitAplTodosDias: _chcktodias,
        bitAplDiaLabor: _chckdiaLab,
        bitAplDiaDescanso: _chckdiadesc,
        bitAplDiaFeriado: _chckdiafer,
        bitAplDiaSabado: _chckdiasab,
        bitAplDiaDomingo: _chckdiadom,
        intIdTipRegimen: 34,                  //_TipoRgimen
        bitClasifica: _chckusen,
        smlTipoRedondeo: _TipoRedondeo,
        smlAplicaRedond: _AplicaPor,
        intTiempoRedond: _FactorRed,
        smlFormaRedond: _FormaRedondeo,
        bitFlHT: _chckHorTra,
        bitFlDT: _chckDiaTra,
        bitFlHTE: _chckTraEfec,
        bitFlGenerarHA: _chckGenera,
        bitFlCTS: _chckCalculoCTS,
        bitExportPlani: _chckExpPlan,
        bitFlSubsidio: _chckExpSubs,
        bitFlDiaNoLabNiSub: _chckExpNoTraNoSub,
        intTiempoRTardanza: null,
        tinFlCompensacion: _chckComp,
        tinPrioridadHE: 0,
        intIdTipBoni: _intboni,
        timeHoraIni: _tiempo_in,
        timeHoraFin: _tiempo_fil,
        bitHoraIni: _bitBonoEspIni,
        bitHoraFin: _bitBonoEspFin,
        timeTolerancia: _tiempo_tol,
        timeTiempoMin: _tiempo_min,
        bitSustentacion: _chck_Sustentación,
        intUsoMaximo: _txtMaxUso,
        strConceptoCampo1: _campVar1,
        strConceptoCampo2: _campVar2,
        strConceptoCampo3: _campVar3,
        strConceptoCampo4: _campVar4,
        strConceptoCampo5: _campVar5,
        bitFlActivo: _chckActivo,
        bitflutilidades: _chckCalidadUti,
        bitFlGrati: _chckCalculoGrat,
        bitFlDescontable: _chck_Descontable,
        bitJornadaEspecif: _jor,
    }

    class PrioridadesConcepto {
        constructor(intIdConcepto, tinPrioridadHE) {
            this.intIdConcepto = intIdConcepto
            this.tinPrioridadHE = tinPrioridadHE
        }
    }

    class JornadasBonificacion {
        constructor(intIdJorBonDet, intIdConcepto, intIdJornada, intIdUniOrg, dttFecAsig) {
            this.intIdJorBonDet = intIdJorBonDet
            this.intIdConcepto = intIdConcepto
            this.intIdJornada = intIdJornada
            this.intIdUniOrg = intIdUniOrg
            this.dttFecAsig = dttFecAsig
        }
    }

    var detalleVar = new Array();
    $('#tb_HorasExtras tr').each((index, item) => {
        var tr_cogido = $(item).find('td').first().html();
        var td_id = $(item).find('select option:selected').val();

        detalleVar.push(new PrioridadesConcepto(tr_cogido, td_id));

    });

    var detalleBoni = new Array();
    $('#ListaHorario option:selected').each((index, item) => {
        console.log(item);
        var tr_cogido = $(item).val();
        detalleBoni.push(new JornadasBonificacion(0, 0, tr_cogido, 0, null));

    });

    $.post(
        '/Asistencia/RegistrarEditarVariable',
        { ObjConcepto: Variable, listaConcepto: detalleVar, listaDetaBoni: detalleBoni, intTipoOperacion: 1 },
        (response) => {
            if (response.type !== '') {
                if (response.type === 'success') {
                    messageResponseMix({ type: response.type, message: response.message }, titulo_)//añadido 04/08/2021
                    TablaVariable();
                    $('.form-hide-variable').hide();
                } else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Variable';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        messageResponseMix({ type: response.type, message: response.message }, titulo_)//añadido 04/08/2021
                    }
                    return;
                }

            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

});
$('#btn-update-variable').on('click', function () {
    validarSession()
    var titulo_ = 'Actualización de Variable'

    var _intIdConcepto = $('#txtIdConcepto').val();
    var _TipoVariable = $('#cboVariable option:selected').val();
    var _TipoUniMed = $('#campTipoum option:selected').val();
    var _codigo = $('#txt_cod_Var').val();
    var _desc = $('#txt_desc_Var').val();
    var _codigoPlani = $('#txt_codPla_Var').val();
    var _codigoExter = $('#txt_codExte_Var').val();
    var _chckinci = $('#chck_inc').is(':checked');
    var _chckusen = $('#chck_ause').is(':checked');
    var _chckpermite = $('#chck_Permite').is(':checked');
    var _chckrequiere = $('#chck_Requiere').is(':checked');


    var _marcas = null;
    var _Reqmarcas = 0;//añadido 02.09.2021
    var _Permarcas = 0;//añadido 02.09.2021
    if ($('#chck_Permite').is(':checked') == true) {
        _Permarcas = 1;
    }
    if ($('#chck_Requiere').is(':checked') == true) {
        _Reqmarcas = 1;
    }

    var _jor = null;
    if ($('#chck_HorTotal').is(':checked') == true) {
        _jor = false;
    } if ($('#chck_HorEspeci').is(':checked') == true) {
        _jor = true;
    } if ($('#chck_HorTotal').is(':checked') == null) {
        _jor = null;
    }
    if ($('#chck_HorEspeci').is(':checked') == null) {
        _jor = null;
    }

    var _intboni = null;

    if ($('#cboVariable').val() == 33) {//Bono

        if ($('#chck_Específico').is(':checked') == true) {
            _intboni = 4;
        } if ($('#chck_Total').is(':checked') == true) {
            _intboni = 3;
        } if ($('#chck_Total').is(':checked') == null) {
            _intboni = null;
        }
        if ($('#chck_Específico').is(':checked') == null) {
            _intboni = 0;
        }

    } else {
        _intboni = 0;

    }

    var _bitBonoEspIni = $('#bitBonoEspIni').is(':checked')
    var _bitBonoEspFin = $('#bitBonoEspFin').is(':checked')

    var _chckdiaLab = $('#chck_DiLab').is(':checked');
    var _chckdiadesc = $('#chck_DiDesc').is(':checked');
    var _chckdiafer = $('#chck_DiFer').is(':checked');
    var _chckdiasab = $('#chck_DiSab').is(':checked');
    var _chckdiadom = $('#chck_DiDom').is(':checked');

    if (_TipoVariable == 30) {//Justi
        var _chcktodias = $('#chck_ToDias').is(':checked');
        var _chckdiaLab = $('#chck_DiLab_').is(':checked');

        //if ($("#GeneralChecks .checkbox:visible .checked").length == 0 || $("#GeneralChecks .checkbox:visible .checked").length == 2) {
        //    messageResponseMix({ type: 'info', message: 'Seleccione solo una opción' }, 'Aplicable a:')//añadido 04/08/2021
        //    return;
        //}
        //if (_chcktodias && _chckdiaLab) {
        //    messageResponseMix({ type: 'info', message: 'Para el tipo de variable(Justificación) Solo puede selecciona una opcion: Todos los dias o Dia laborable' }, 'Tipo Variable')//añadido 04/08/2021
        //    return;
        //}
    }

    if ($('#tiempo_min').val() == null) {
        var _tiempmin = null;
    } else {
        var _tiempmin = $('#tiempo_min').val();
    }

    if ($('#tiempo_tol').val() == null) {
        var _tiemptol = null;
    } else {
        var _tiemptol = $('#tiempo_tol').val();
    }
    if ($('#txtMaxUso').val() == null) {
        var _txtMaxUso = null;
    } else {
        var _txtMaxUso = $('#txtMaxUso').val();
    }

    if ($('#tiempo_in').val() == null) {
        var _tiempo_in = null;
    } else {
        var _tiempo_in = $('#tiempo_in').val();
    }

    if ($('#tiempo_fil').val() == null) {
        var _tiempo_fil = null;
    } else {
        var _tiempo_fil = $('#tiempo_fil').val();
    }

    if ($('#tiempo_min').val() == null) {
        var _tiempo_min = null;
    } else {
        var _tiempo_min = $('#tiempo_min').val();
    }

    if ($('#tiempo_tol').val() == null) {
        var _tiempo_tol = null;
    } else {
        var _tiempo_tol = $('#tiempo_tol').val();
    }

    if ($('#cboTipoRegimen option:selected').val() == null) {
        var _TipoRgimen = null;
    } else {
        var _TipoRgimen = $('#cboTipoRegimen option:selected').val();
    }

    if ($('#cboTipoRed option:selected').val() == null) {
        var _TipoRedondeo = null;
    } else {
        var _TipoRedondeo = $('#cboTipoRed option:selected').val();
    }

    if ($('#cboAplica option:selected').val() == null) {
        var _AplicaPor = null;
    } else {
        var _AplicaPor = $('#cboAplica option:selected').val();
    }

    if ($('#Redondeo option:selected').val() == null) {
        var _FactorRed = null;
    } else {
        var _FactorRed = $('#Redondeo option:selected').val();
    }

    if ($('#cboRedondeo option:selected').val() == null) {
        var _FormaRedondeo = null;
    } else {
        var _FormaRedondeo = $('#cboRedondeo option:selected').val();
    }

    if ($('#ListaHorario option:selected').val() == null) {
        var _HorEspeci = null;
    } else {
        var _HorEspeci = $('#ListaHorario option:selected').val();
    }

    if ($('#Prioridad1 option:selected').val() == null) {
        var _Prioridad = null;
    } else {
        var _Prioridad = $('#Prioridad option:selected').val();
    }

    var _chckHorTra = $('#chckHorTra').is(':checked');
    var _chckDiaTra = $('#chckDiaTra').is(':checked');
    var _chckTraEfec = $('#chckTraEfec').is(':checked');
    var _chckExpPlan = $('#chckExpPlan').is(':checked');
    var _chckExpSubs = $('#chckExpSubs').is(':checked');
    var _chckExpNoTraNoSub = $('#chckExpNoTraNoSubs').is(':checked');
    var _chckCalculoCTS = $('#chckCalculoCTS').is(':checked');
    var _chckCalidadUti = $('#chckCalidadUtili').is(':checked');
    var _chckCalculoGrat = $('#chckCalculoGrat').is(':checked');
    var _chckActivo = $('#chck_Activo_Var').is(':checked');

    if ($('#chckCompensable').is(':checked')) {
        var _chckComp = 1;
    } else {
        var _chckComp = 0;
    }
    var _chckGenera = $('#chckGenerHoras').is(':checked');
    var _chck_Descontable = $('#chck_Descontable').is(':checked');
    var _chck_Sustentación = $('#chck_Sustentación').is(':checked');

    if ($('#strConceptoCampo1').val() == null) {
        var _campVar1 = null;
    } else {
        var _campVar1 = $('#strConceptoCampo1').val();
    }

    if ($('#strConceptoCampo2').val() == null) {
        var _campVar2 = null;
    } else {
        var _campVar2 = $('#strConceptoCampo2').val();
    }

    if ($('#strConceptoCampo3').val() == null) {
        var _campVar3 = null;
    } else {
        var _campVar3 = $('#strConceptoCampo3').val();
    }

    if ($('#strConceptoCampo4').val() == null) {
        var _campVar4 = null;
    } else {
        var _campVar4 = $('#strConceptoCampo4').val();
    }

    if ($('#strConceptoCampo5').val() == null) {
        var _campVar5 = null;
    } else {
        var _campVar5 = $('#strConceptoCampo5').val();
    }


    if (_TipoVariable === '' || _TipoVariable === "0") {
        messageResponseMix({ type: 'info', message: 'Seleccione un Tipo de Variable' }, titulo_)//añadido 04/08/2021
        return;
    }
    if (_TipoUniMed === '' || _TipoUniMed === "0") {
        messageResponseMix({ type: 'info', message: 'Seleccione un Tipo de Unidad de Medida' }, titulo_)//añadido 04/08/2021
        return;
    }

    if (_codigo === '') {
        messageResponseMix({ type: 'info', message: 'Ingrese un Código' }, titulo_)//añadido 04/08/2021
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }
    if (_desc === '') {
        messageResponseMix({ type: 'info', message: 'Ingrese una Descripción' }, titulo_)//añadido 04/08/2021
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }
    if (_codigoPlani === '') {//se retiran de la validación los campos  _codigoExter === ''
        messageResponseMix({ type: 'info', message: 'Ingrese un Código de Integración (Planilla)' }, titulo_)//añadido 04/08/2021
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }
    if (/\s/.test($('#txt_cod_Var').val())) { //Añadido HGM 10.11.2021
    //if (!$('#txt_cod_Var')[0].validity.valid) {
        messageResponseMix({ type: 'info', message: 'Ingrese solo números y letras sin espacios en blanco.' }, 'Código (*)')//añadido 04/08/2021
        return;
    }

    if (/\s/.test($('#txt_codPla_Var').val())) { //Añadido HGM 10.11.2021
        //if (!$('#txt_codPla_Var')[0].validity.valid) {
        messageResponseMix({ type: 'info', message: 'Ingrese código sin espacios en blanco.' }, 'Código de Integración (Planilla)')//añadido 04/08/2021
        return;
    }

    if (/\s/.test($('#txt_codExte_Var').val())) { //Añadido HGM 10.11.2021
    //if (!$('#txt_codExte_Var')[0].validity.valid) {
        messageResponseMix({ type: 'info', message: 'Ingrese código sin espacios en blanco.' }, 'Código de Integración (Externo)')//añadido 04/08/2021
        return;
    }

    if (_TipoVariable == 33) {
        if (_jor && $('#ListaHorario option:selected').length == 0) {
            messageResponseMix({ type: 'info', message: 'Debe Seleccionar al menos una jornada' }, 'Jornadas Específicas')//añadido 04/08/2021
            return;
        }
        if (_intboni == 4) {
            var horaIni_t = moment($("#tiempo_in").val(), 'HH:mm')
            var horaFin_t = moment($("#tiempo_fil").val(), 'HH:mm')

            if (horaIni_t.isSame(horaFin_t)) {
                messageResponseMix({ type: 'info', message: 'Hora Inicio es igual que Hora Fin' }, 'Configuración Bono Específico')//añadido 04/08/2021
                return;
            }
        }
        if ($("#GeneralChecks .checkbox:visible .checked").length == 0) {
            messageResponseMix({ type: 'info', message: 'Debe Seleccionar un Tipo de Día para aplicar la Bonificación' }, 'Aplicable a:')//añadido 04/08/2021
            return;
        }
    }


    var Variable = {
        intIdConcepto: _intIdConcepto,
        intTipoConcepto: _TipoVariable,
        bitInternoSis: 0,
        strCoConcepto: _codigo,
        strDesConcepto: _desc,
        bitReqMarca: _Reqmarcas,
        bitPermiteMarca: _Permarcas,//añadido 02.09.2021
        strCoPlaniExp: _codigoPlani,
        strCoPDT: _codigoExter,
        intTipoUM: _TipoUniMed,
        bitAplTodosDias: _chcktodias,
        bitAplDiaLabor: _chckdiaLab,
        bitAplDiaDescanso: _chckdiadesc,
        bitAplDiaFeriado: _chckdiafer,
        bitAplDiaSabado: _chckdiasab,
        bitAplDiaDomingo: _chckdiadom,
        intIdTipRegimen: 34,                  //_TipoRgimen
        bitClasifica: _chckusen,
        smlTipoRedondeo: _TipoRedondeo,
        smlAplicaRedond: _AplicaPor,
        intTiempoRedond: _FactorRed,
        smlFormaRedond: _FormaRedondeo,
        bitFlHT: _chckHorTra,
        bitFlDT: _chckDiaTra,
        bitFlHTE: _chckTraEfec,
        bitFlGenerarHA: _chckGenera,
        bitFlCTS: _chckCalculoCTS,
        bitExportPlani: _chckExpPlan,
        bitFlSubsidio: _chckExpSubs,
        bitFlDiaNoLabNiSub: _chckExpNoTraNoSub,
        intTiempoRTardanza: _chck_Descontable,
        tinFlCompensacion: _chckComp,
        tinPrioridadHE: _Prioridad,
        intIdTipBoni: _intboni,
        timeHoraIni: _tiempo_in,
        timeHoraFin: _tiempo_fil,
        bitHoraIni: _bitBonoEspIni,
        bitHoraFin: _bitBonoEspFin,
        timeTolerancia: _tiempo_min,
        timeTiempoMin: _tiempo_tol,
        bitSustentacion: _chck_Sustentación,
        intUsoMaximo: _txtMaxUso,
        strConceptoCampo1: _campVar1,
        strConceptoCampo2: _campVar2,
        strConceptoCampo3: _campVar3,
        strConceptoCampo4: _campVar4,
        strConceptoCampo5: _campVar5,
        bitFlActivo: _chckActivo,
        bitflutilidades: _chckCalidadUti,
        bitFlGrati: _chckCalculoGrat,
        bitFlDescontable: _chck_Descontable,
        bitJornadaEspecif: _jor,
    }


    class PrioridadesConcepto {
        constructor(intIdConcepto, tinPrioridadHE) {
            this.intIdConcepto = intIdConcepto
            this.tinPrioridadHE = tinPrioridadHE
        }
    }

    class JornadasBonificacion {
        constructor(intIdJorBonDet, intIdConcepto, intIdJornada, intIdUniOrg, dttFecAsig) {
            this.intIdJorBonDet = intIdJorBonDet
            this.intIdConcepto = intIdConcepto
            this.intIdJornada = intIdJornada
            this.intIdUniOrg = intIdUniOrg
            this.dttFecAsig = dttFecAsig
        }
    }

    var detalleVar = new Array();
    $('#tb_HorasExtras tr').each((index, item) => {
        var tr_cogido = $(item).find('td').first().html();
        var td_id = $(item).find('select option:selected').val();

        detalleVar.push(new PrioridadesConcepto(tr_cogido, td_id));
    });
    console.log(detalleVar);

    var detalleBoni = new Array();
    $('#ListaHorario option:selected').each((index, item) => {
        //var input = $(item).find('input');
        console.log(item);
        var tr_cogido = $(item).val();
        detalleBoni.push(new JornadasBonificacion(0, 0, tr_cogido, 0, null));

    });
    console.log(detalleBoni);


    $.post(
        '/Asistencia/RegistrarEditarVariable',
        { ObjConcepto: Variable, listaConcepto: detalleVar, listaDetaBoni: detalleBoni, intTipoOperacion: 2 },
        (response) => {
            console.log(response);
            if (response.type !== '') {

                if (response.type === 'success') {
                    messageResponseMix({ type: response.type, message: response.message }, titulo_)//añadido 04/08/2021
                    TablaVariable();
                    $('.form-hide-variable').hide();
                } else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Variable';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        messageResponseMix({ type: response.type, message: response.message }, titulo_)//añadido 04/08/2021
                    }
                    return;
                }
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

});
$('#btn-cancel-variable').on('click', function () {
    validarSession()
    $('.form-hide-variable').hide();
});

$('#filActiVar').on('change', function () {
    validarSession()
    TablaVariable();
});
$('#campTipoVar').on('change', function () {
    validarSession()
    TablaVariable();
});
//$('#filtroVar').keyup(function () {
//    validarSession()
//    TablaVariable();
//});
$('#filtroVar').on('change', function () {
    validarSession()
    TablaVariable();
})


//#endregion MANT. VARIABLE









/**------------------------------------------------------ */
/**12. Jornada Diaria Comedor*/
/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
//#region MANT. JORNADA DIARIA COMEDOR
var _varTablaJornada;
var _varTablaIntervalo;
var u = 0;
var _ObjetoIntervalos; //añadido 03.09.2021
var _Ordinario = 0;//añadido 03.09.2021
var _Extraordinario = 0;//añadido 03.09.2021
var _OrdinarioFlex = 0;//añadido 03.09.2021
var _RefrigerioFlex = 0;//añadido 03.09.2021
var _Refrigerio = 0;//añadido 03.09.2021
var _TurnoM = 0;//añadido 03.09.2021
var _TurnoT = 0;//añadido 03.09.2021
var _TurnoN = 0;//añadido 03.09.2021
var detalleinterval = new Array();
var detalleHoras = new Array();
var _IdSinRefri = 0;
class Intervalos {
    constructor(interva, intTipoInterval, NomTipoInter, timeHoraIni, timeHoraFin, intTurno, timeTolerancia, timeDuracion, timeTiempoMaximo, bitFlHT, bitDiaSig, strorden, intnum, clave, intIdInterval, intidTipoServ, strDeTipServ) {//2 campos añadidos 28.09.2021
        this.interva = interva
        this.intTipoInterval = intTipoInterval
        this.NomTipoInter = NomTipoInter
        this.timeHoraIni = timeHoraIni
        this.timeHoraFin = timeHoraFin
        this.intTurno = intTurno
        this.timeTolerancia = timeTolerancia
        this.timeDuracion = timeDuracion
        this.timeTiempoMaximo = timeTiempoMaximo
        this.bitFlHT = bitFlHT
        this.bitDiaSig = bitDiaSig
        this.strorden = strorden
        this.intnum = intnum
        this.clave = clave
        this.intIdInterval = intIdInterval
        this.intidTipoServ = intidTipoServ //Añadido HG_18.02.21 TIPO DE SERVICIO
        this.strDeTipServ = strDeTipServ   //Añadido HG_19.02.21 TIPO DE SERVICIO
    }
}

function CombosJornadaDiaria() {

    //Combo Tipo Jornada
    $.post(
        '/Personal/ListarCombos',//{ strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'JORN', strSubGrupo: 'TIPO' },
        {
            intIdMenu: 1,
            strEntidad: 'TGTIPO',
            intIdFiltroGrupo: 0,
            strGrupo: 'JORN',
            strSubGrupo: 'TIPO',
        },
        (response) => {
            $('#filtojer1').empty();
            $("#filtojer1").append('<option value="0" selected>Todos</option>')
            response.forEach(element => {
                $('#filtojer1').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
            });
        });


    //Combos Intervalo
    $.post(
        //'/Asistencia/LlenarTipoUM',
        //{ strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'CAL', strSubGrupo: 'HOR' },
        '/Personal/ListarCombos',
        {
            intIdMenu: 1,
            strEntidad: 'TGTIPO',
            intIdFiltroGrupo: 0,
            strGrupo: 'CAL',
            strSubGrupo: 'HOR',
        },
        (response) => {
            _ObjetoIntervalos = response;//añadido 03.09.2021 para usar luego
            $('#TipoInter').empty();
            response.forEach(element => {
                $('#TipoInter').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

                if (element.strextra1 == '01') { _Ordinario = element.intidTipo; }
                if (element.strextra1 == '02') { _Extraordinario = element.intidTipo; }
                if (element.strextra1 == '03') { _Refrigerio = element.intidTipo; }
                if (element.strextra1 == '04') { _OrdinarioFlex = element.intidTipo; }
                if (element.strextra1 == '05') { _RefrigerioFlex = element.intidTipo; }
                /*
                intIdEntidad	strDeEntidad	strextra1
                39	            Ordinario	        01
                40	            Extraordinario	    02
                41	            Refrigerio	        03
                45	            Ordinario Flexible	04
                46	            Refrigerio Flexible	05
                */
            });
        });

    //Combo Turno
    $.post(
        '/Personal/ListarCombos',//{ strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'CAL', strSubGrupo: 'TURN' },
        {
            intIdMenu: 1,
            strEntidad: 'TGTIPO',
            intIdFiltroGrupo: 0,
            strGrupo: 'CAL',
            strSubGrupo: 'TURN',
        },
        (response) => {
            $('#TipoTurn').empty();
            response.forEach(element => {
                $('#TipoTurn').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
                if (element.strextra1 == '1') { _TurnoM = element.intidTipo; }
                if (element.strextra1 == '2') { _TurnoT = element.intidTipo; }
                if (element.strextra1 == '3') { _TurnoN = element.intidTipo; }
                /*
                intidTipo	strCoTipo	strAbreviatura	strDeTipo
                42	1	M	Mañana
                43	2	T	Tarde
                44	3	N	Noche
                */
            });
        });
}
function CombosJornadaDiariaNuevo() {

    //Combo Tipo Jornada
    $.post(
        '/Personal/ListarCombos',//{ strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'JORN', strSubGrupo: 'TIPO' },
        {
            intIdMenu: 1,
            strEntidad: 'TGTIPO',
            intIdFiltroGrupo: 0,
            strGrupo: 'JORN',
            strSubGrupo: 'TIPO',
        },
        (response) => {
            $('#TipoJor').empty();
            response.forEach(element => {
                $('#TipoJor').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
            });
        });

    //ComboRefrigerio
    $.post(
        //'/Asistencia/LlenarTipoUM',
        '/Personal/ListarCombos',
        { intIdMenu: 1, strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'CAL', strSubGrupo: 'REF' },
        (response) => {
            $('#cboRef').empty();
            response.forEach(element => {
                $('#cboRef').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
                if (element.strextra1 == '1') { _IdSinRefri = element.intidTipo; }
                /*
                intIdEntidad	strDeEntidad	strextra1
                36	        Sin Refrigerio	            1
                37	        Refrigerio c/ Marca	        2
                38	        Refrigerio s/ Marca	        3
                */
            });
            var idComboRefri = $('#cboRef').val();
            //Combos Intervalo Según refrigerio
            $.post(
                '/Personal/ListarCombos',
                {
                    intIdMenu: 1,
                    strEntidad: 'TGTIPO',
                    intIdFiltroGrupo: idComboRefri,
                    strGrupo: 'CAL',
                    strSubGrupo: 'HOR',
                },
                (response) => {
                    $('#TipoInter').empty();
                    response.forEach(element => {
                        $('#TipoInter').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
                    });
                });

        });

    //ComboJerarquia - modificado 23.08.2021
    $.post(
        '/Personal/ListarCombos',
        {
            intIdMenu: 1,
            strEntidad: 'TGJERARQORG',
            intIdFiltroGrupo: 0,
            strGrupo: 'DEPEN_MAESTROS',
            strSubGrupo: '',
        },
        (response) => {
            $('#cboJerar').empty();
            if (response.length > 1) {
                $('#cboJerar').append('<option value="0">Seleccione</option>');
            }
            response.forEach(element => {
                $('#cboJerar').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
            });
        });

    //Combo Turno
    $.post(
        '/Personal/ListarCombos',//{ strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'CAL', strSubGrupo: 'TURN' },
        {
            intIdMenu: 1,
            strEntidad: 'TGTIPO',
            intIdFiltroGrupo: 0,
            strGrupo: 'CAL',
            strSubGrupo: 'TURN',
        },
        (response) => {
            $('#TipoTurn').empty();
            response.forEach(element => {
                $('#TipoTurn').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
            });
        });

    $('#cboJerar').on('change', function () {

        var IntidJerar = $('#cboJerar option:selected').val();
        $.post(
            '/Personal/ListarCombos',//{ strEntidad: 'TGUNIDORG', intIdFiltroGrupo: IntidJerar, strGrupo: 'JERAR', strSubGrupo: '' },
            {
                intIdMenu: 1,
                strEntidad: 'TGUNIDORG',
                intIdFiltroGrupo: IntidJerar,
                strGrupo: 'JERAR',
                strSubGrupo: '',
            },
            (response) => {
                $('#cboUndOrg').empty();
                if (response.length > 0) {
                    $('#cboUndOrg').attr('disabled', false);
                    response.forEach(element => {
                        $('#cboUndOrg').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
                    });
                } else {
                    if (IntidJerar != 0) {
                        $('#cboUndOrg').append('<option value="0">No Hay Datos</option>');
                    }
                    $('#cboUndOrg').attr('disabled', true);
                }

            });
    });

    //Combo Tipo Intervalo #2 -añadido 24.02.2021
    $('#cboRef').on('change', function () {
        var IntidCombo = $('#cboRef option:selected').val();

        $.post(
            '/Personal/ListarCombos',
            {
                intIdMenu: 1,
                strEntidad: 'TGTIPO',
                intIdFiltroGrupo: IntidCombo,
                strGrupo: 'CAL',
                strSubGrupo: 'HOR',
            },
            (response) => {
                $('#TipoInter').empty();
                response.forEach(element => {
                    $('#TipoInter').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
                });
            });
    });


}

function TablaJornada() {

    var filtroActivo = $('#filActi1').val();
    var strfiltro = $('#filtro1').val();
    var filtrojer = $('#filtojer1').val();

    $.ajax({
        url: '/Asistencia/GetTablaFiltradaJornadaDiaria',
        type: 'POST',
        data: {
            IntActivoFilter: filtroActivo, strfilter: strfiltro, intfiltrojer: filtrojer
        },
        beforeSend: function () {
            $.blockUI({
                css: {
                    border: 'none',
                    padding: '15px',
                    backgroundColor: '#000',
                    '-webkit-border-radius': '10px',
                    '-moz-border-radius': '10px',
                    opacity: .5,
                    color: '#fff'
                },
                message: 'Procesando...'
            });
        },
        success: function (response) {
            console.log(response)
            if (typeof _varTablaJornada !== 'undefined') {
                _varTablaJornada.destroy();
            }
            _varTablaJornada = $('#tablaJornada').DataTable({
                data: response,
                columns: [

                    { data: 'strCodJornada' },
                    { data: 'strDscJornada' },
                    { data: 'EXtra1' },//Tipo Jornada
                    { data: 'EXtra2' },//Tipo de Refrigerio
                    { data: 'timeHoraIni' },//Entrada
                    { data: 'timeHoraFin' },//Salida 
                    { data: 'EXtra3' },//Dependencia
                    { data: 'EXtra4' },//Und. Organizacional
                    { data: 'strTipoServicio' }, //Añadido HG.16.02.21 jueves18        //08   //Inicio y Fin de código para solucionar observación 1.3  HG 02.03.2021
                    { data: null },
                    { data: 'intIdJornada' },

                ],
                lengthMenu: [10, 25, 50],
                order: [],
                responsive: true,
                language: _datatableLanguaje,
                columnDefs: [//ocultar y definir columnas
                    {
                        targets: [9],
                        data: null,
                        defaultContent: '<button class="btn btn-success btn-xs btn-edit" ><i class="fa fa-pencil"></i> Editar </button>' +
                            '<button class="btn btn-primary btn-xs btn-delete"><i class="fa fa-trash-o"></i> Eliminar </button>'
                    },
                    {
                        targets: [10],
                        visible: false,
                        searchable: false
                    }
                ],
                dom: 'lBfrtip',
            });
        },
        complete: function () {
            $.unblockUI();
        },
    });

}
function intentEliminarJornada(idJor, nomJor) {
    swal({
        title: "Eliminar Jornada Diaria",
        text: "¿Está seguro de eliminar la Jornada   ''<strong>" + nomJor + "</strong>''?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí, eliminar",
        cancelButtonText: "No, cancelar",
    }).then(function (isConfirm) {
        validarSession()
        if (isConfirm) {
            yesEliminaJornada(idJor);
        } else {
            //swal("Cancelado", "La Operación fue cancelada", "error");
        }
    });
}
function yesEliminaJornada(idJor) {
    $.post(
        '/Asistencia/EliminarJornada',
        { intIdJornada: idJor },
        (response) => {
            console.log(response);
            if (response.type !== '') {
                var tipo = 'Eliminado!';
                if (response.type === 'error')
                    tipo = 'NO SE PUEDE ELIMINAR EL REGISTRO';
                swal(tipo, response.message, response.type);

                if (response.type === 'success')
                    $('.form-hide-JornadaDiaria').hide();
                TablaJornada();
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}
function CamposAdicionalesJornada() {
    $.post(
        '/Organizacion/CamposAdicionales',
        { strEntidad: 'TGJORNADA' },
        (response) => {
            console.log(response);
            $('#containerCampose').empty();
            response.forEach(element => {
                $('#containerCampose').append(
                    ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                    + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="' + element.strTitulo.replace("(*)", "") + '" maxlength="255"/>' + '</div></div>');
            });
        });
}
function ComboComedor() {
    //Combo Tipo De Servicio - Jornada Diaria
    $.post(
        '/Personal/ListarCombos',// HG 13.03.21 Cambiado COMEDOR por RN --se devuelve a COMEDOR 05.04.2021
        {
            intIdMenu: 1,
            strEntidad: 'TGTIPO',
            intIdFiltroGrupo: 0,
            strGrupo: 'COMEDOR',
            strSubGrupo: 'TIPOSERV',
        },
        (response) => {
            $('#TipoServC').empty();
            $('#TipoServC').append('<option value="0">Seleccione</option>');
            response.forEach(element => {
                $('#TipoServC').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
            });
        });

}

function cardarDatosJornada(data) {
    $('.form-hide-JornadaDiaria').show();
    $.post(
        '/Asistencia/EditarJornadaDiaria',
        {},
        (response) => {
            if (response !== '') {
                $('.form-hide-JornadaDiaria .x_content').empty();
                $('.form-hide-JornadaDiaria .x_content').html(response);
                $('.form-hide-JornadaDiaria').show();
                init_checkBox_styles();
                $('#btn-update-JornadaDiaria').show();
                $('#btn-save-change-JornadaDiaria').hide();
                CamposAdicionalesJornada();
                detalleinterval.length = 0;
                detalleHoras.length = 0;

                $.post(
                    '/Asistencia/ObtenerJornadaPorsuPK',
                    { intIdJornada: data.intIdJornada },
                    (response) => {
                        console.log(response);
                        let element = response[0];

                        //Combo Tipo Jornada
                        $.post(
                            '/Personal/ListarCombos',//{ strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'JORN', strSubGrupo: 'TIPO' },
                            {
                                intIdMenu: 1,
                                strEntidad: 'TGTIPO',
                                intIdFiltroGrupo: 0,
                                strGrupo: 'JORN',
                                strSubGrupo: 'TIPO',
                            },
                            (response) => {
                                $('#TipoJor').empty();
                                response.forEach(element => {
                                    $('#TipoJor').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
                                });
                                $('#TipoJor').val(element.intTipoDia);
                            });

                        //ComboRefrigerio
                        $.post(
                            //'/Asistencia/LlenarTipoUM',
                            '/Personal/ListarCombos',
                            { intIdMenu: 1, strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'CAL', strSubGrupo: 'REF' },
                            (response) => {
                                $('#cboRef').empty();
                                response.forEach(element => {
                                    $('#cboRef').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
                                    if (element.strextra1 == '1') { _IdSinRefri = element.intidTipo; }
                                    /*
                                    intIdEntidad	strDeEntidad	strextra1
                                    36	        Sin Refrigerio	            1
                                    37	        Refrigerio c/ Marca	        2
                                    38	        Refrigerio s/ Marca	        3
                                    */
                                });
                                $('#cboRef').val(element.intControlRefri);

                                var idComboRefri = element.intControlRefri;
                                //Combos Intervalo Según refrigerio
                                $.post(
                                    '/Personal/ListarCombos',
                                    {
                                        intIdMenu: 1,
                                        strEntidad: 'TGTIPO',
                                        intIdFiltroGrupo: idComboRefri,
                                        strGrupo: 'CAL',
                                        strSubGrupo: 'HOR',
                                    },
                                    (response) => {
                                        $('#TipoInter').empty();
                                        response.forEach(element => {
                                            $('#TipoInter').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
                                        });
                                    });

                            });

                        //ComboJerarquia - modificado 23.08.2021
                        $.post(
                            '/Personal/ListarCombos',
                            {
                                intIdMenu: 1,
                                strEntidad: 'TGJERARQORG',
                                intIdFiltroGrupo: 0,
                                strGrupo: 'DEPEN_MAESTROS',
                                strSubGrupo: '',
                            },
                            (response) => {
                                $('#cboJerar').empty();
                                if (response.length > 1) {
                                    $('#cboJerar').append('<option value="0">Seleccione</option>');
                                }
                                response.forEach(element => {
                                    $('#cboJerar').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
                                });

                                $("#cboJerar option").filter(function () {
                                    return this.text == element.EXtra3;
                                }).attr('selected', true);

                                var idER = $("#cboJerar").val();

                                $.post(
                                    '/Personal/ListarCombos',//{ strEntidad: 'TGUNIDORG', intIdFiltroGrupo: IntidJerar, strGrupo: 'JERAR', strSubGrupo: '' },
                                    {
                                        intIdMenu: 1,
                                        strEntidad: 'TGUNIDORG',
                                        intIdFiltroGrupo: idER,
                                        strGrupo: 'JERAR',
                                        strSubGrupo: '',
                                    },
                                    (response) => {
                                        $('#cboUndOrg').empty();
                                        $('#cboUndOrg').attr('disabled', false);

                                        response.forEach(element => {
                                            $('#cboUndOrg').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
                                        });
                                        $("#cboUndOrg").val(element.IntIdUniOrg);
                                    });
                            });

                        //Combo Turno
                        $.post(
                            '/Personal/ListarCombos',
                            {
                                intIdMenu: 1,
                                strEntidad: 'TGTIPO',
                                intIdFiltroGrupo: 0,
                                strGrupo: 'CAL',
                                strSubGrupo: 'TURN',
                            },
                            (response) => {
                                $('#TipoTurn').empty();
                                response.forEach(element => {
                                    $('#TipoTurn').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
                                });
                            });


                        //Combo UnidadOrganizacional -
                        $('#cboJerar').on('change', function () {
                            var IntidJerar = $('#cboJerar option:selected').val();
                            $.post(
                                '/Personal/ListarCombos',//{ strEntidad: 'TGUNIDORG', intIdFiltroGrupo: IntidJerar, strGrupo: 'JERAR', strSubGrupo: '' },
                                {
                                    intIdMenu: 1,
                                    strEntidad: 'TGUNIDORG',
                                    intIdFiltroGrupo: IntidJerar,
                                    strGrupo: 'JERAR',
                                    strSubGrupo: '',
                                },
                                (response) => {
                                    $('#cboUndOrg').empty();
                                    $('#cboUndOrg').attr('disabled', false);
                                    response.forEach(element => {
                                        $('#cboUndOrg').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
                                    });
                                });
                        });

                        //Combo Tipo Intervalo #2 -añadido 24.02.2021
                        $('#cboRef').on('change', function () {
                            var IntidCombo = $('#cboRef option:selected').val();
                            $.post(
                                '/Personal/ListarCombos',
                                {
                                    intIdMenu: 1,
                                    strEntidad: 'TGTIPO',
                                    intIdFiltroGrupo: IntidCombo,
                                    strGrupo: 'CAL',
                                    strSubGrupo: 'HOR',
                                },
                                (response) => {
                                    $('#TipoInter').empty();
                                    response.forEach(element => {
                                        $('#TipoInter').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
                                    });
                                });
                        });


                        $('#cbounidsupe').empty();
                        $('#cboRefriguerio').val(element.intControlRefri);
                        $('#txt_cod_Jor').val(element.strCodJornada);
                        $('#txt_desc_Jor').val(element.strDscJornada);
                        $('#idjorn').val(data.intIdJornada);

                        if (element.bitFlActivo == false) {
                            $('#11').html('<label id="_lbl_">Inactivo</label> <input type="checkbox" id="chk-activo-JorDia" class=" js-switch"  /><script>switcheryLoad();</script >');//21.05.2021
                        } else if (element.bitFlActivo == true) {
                            $('#11').html('<label id="_lbl_">Activo</label> <input type="checkbox" id="chk-activo-JorDia" class=" js-switch" checked /><script>switcheryLoad();</script >');
                        }

                        if (element.bitDiaSig == true) {
                            $('#chck_cambdia').iCheck('check');
                            $('#bitDiaSqtIni').attr('disabled', false);
                            $('#bitDiaSqtFin').attr('disabled', false);
                        }
                        else if (element.bitDiaSig == false) {
                            $('#chck_cambdia').iCheck('uncheck');
                            $('#bitDiaSqtIni').attr('disabled', true);
                            $('#bitDiaSqtFin').attr('disabled', true);
                        }
                        if (element.bitPertenecDiaSig == true) {
                            $('#chck_perteneceJor').iCheck('check');
                        }
                        else if (element.bitPertenecDiaSig == false) {
                            $('#chck_perteneceJor').iCheck('uncheck');
                        }

                        $('#txtcolor').val(element.strColor);
                        init_ColorPicker();

                        $('#strJornadaCampo1').val(element.strJornadaCampo1);
                        $('#strJornadaCampo2').val(element.strJornadaCampo2);
                        $('#strJornadaCampo3').val(element.strJornadaCampo3);
                        $('#strJornadaCampo4').val(element.strJornadaCampo4);
                        $('#strJornadaCampo5').val(element.strJornadaCampo5);
                    });

                if ($('#TipoInter').val() == 2) {

                    $('#cons_trab').hide();
                    $('#consi_max').hide();
                    $('#checks_pri_ult').show();
                    $('#chck_pri').iCheck('uncheck');
                    $('#chck_ult').iCheck('uncheck');
                    $('#consTrab').iCheck('uncheck');
                    $('#tiempo_cons_max').empty();
                }






                var d = new Date();
                var n = d.getTime()
                var uiui = 2;

                $.post(
                    '/Asistencia/GetTablaFiltradaIntervalos',
                    { intfiltrojer: data.intIdJornada },
                    (response) => {
                        $("#CantArrInter").val(response.length)
                        response.forEach(element => {
                            if (element.intNuOrden == 1) {
                                var strorden = 'Primero';
                                $('#end').val(5);
                            }
                            if (element.intNuOrden == 999) {
                                var strorden = 'Último';
                                $('#end2').val(5);
                            } if (element.intNuOrden !== 1 && element.intNuOrden !== 999) {
                                var strorden = ' ';
                            }

                            class Intervalos {//modificado 06.09.2021
                                constructor(interva, intTipoInterval, NomTipoInter, timeHoraIni, timeHoraFin, intTurno, timeTolerancia, timeDuracion, timeTiempoMaximo, bitFlHT, bitDiaSig, strorden, intnum, idTurno, DSgtIni, DSgtFin, clave, intidTipoServ, strDeTipServ) {
                                    this.interva = interva
                                    this.intTipoInterval = intTipoInterval
                                    this.NomTipoInter = NomTipoInter
                                    this.timeHoraIni = timeHoraIni
                                    this.timeHoraFin = timeHoraFin
                                    this.intTurno = intTurno
                                    this.timeTolerancia = timeTolerancia
                                    this.timeDuracion = timeDuracion
                                    this.timeTiempoMaximo = timeTiempoMaximo
                                    this.bitFlHT = bitFlHT
                                    this.bitDiaSig = bitDiaSig
                                    this.strorden = strorden
                                    this.intnum = intnum
                                    this.idTurno = idTurno
                                    this.DSgtIni = DSgtIni //añadido 06.09.2021
                                    this.DSgtFin = DSgtFin //añadido 06.09.2021
                                    this.clave = n
                                    this.intidTipoServ = intidTipoServ //Añadido HG_18.02.21 TIPO DE SERVICIO
                                    this.strDeTipServ = strDeTipServ   //Añadido HG_19.02.21 TIPO DE SERVICIO
                                }
                            }

                            class Horas {
                                constructor(HoraInicial, MinIninicial, HoraFinal, MiniFinal, clave, orden, DSgtIni, DSgtFin) {//modificado 06.09.2021

                                    this.HoraInicial = HoraInicial
                                    this.MinIninicial = MinIninicial
                                    this.HoraFinal = HoraFinal
                                    this.MiniFinal = MiniFinal
                                    this.clave = n
                                    this.orden = orden//añadido
                                    this.DSgtIni = DSgtIni //añadido 06.09.2021
                                    this.DSgtFin = DSgtFin //añadido 06.09.2021
                                }
                            }

                            var _HoraIni = element.strectra7;
                            var _HoraFin = element.strectra8;

                            var HoraIni = parseInt(_HoraIni.substring(0, 2));
                            var MiniIni = parseInt(_HoraIni.substring(5, 3));
                            var HoraFin = parseInt(_HoraFin.substring(0, 2));
                            var MiniFin = parseInt(_HoraFin.substring(5, 3));
                            var NumOrden = element.intNuOrden
                            var DSgtIni = element.bitDSgtIni
                            var DSgtFin = element.bitDSgtFin
                            n = parseInt(n) + parseInt(uiui);
                            detalleHoras.push(new Horas(HoraIni, MiniIni, HoraFin, MiniFin, n, NumOrden, DSgtIni, DSgtFin));
                            //alert('ORDEN : ' + NumOrden);//HGM
                            detalleinterval.push(new Intervalos(element.strectra3,
                                element.intTipoInterval, element.strectra1, element.strectra7, element.strectra8, element.strectra2,
                                element.strectra5, element.strectra4, element.strectra6, element.bitFlHT, element.bitDiaSig, strorden, element.intNuOrden, element.intTurno, DSgtIni, DSgtFin,
                                n, element.intidTipoServ, element.strDeTipServ));// se añadio , element.intTurno el 03.09.2021 //modificado 06.09.2021 >> se añadió DSgtIni, DSgtFin, Se retiró , element.intIdIntervalo

                            uiui = uiui + 2;

                        });
                        console.log(detalleinterval);
                        if (typeof _varTablaIntervalo !== 'undefined') {
                            _varTablaIntervalo.destroy();
                        }

                        _varTablaIntervalo = $('#TablaIntervalso').DataTable({

                            data: detalleinterval,
                            columns: [
                                { data: 'interva' },
                                { data: 'NomTipoInter' },
                                { data: 'intTipoInterval' },
                                { data: 'timeDuracion' },
                                { data: 'bitDiaSig' },
                                { data: 'timeHoraIni' },
                                { data: 'timeTiempoMaximo' },
                                { data: 'timeTolerancia' },
                                { data: 'intTurno' },
                                { data: 'strorden' },
                                { data: 'intnum' },
                                { data: 'timeHoraFin' },
                                {
                                    sortable: false,
                                    "render": (data, type, item, meta) => {

                                        let clave = item.clave;
                                        return `<input type="button" class="btn btn-danger btn-xs btn-delete InterJor" dataid="${clave}" data="${item}" value="Quitar" />`;
                                    }
                                },
                                { data: 'clave' },
                                { data: 'bitFlHT' },
                                //AÑADIDO-001 (para el campo tipo de servicio) en Formulario 
                                { data: 'intidTipoServ' },  //P16 AÑADIDO 
                                { data: 'strDeTipServ' },   //p17 AÑADIDO 
                            ],
                            order: [],
                            lengthMenu: [15],
                            sDom: '',
                            responsive: true,
                            language: {
                                lengthMenu: '',
                                info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
                                infoEmpty: 'No hay Items para mostrar',//***
                                search: '',
                                sSearchPlaceholder: '',
                                zeroRecords: '',
                                infoFiltered: '',
                                paginate: {
                                    previous: 'Anterior',
                                    next: 'Siguiente'
                                }
                            },
                            columnDefs: [//ocultar y definir columnas
                                {
                                    targets: [2],
                                    visible: false,
                                },
                                {
                                    targets: [4],
                                    visible: false,
                                },
                                {
                                    targets: [5],
                                    visible: false,
                                },
                                {
                                    targets: [6],
                                    visible: false,
                                },
                                {
                                    targets: [10],
                                    visible: false,
                                },
                                {
                                    targets: [11],
                                    visible: false,
                                },
                                {
                                    targets: [13],
                                    visible: false,
                                },
                                {
                                    targets: [14],
                                    visible: false,
                                },
                                {
                                    targets: [15],
                                    visible: false,
                                }
                            ],

                        });

                        $('.form-control input-sm').hide();
                        //$('#chck_pri').iCheck('uncheck');
                        //$('#chck_ult').iCheck('uncheck');
                        $('#consTrab').iCheck('uncheck');
                    });



                /*=========================================BLOQUE ON CHANGES================================================================*/
                //#region ONCHANGES

                $('#chck_pri').on('ifChecked', function (event) {

                    if ($('#chck_pri').is(':checked') == true) {

                        if ($('#TipoInter').val() == _Ordinario || $('#TipoInter').val() == _OrdinarioFlex) {

                            $('#tiempo_tole_f').show(); //añadido Comedor 25.10.2021
                        }
                    }

                });

                $('#chck_pri').on('ifUnchecked', function (event) {

                    if ($('#chck_pri').is(':checked') == false) {

                        if ($('#TipoInter').val() == _Ordinario || $('#TipoInter').val() == _OrdinarioFlex) {

                            $('#tiempo_tole_f').hide(); //añadido Comedor 25.10.2021
                            $('#tiempo_tole').val('00:00');
                        }
                    }

                });

                $('#tiempo_tole_f').hide();

                //-------------------------------------------------------------------------------------------------------
                $('#TipoInter').on('change', function () {
                    $('#TipServCom').hide();//añadido Comedor 28.09.2021
                    if ($('#TipoInter').val() == _Ordinario) {//modificado 03.09.2021
                        $('#tiempo_tole_f').hide(); //añadido Comedor 25.10.2021
                        $('#tiempo_tole').val('00:00');
                        $('#cons_trab').hide();
                        $('#consi_max').hide();
                        $('#checks_pri_ult').show();
                        $('#chck_pri').iCheck('uncheck');
                        $('#chck_ult').iCheck('uncheck');
                        $('#consTrab').iCheck('uncheck');
                        $('#tiempo_cons_max').empty();
                    } else if ($('#TipoInter').val() == _Extraordinario) {//modificado 03.09.2021
                        $('#tiempo_tole_f').hide(); //añadido Comedor 25.10.2021
                        $('#tiempo_tole').val('00:00');
                        $('#cons_trab').hide();
                        $('#consi_max').hide();
                        $('#checks_pri_ult').hide();
                        $('#chck_pri').iCheck('uncheck');
                        $('#chck_ult').iCheck('uncheck');
                        $('#consTrab').iCheck('uncheck');
                        $('#tiempo_cons_max').empty();
                    } else if ($('#TipoInter').val() == _Refrigerio) {//modificado 03.09.2021
                        ComboComedor();//añadido 28.09.2021
                        $('#tiempo_tole_f').show(); //añadido Comedor 25.10.2021
                        $('#cons_trab').show();
                        $('#TipServCom').show();//añadido Comedor 28.09.2021
                        $('#consi_max').hide();
                        $('#checks_pri_ult').hide();
                        $('#chck_pri').iCheck('uncheck');
                        $('#chck_ult').iCheck('uncheck');
                        $('#consTrab').iCheck('uncheck');
                        $('#tiempo_cons_max').empty();
                    } else if ($('#TipoInter').val() == _OrdinarioFlex) {//modificado 03.09.2021
                        $('#tiempo_tole_f').hide(); //añadido Comedor 25.10.2021
                        $('#tiempo_tole').val('00:00');
                        $('#cons_trab').hide();
                        $('#consi_max').show();
                        $('#checks_pri_ult').show();
                        $('#chck_pri').iCheck('uncheck');
                        $('#chck_ult').iCheck('uncheck');
                        $('#consTrab').iCheck('uncheck');
                        $('#tiempo_cons_max').empty();
                    } else if ($('#TipoInter').val() == _RefrigerioFlex) {//modificado 03.09.2021
                        ComboComedor();//añadido 28.09.2021
                        $('#tiempo_tole_f').show(); //añadido Comedor 25.10.2021
                        $('#consi_max').show();
                        $('#TipServCom').show();//añadido Comedor 28.09.2021
                        $('#cons_trab').show();
                        $('#checks_pri_ult').hide();
                        $('#chck_pri').iCheck('uncheck');
                        $('#chck_ult').iCheck('uncheck');
                        $('#consTrab').iCheck('uncheck');
                        $('#tiempo_cons_max').empty();
                    }
                });

                //Limpiar o Borrar Todos los Intervalos
                //-------------------------------------------------------------------------------------------------------
                $('#btn-limpiar-Intrevalos').on('click', function () {
                    $('#TipoInter').val(_Ordinario);
                    $('#TipoTurn').val(_TurnoM);
                    $('#tiempo_inic').val('00:00');
                    $('#tiempo_fin').val('00:00');
                    $('#tiempo_tole').val('00:00');
                    $('#tiempo_dura').val('00:00');
                    $('#tiempo_cons_max').val('00:00');
                    $('#cons_trab').hide();
                    $('#consi_max').hide();
                    $('#checks_pri_ult').hide();

                    if ($('#TipoInter').val() == _Ordinario) {
                        $('#cons_trab').hide();
                        $('#consi_max').hide();
                        $('#checks_pri_ult').show();
                        $('#chck_pri').iCheck('uncheck');
                        $('#chck_ult').iCheck('uncheck');
                        $('#consTrab').iCheck('uncheck');
                        $('#tiempo_cons_max').empty();
                    }
                });

                //Check Primero
                //-------------------------------------------------------------------------------------------------------
                $('#chck_pri').on('ifChanged', function () {
                    if ($('#chck_pri').is(':checked') == true) {
                        $('#chck_ult').iCheck('uncheck');
                    } else if ($('#chck_pri').is(':checked') == false) {
                        $('#chck_pri').iCheck('uncheck');
                    }
                });

                //Check Ultimo
                //-------------------------------------------------------------------------------------------------------
                $('#chck_ult').on('ifChanged', function () {
                    if ($('#chck_ult').is(':checked') == true) {
                        $('#chck_pri').iCheck('uncheck');
                    } else if ($('#chck_ult').is(':checked') == false) {
                        $('#chck_ult').iCheck('uncheck');
                    }
                });

                //Cambio Día
                //-------------------------------------------------------------------------------------------------------
                $('#chck_cambdia').on('ifChanged', function () {
                    if ($('#chck_cambdia').is(':checked') == true) {
                        $('#Pertenece_Jor').show();
                        $('#chck_perteneceJor').attr('disabled', false);
                        $('#bitDiaSqtIni').attr('disabled', false);
                        $('#bitDiaSqtFin').attr('disabled', false);
                    }
                    if ($('#chck_cambdia').is(':checked') == false) {
                        $('#chck_perteneceJor').iCheck('uncheck');
                        $('#Pertenece_Jor').hide();
                        $('#chck_perteneceJor').attr('disabled', true);
                        $('#bitDiaSqtIni').attr('disabled', true);
                        $('#bitDiaSqtFin').attr('disabled', true);
                    }
                });
                //-------------------------------------------------------------------------------------------------------
                $('#tiempo_inic').on('change', function () {
                    $('#tiempo_dura').val('00:00');
                    var _HoraIni = $('#tiempo_inic').val();
                    var _HoraFin = $('#tiempo_fin').val();
                    var _bitDiaSiq = $('#chck_cambdia').is(':checked');

                    if (_HoraIni == '00:00' && _HoraFin == '00:00') {
                        $('#tiempo_dura').val('00:00');
                    } else if (_HoraFin == '00:00') {
                        var HoraIni = parseInt(_HoraIni.substring(0, 2));
                        var HoraFin = parseInt(_HoraFin.substring(0, 2));
                        var MiniIni = parseInt(_HoraIni.substring(5, 3));
                        var MiniFin = parseInt(_HoraFin.substring(5, 3));

                        if (HoraIni == 0 && HoraFin == 0 && MiniIni !== 0) {
                            var HoraDur = 0;
                            var MinDur = '00';
                            if (MiniIni == 0) {
                                MinDur = 0;
                            } else if (MiniIni !== 0) {
                                MinDur = 60 - MiniIni;
                            }

                            if (HoraDur < 10) {
                                if (MinDur < 10) {
                                    $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                } else if (MinDur > 9) {
                                    $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                }
                            } else if (HoraDur > 9) {
                                if (MinDur < 10) {
                                    $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                } else if (MinDur > 9) {
                                    $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                }
                            }
                        } else if (HoraIni !== 0) {
                            var HoraDur = 24 - HoraIni;
                            var MinDur = '00';
                            if (MiniIni == 0) {
                                MinDur = 0;
                            } else if (MiniIni !== 0) {
                                MinDur = 60 - MiniIni;
                            }

                            if (HoraDur < 10) {
                                if (MinDur < 10) {
                                    $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                } else if (MinDur > 9) {
                                    $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                }
                            } else if (HoraDur > 9) {
                                if (MinDur < 10) {
                                    $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                } else if (MinDur > 9) {
                                    $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                }
                            }
                        }
                    } else {
                        var HoraIni = parseInt(_HoraIni.substring(0, 2));
                        var MiniIni = parseInt(_HoraIni.substring(5, 3));
                        var HoraFin = parseInt(_HoraFin.substring(0, 2));
                        var MiniFin = parseInt(_HoraFin.substring(5, 3));

                        if (HoraIni <= HoraFin) {
                            if (MiniIni <= MiniFin) {
                                var HoraDur = HoraFin - HoraIni;
                                var MinDur = MiniFin - MiniIni;

                                if (HoraDur < 10) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                    }
                                } else if (HoraDur > 9) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                    }
                                }
                            } else if (MiniIni > MiniFin) {

                                var HoraDur = (HoraFin - HoraIni) - 1;
                                var MinDur = (60 - MiniIni) + MiniFin;

                                if (HoraDur < 10) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                    }
                                } else if (HoraDur > 9) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                    }
                                }
                            }
                        }

                        else if (HoraIni > HoraFin) {
                            if (_bitDiaSiq == true) {
                                if (MiniIni <= MiniFin) {
                                    var HoraDur = (24 - HoraIni) + HoraFin;
                                    var MinDur = MiniFin - MiniIni;

                                    if (HoraDur < 10) {
                                        if (MinDur < 10) {
                                            $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                        } else if (MinDur > 9) {
                                            $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                        }
                                    } else if (HoraDur > 9) {
                                        if (MinDur < 10) {
                                            $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                        } else if (MinDur > 9) {
                                            $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                        }
                                    }

                                } else if (MiniIni > MiniFin) {

                                    var HoraDur = ((24 - HoraIni) + HoraFin) - 1;
                                    var MinDur = (60 - MiniIni) + MiniFin;

                                    if (HoraDur < 10) {
                                        if (MinDur < 10) {

                                            $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');

                                        } else if (MinDur > 9) {

                                            $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');

                                        }
                                    } else if (HoraDur > 9) {
                                        if (MinDur < 10) {

                                            $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');

                                        } else if (MinDur > 9) {

                                            $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');

                                        }
                                    }
                                }

                            }
                            else if (_bitDiaSiq == false) {
                                $('#tiempo_dura').val('00:00');
                            }

                        }
                        else {
                            $('#tiempo_dura').val('00:00');
                        }
                    }

                });
                //-------------------------------------------------------------------------------------------------------
                $('#tiempo_fin').on('change', function () {
                    var _HoraIni = $('#tiempo_inic').val();
                    var _HoraFin = $('#tiempo_fin').val();
                    var _bitDiaSiq = $('#chck_cambdia').is(':checked');

                    if (_HoraIni == '00:00' && _HoraFin == '00:00') {
                        $('#tiempo_dura').val('00:00');
                    }
                    if (_HoraIni == '00:00') {
                        var HoraFin = parseInt(_HoraFin.substring(0, 2));
                        var MinFin = parseInt(_HoraFin.substring(5, 3));
                        var HoraDur = HoraFin;
                        var MinDur = MinFin;

                        if (HoraDur < 10) {
                            if (MinDur < 10) {
                                $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                            } else if (MinDur > 9) {
                                $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                            }
                        } else if (HoraDur > 9) {
                            if (MinDur < 10) {
                                $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                            } else if (MinDur > 9) {
                                $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                            }
                        }
                    } else {
                        var HoraIni = parseInt(_HoraIni.substring(0, 2));
                        var MiniIni = parseInt(_HoraIni.substring(5, 3));
                        var HoraFin = parseInt(_HoraFin.substring(0, 2));
                        var MiniFin = parseInt(_HoraFin.substring(5, 3));

                        if (HoraIni <= HoraFin) {
                            if (MiniIni <= MiniFin) {
                                var HoraDur = HoraFin - HoraIni;
                                var MinDur = MiniFin - MiniIni;

                                if (HoraDur < 10) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                    }
                                } else if (HoraDur > 9) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                    }
                                }
                            } else if (MiniIni > MiniFin) {

                                var HoraDur = (HoraFin - HoraIni) - 1;
                                var MinDur = (60 - MiniIni) + MiniFin;

                                if (HoraDur < 10) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                    }
                                } else if (HoraDur > 9) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                    }
                                }
                            }
                        } else if (HoraIni > HoraFin) {

                            if (_bitDiaSiq == true) {
                                if (MiniIni <= MiniFin) {
                                    var HoraDur = (24 - HoraIni) + HoraFin;
                                    var MinDur = MiniFin - MiniIni;

                                    if (HoraDur < 10) {

                                        if (MinDur < 10) {
                                            $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                        } else if (MinDur > 9) {
                                            $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                        }
                                    } else if (HoraDur > 9) {
                                        if (MinDur < 10) {
                                            $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                        } else if (MinDur > 9) {
                                            $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                        }
                                    }

                                } else if (MiniIni > MiniFin) {
                                    var HoraDur = (24 - HoraIni) + HoraFin;
                                    var MinDur = (60 - MiniIni) + MiniFin;

                                    if (HoraDur < 10) {
                                        if (MinDur < 10) {
                                            $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                        } else if (MinDur > 9) {
                                            $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                        }
                                    } else if (HoraDur > 9) {
                                        if (MinDur < 10) {
                                            $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                        } else if (MinDur > 9) {
                                            $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                        }
                                    }
                                }

                            } else if (_bitDiaSiq == false) {
                                $('#tiempo_dura').val('00:00');
                            }
                        }
                        else {
                            $('#tiempo_dura').val('00:00');
                        }
                    }
                });
                //-------------------------------------------------------------------------------------------------------
                $('#tiempo_tole').on('change', function () {

                    var _HoraTole = $('#tiempo_tole').val();
                    var _HoraDura = $('#tiempo_dura').val();
                    if (_HoraDura == '00:00') {

                        $('#tiempo_tole').val('00:00');
                        messageResponseMix({ type: 'info', message: 'Ingrese el Rango de Horas ' }, 'Intervalo')
                        return;
                    } else {
                        var HoraDur = parseInt(_HoraDura.substring(0, 2));
                        var MiniDur = parseInt(_HoraDura.substring(5, 3));
                        var HoraTole = parseInt(_HoraTole.substring(0, 2));
                        var MiniTole = parseInt(_HoraTole.substring(5, 3));

                        if (HoraDur == HoraTole) {
                            if (MiniDur == MiniTole) {
                            } else if (MiniTole > MiniDur) {
                                $('#tiempo_tole').val('00:00');
                                messageResponseMix({ type: 'info', message: 'El tiempo de Tolerancia no puede ser mayor a la Duración.' }, 'Intervalo')
                                return;
                            }
                        } else if (HoraDur > HoraTole) {
                        } else if (HoraDur < HoraTole) {
                            $('#tiempo_tole').val('00:00');
                            messageResponseMix({ type: 'info', message: 'El tiempo de Tolerancia no puede ser mayor a la Duración.' }, 'Intervalo')
                            return;
                        }
                    }
                });


                //BOTON AGREGAR o + (EDITAR INTERVALO)
                //-------------------------------------------------------------------------------------------------------
                $('#btn-save-changes-Intrevalos').on('click', function () {
                    var titulo = 'Actualizar Intervalo';

                    if ($("#TablaIntervalso .InterJor").length == 15) {
                        messageResponseMix({ type: 'info', message: 'Ya se agregaron los 15 intervalos máximos permitidos' }, 'Intervalos')
                        return;
                    }
                    var _bitDiaSiq = $('#chck_cambdia').is(':checked');//Campo de la Jornada
                    //var idasig = $('#chck_cambdia').is(':checked');
                    //Campos del Intervalo:----------------------------------------------
                    var strorden = null;
                    var intnum = null;
                    var _TiEMPOiNTERV = $('#TipoInter option:selected').val();
                    var _HoraIni = $('#tiempo_inic').val();
                    var _HoraFin = $('#tiempo_fin').val();
                    var idTurno = $('#TipoTurn').val();
                    var _TipTutn = $('#TipoTurn option:selected').html();
                    //var num1 = parseInt(_HoraIni); //comentado 06.09.2021
                    //var num2 = parseInt(_HoraFin); //comentado 06.09.2021

                    //añadidos 06.09.2021
                    var DSgtIni = $('#bitDiaSqtIni').is(':checked');
                    var DSgtFin = $('#bitDiaSqtFin').is(':checked');
                    //fin 06.09.2021
                    //---------------------------------------------------------------------
                    if ($('#chck_pri').is(':checked')) {
                        var arr = jQuery.grep(detalleinterval, function (n, i) {
                            return (n.strorden == "Primero")
                        });

                        console.log(arr);
                        if (arr.length == 1) {
                            messageResponseMix({ type: 'info', message: 'Ya Existe el Intervalo de Primer Orden' }, 'Orden')
                            return;
                        }
                        else {

                            strorden = 'Primero';
                            intnum = 1
                        }
                    } else
                        if ($('#chck_ult').is(':checked')) {
                            var arr = jQuery.grep(detalleinterval, function (n, i) {
                                return (n.strorden == "Último")
                            });

                            if (arr.length == 1) {
                                messageResponseMix({ type: 'info', message: 'Ya Existe el Intervalo de Último Orden' }, 'Orden')
                                return;
                            } else {
                                strorden = 'Último';
                                intnum = 999;
                            }
                        }
                        else {
                            if (detalleinterval.length == 0) {
                                strorden = '';
                                intnum = detalleinterval.length + 2;
                            }
                            else if (detalleinterval.length !== 0) {
                                strorden = '';
                                intnum = detalleinterval.length + 1;
                            }
                        }

                    var _Tiptoler = $('#tiempo_tole').val();
                    var _Tipdur = $('#tiempo_dura').val();
                    var _chck_pri = $('#chck_pri').is(':checked');
                    var _chck_ult = $('#chck_ult').is(':checked');
                    var _consTrab = $('#consTrab').is(':checked');
                    //Añadido 28.09.2021
                    var strDeTipServ = "";
                    var intidTipoServ = $('#TipoServC option:selected').val();
                    if (intidTipoServ > 0 && (_TiEMPOiNTERV == _Refrigerio || _TiEMPOiNTERV == _RefrigerioFlex)) {
                        strDeTipServ = $('#TipoServC option:selected').text();
                    }
                    else {
                        strDeTipServ = 'No Aplica';
                        intidTipoServ = 0;
                    }
                     //----------------------------------------------------------------------
                    if (_consTrab == 'true') {
                        _consTrab = true;
                    }
                    else if (_consTrab == true) {
                        _consTrab = true;
                    }
                    var _tiempo_cons_max = $('#tiempo_cons_max').val();
                    var NOMTIP_INT = null;

                    //Rango de Horas visible en tabla inferior
                    var interva;
                    if (DSgtIni == false && DSgtFin == false) {
                        interva = _HoraIni + ' - ' + _HoraFin;
                    } else if (DSgtIni == false && DSgtFin == true) {
                        interva = _HoraIni + ' - +' + _HoraFin;
                    } else if (DSgtIni == true && DSgtFin == false) {
                        interva = '+' + _HoraIni + ' - ' + _HoraFin;
                    } else if (DSgtIni == true && DSgtFin == true) {
                        interva = '+' + _HoraIni + ' - +' + _HoraFin;
                    }

                    //----------------------------------------------------
                    var d = new Date();
                    var n = d.getTime();
                    //Añadido 03.09.2021
                    var Intorden = 0;
                    if (strorden == 'Primero') {
                        Intorden = 1;
                    }
                    if (strorden == 'Último') {
                        Intorden = 2;
                    }

                    _ObjetoIntervalos.forEach(element2 => {
                        if (_TiEMPOiNTERV == element2.intidTipo) {
                            NOMTIP_INT = element2.strDeTipo;

                            class Intervalos {//modificado 06.09.2021
                                constructor(interva, intTipoInterval, NomTipoInter, timeHoraIni, timeHoraFin, intTurno, timeTolerancia, timeDuracion, timeTiempoMaximo, bitFlHT, bitDiaSig, strorden, intnum, idTurno, DSgtIni, DSgtFin, clave, intidTipoServ, strDeTipServ) {

                                    this.interva = interva
                                    this.intTipoInterval = intTipoInterval
                                    this.NomTipoInter = NomTipoInter
                                    this.timeHoraIni = timeHoraIni
                                    this.timeHoraFin = timeHoraFin
                                    this.intTurno = intTurno
                                    this.timeTolerancia = timeTolerancia
                                    this.timeDuracion = timeDuracion
                                    this.timeTiempoMaximo = timeTiempoMaximo
                                    this.bitFlHT = bitFlHT
                                    this.bitDiaSig = bitDiaSig
                                    this.strorden = strorden
                                    this.intnum = intnum
                                    this.idTurno = idTurno
                                    this.DSgtIni = DSgtIni //añadido 06.09.2021
                                    this.DSgtFin = DSgtFin //añadido 06.09.2021
                                    this.clave = n
                                    this.intidTipoServ = intidTipoServ //Añadido HG_18.02.21 TIPO DE SERVICIO
                                    this.strDeTipServ = strDeTipServ   //Añadido HG_19.02.21 TIPO DE SERVICIO
                                }
                            }

                            class Horas {
                                constructor(HoraInicial, MinIninicial, HoraFinal, MiniFinal, clave, orden, DSgtIni, DSgtFin) {//modificado 06.09.2021

                                    this.HoraInicial = HoraInicial
                                    this.MinIninicial = MinIninicial
                                    this.HoraFinal = HoraFinal
                                    this.MiniFinal = MiniFinal
                                    this.clave = n
                                    this.orden = orden//añadido
                                    this.DSgtIni = DSgtIni //añadido 06.09.2021
                                    this.DSgtFin = DSgtFin //añadido 06.09.2021
                                }
                            }

                            //var _HoraIni = $('#tiempo_inic').val();//comentado 06.09.2021
                            //var _HoraFin = $('#tiempo_fin').val();//comentado 06.09.2021
                            //var _bitDiaSiq = $('#chck_cambdia').is(':checked');//comentado 06.09.2021
                            //Valores que intentan agregar
                            var HoraIni = parseInt(_HoraIni.substring(0, 2));
                            var MiniIni = parseInt(_HoraIni.substring(5, 3));
                            var HoraFin = parseInt(_HoraFin.substring(0, 2));
                            var MiniFin = parseInt(_HoraFin.substring(5, 3));

                            //CON CAMBIO DE DÍA------------------------------------------------------------------------------------------------------------------
                            if (DSgtIni == true && DSgtFin == true) {
                                var HoraIni = HoraIni + 24;//Convirtiendo a hrs en base 48 Hrs
                                var HoraFin = HoraFin + 24;//Convirtiendo a hrs en base 48 Hrs
                            }
                            else if (DSgtIni == false && DSgtFin == true) {
                                var HoraFin = HoraFin + 24;//Convirtiendo a hrs en base 48 Hrs
                            }
                            else if (DSgtIni == true && DSgtFin == false) {
                                var HoraIni = HoraIni + 24;//Convirtiendo a hrs en base 48 Hrs
                            }

                            //Bloque de Validaciones ------------------------------------------------------------------------
                            //Convirtiendo en Entero los tiempos para facilitar las validaciones
                            var HIniDc = parseFloat((parseFloat(MiniIni).toFixed(2) / 100)) + parseFloat(parseFloat(HoraIni).toFixed(2));
                            var HFinDc = parseFloat((parseFloat(MiniFin).toFixed(2) / 100)) + parseFloat(parseFloat(HoraFin).toFixed(2));

                            //0. validar que Ini != Fin
                            if (HIniDc == HFinDc) {
                                messageResponseMix({ type: 'info', message: 'La hora Inicial y la hora final no pueden ser igual' }, titulo);
                                return;
                            }
                            //1. Validar que Hora Inicio sea Menor que Hora Fin
                            if (HIniDc > HFinDc) {
                                messageResponseMix({ type: 'info', message: '"Hora de Fin" debe ser posterior a la "Hora de Inicio"' }, titulo);
                                return;
                            }

                            //2. validar Ini - Fin versus Intervalos anteriormente agregados en caso existan
                            if (detalleHoras.length > 0) {
                                var Notify = 0; var xd = 1; var Valdes = 0;

                                detalleHoras.filter(function (dato) {
                                    //var HIniDc = parseFloat((parseFloat(MiniIni).toFixed(2) / 100)) + parseFloat(parseFloat(HoraIni).toFixed(2));
                                    //var HFinDc = parseFloat((parseFloat(MiniFin).toFixed(2) / 100)) + parseFloat(parseFloat(HoraFin).toFixed(2));
                                    var Dato_IniDc = parseFloat((parseFloat(dato.MinIninicial).toFixed(2) / 100)) + parseFloat(parseFloat(dato.HoraInicial).toFixed(2));
                                    var Dato_FinDc = parseFloat((parseFloat(dato.MiniFinal).toFixed(2) / 100)) + parseFloat(parseFloat(dato.HoraFinal).toFixed(2));

                                    //2.1 Validar Ini - Fin no existan previamente agregados (No duplicar)
                                    if (HoraIni == dato.HoraInicial && HoraFin == dato.HoraFinal && MiniIni == dato.MinIninicial && MiniFin == dato.MiniFinal) {
                                        Notify = 5; //Intervalo Existente
                                        return;//break;
                                    }

                                    //2.2 Validar existencia de Primer Intervalo / Ultimo Intervalo
                                    if (Intorden != 0 && dato.orden != 0) {
                                        if (Intorden == dato.orden && Intorden == 1) {
                                            Notify = 2; //Primer Intervalo
                                            return;//break;
                                        }



                                        //if (Intorden == dato.orden && Intorden == 2) {
                                            if (Intorden == dato.orden && Intorden == 999) {  //Modificado de 2 a 999 HGM 10.11.2021
                                            Notify = 3; //Ultimo Intervalo
                                            return;//break;
                                        }


                                    }

                                    //2.3 Validar Cruce de Intervalos
                                    if ((HIniDc >= Dato_FinDc && HFinDc > Dato_FinDc) || (HFinDc <= Dato_IniDc && HIniDc < Dato_IniDc)) {
                                    } else {
                                        Notify = 1;//Cruce de Intervalos
                                        return;//break;
                                    }

                                    //2.4 Validar que Primero sea anterior a Ultimo y visceversa
                                    if (Intorden != 0 && dato.orden != 0) {
                                        //Si intentas registrar primer intervalo
                                        if (Intorden != dato.orden && Intorden == 1 && dato.orden == 2) {
                                            //Si la hora de inicio del intervalo que se intenta añadir como primero es mayor a la hora fin del ultimo intervalo
                                            if (HIniDc >= Dato_FinDc && HFinDc >= Dato_FinDc) {
                                                Notify = 6;
                                                return;
                                            }
                                        }
                                        //Si intentas registrar último intervalo
                                        if (Intorden != dato.orden && Intorden == 2 && dato.orden == 1) {
                                            //Si la hora de fin del intervalo que se intenta añadir como ultimo es menor a la hora inicio del primer intervalo
                                            if (HFinDc <= Dato_IniDc && HIniDc <= Dato_IniDc) {
                                                Notify = 7;
                                                return;
                                            }
                                        }
                                    }

                                    //2.5 Validar Solo Intervalo Ordinario
                                    if (_TiEMPOiNTERV == _Ordinario) {
                                        if (Intorden == 0 && dato.orden == 1) {
                                            if (HIniDc <= Dato_IniDc && HFinDc <= Dato_IniDc) {
                                                Notify = 8;
                                                return;
                                            }
                                        }
                                        if (Intorden == 0 && dato.orden == 2) {
                                            if (HIniDc >= Dato_FinDc && HFinDc >= Dato_FinDc) {

                                                //Notify = 9;//COMENTAOo HGM 08.11.2021
                                                Notify = 0;//COMENTAOo HGM 08.11.2021

                                                return;
                                            }
                                        }
                                    }
                                });

                                if (Notify == 1) {
                                    messageResponseMix({ type: 'info', message: 'Cruce de Intervalos' }, titulo)
                                    return;
                                } else if (Notify == 2) {
                                    messageResponseMix({ type: 'info', message: 'Solo puede agregar una única Primera Jornada' }, titulo)
                                    return;
                                } else if (Notify == 3) {
                                    messageResponseMix({ type: 'info', message: 'Solo puede agregar una única Última Jornada' }, titulo)
                                    return;
                                } else if (Notify == 5) {
                                    messageResponseMix({ type: 'info', message: 'No se puede Repetir el Intervalo' }, titulo)
                                    return;
                                } else if (Notify == 6) {
                                    messageResponseMix({ type: 'info', message: 'El Primer Intervalo debe ser anterior al Último' }, titulo)
                                    return;
                                } else if (Notify == 7) {
                                    messageResponseMix({ type: 'info', message: 'El Último Intervalo debe ser posterior al Primero' }, titulo)
                                    return;
                                } else if (Notify == 8) {
                                    messageResponseMix({ type: 'info', message: 'El Intervalo Ordinario no puede ser Anterior al Primero' }, titulo)
                                    return;
                                } else if (Notify == 9) {
                                    messageResponseMix({ type: 'info', message: 'El Intervalo Ordinario no puede ser Posterior al Último' }, titulo)
                                    return;
                                } else if (Notify == 0 && Valdes == 2 || Notify == 0 && Valdes == 4 || Notify == 0 && Valdes == 0) {
                                    //Agregar Intervalo si pasa todas las validaciones
                                    detalleHoras.push(new Horas(HoraIni, MiniIni, HoraFin, MiniFin, n, Intorden, DSgtIni, DSgtFin)); //modificado 06.09.2021
                                    //detalleHoras.push(new Horas(HoraIni, MiniIni, HoraFin, MiniFin, n));
                                    //Agregandolo al Objeto de Intervalos Permanente
                                    detalleinterval.push(new Intervalos(interva, _TiEMPOiNTERV, NOMTIP_INT, _HoraIni, _HoraFin, _TipTutn, _Tiptoler, _Tipdur, _tiempo_cons_max, _consTrab, _bitDiaSiq, strorden, intnum, idTurno, DSgtIni, DSgtFin, n, intidTipoServ, strDeTipServ));//modificado 28.09.2021
                                }
                                //else if (Valdes > 4) {
                                //    messageResponseMix({ type: 'info', message: 'No se puede Repetir el Intervalo' }, titulo)
                                //    //var dea = (detalleHoras.length) - 1;//comentado 03.09.2021
                                //    //detalleHoras.splice(dea, 1);//comentado 03.09.2021
                                //    return;
                                //}
                            }
                            else {
                                //Agregar Intervalo si pasa todas las validaciones
                                detalleHoras.push(new Horas(HoraIni, MiniIni, HoraFin, MiniFin, n, Intorden, DSgtIni, DSgtFin)); //modificado 06.09.2021
                                //Agregandolo al Objeto de Intervalos Permanente
                                detalleinterval.push(new Intervalos(interva, _TiEMPOiNTERV, NOMTIP_INT, _HoraIni, _HoraFin, _TipTutn, _Tiptoler, _Tipdur, _tiempo_cons_max, _consTrab, _bitDiaSiq, strorden, intnum, idTurno, DSgtIni, DSgtFin, n, intidTipoServ, strDeTipServ));//modificado 28.09.2021
                            }



                            console.log("Prueba 06.09.2021");
                            console.log(detalleHoras);
                            console.log(detalleinterval);

                        }
                        var numeroArreglos = detalleinterval.length;

                        $('#CantArrInter').val(numeroArreglos);

                        if (strorden == 'Primero') {
                            $('#end').val(5);
                        }
                        if (strorden == 'Último') {
                            $('#end2').val(5);
                        }

                    });

                    if (typeof _varTablaIntervalo !== 'undefined') {
                        _varTablaIntervalo.destroy();
                    }

                    _varTablaIntervalo = $('#TablaIntervalso').DataTable({

                        data: detalleinterval,
                        columns: [
                            { data: 'interva' },
                            { data: 'NomTipoInter' },
                            { data: 'intTipoInterval' },
                            { data: 'timeDuracion' },
                            { data: 'bitDiaSig' },
                            { data: 'timeHoraIni' },
                            { data: 'timeTiempoMaximo' },
                            { data: 'timeTolerancia' },
                            { data: 'intTurno' },
                            { data: 'strorden' },
                            { data: 'intnum' },
                            { data: 'timeHoraFin' },
                            {
                                sortable: false,
                                "render": (data, type, item, meta) => {

                                    let clave = item.clave;
                                    return `<input type="button" class="btn btn-danger btn-xs btn-delete InterJor" dataid="${clave}" data="${item}" value="Quitar" />`;
                                }
                            },
                            { data: 'clave' },
                            { data: 'bitFlHT' },
                            //AÑADIDO-001 (para el campo tipo de servicio) en Formulario 
                            { data: 'intidTipoServ' },  //P16 AÑADIDO 
                            { data: 'strDeTipServ' },   //p17 AÑADIDO 
                        ],
                        order: [],
                        lengthMenu: [15],
                        sDom: '',
                        responsive: true,
                        language: {
                            lengthMenu: '',
                            info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
                            infoEmpty: 'No hay Items para mostrar',//***
                            search: '',
                            sSearchPlaceholder: '',
                            zeroRecords: '',
                            infoFiltered: '',
                            paginate: {
                                previous: 'Anterior',
                                next: 'Siguiente'
                            }
                        },
                        columnDefs: [//ocultar y definir columnas
                            {
                                targets: [2],
                                visible: false,
                            },
                            {
                                targets: [4],
                                visible: false,
                            },
                            {
                                targets: [5],
                                visible: false,
                            },
                            {
                                targets: [6],
                                visible: false,
                            },
                            {
                                targets: [10],
                                visible: false,
                            },
                            {
                                targets: [11],
                                visible: false,
                            },
                            {
                                targets: [13],
                                visible: false,
                            },
                            {
                                targets: [14],
                                visible: false,
                            },
                            {
                                targets: [15],
                                visible: false,
                            }
                        ],

                    });

                    $('.form-control input-sm').hide();
                    $('#chck_pri').iCheck('uncheck');
                    $('#chck_ult').iCheck('uncheck');
                    $('#consTrab').iCheck('uncheck');

                });

                //Quitar Intervalo x Intervalo
                //-------------------------------------------------------------------------------------------------------
                $('#TablaIntervalso  tbody').on('click', 'tr input.btn-delete', function () {

                    let claves = $(this).attr("dataid")
                    var LimiteBucle = parseInt(detalleinterval.length);

                    if (!isNaN(claves)) {

                        for (var i = 0; i < parseInt(detalleinterval.length); i++) {
                            if (detalleinterval[i].clave == claves) {
                                u = detalleinterval[i].timeHoraIni;
                                detalleinterval.splice(i, 1);
                                if (detalleHoras[i].clave = claves) {
                                    detalleHoras.splice(i, 1);
                                    console.log(detalleinterval + '---->2');
                                    console.log(detalleHoras + '---->2');
                                    break;
                                }
                            }
                        }

                        if (typeof _varTablaIntervalo !== 'undefined') {
                            _varTablaIntervalo.destroy();
                        }


                        _varTablaIntervalo = $('#TablaIntervalso').DataTable({

                            data: detalleinterval,
                            columns: [
                                { data: 'interva' },
                                { data: 'NomTipoInter' },
                                { data: 'timeTiempoMaximo' },
                                { data: 'intTipoInterval' },
                                { data: 'timeDuracion' },
                                { data: 'bitDiaSig' },
                                { data: 'timeHoraIni' },
                                { data: 'timeTolerancia' },
                                { data: 'intTurno' },
                                { data: 'strorden' },
                                { data: 'intnum' },
                                { data: 'timeHoraFin' },
                                {
                                    sortable: false,
                                    "render": (data, type, item, meta) => {

                                        let clave = item.clave;
                                        return `<input type="button" class="btn btn-danger btn-xs btn-delete" dataid="${clave}" data="${item}" value="Quitar" />`;
                                    }
                                },
                                { data: 'clave' },
                                { data: 'bitFlHT' },
                                //AÑADIDO-001 (para el campo tipo de servicio) en Formulario 
                                { data: 'intidTipoServ' },  //P16 AÑADIDO 
                                { data: 'strDeTipServ' },   //p17 AÑADIDO 

                            ],
                            order: [],
                            lengthMenu: [15],
                            sDom: '',
                            responsive: true,
                            language: {
                                lengthMenu: '',
                                info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
                                infoEmpty: 'No hay Items para mostrar',
                                search: '',
                                sSearchPlaceholder: '',
                                zeroRecords: '',
                                infoFiltered: '',
                                paginate: {
                                    previous: 'Anterior',
                                    next: 'Siguiente'
                                }
                            },
                            columnDefs: [//ocultar y definir columnas
                                {
                                    targets: [2],
                                    visible: false,
                                },
                                {
                                    targets: [3],
                                    visible: false,
                                },
                                {
                                    targets: [5],
                                    visible: false,
                                },
                                {
                                    targets: [6],
                                    visible: false,
                                },
                                {
                                    targets: [10],
                                    visible: false,
                                },
                                {
                                    targets: [11],
                                    visible: false,
                                },
                                {
                                    targets: [13],
                                    visible: false,
                                },
                                {
                                    targets: [14],
                                    visible: false,
                                }
                                ,{
                                    targets: [15],
                                    visible: false,
                                }
                            ],
                        });
                    }
                });

                //-------------------------------------------------------------------------------------------------------
                $('#btn-clear-Intrevalos').on('click', function () {
                    if (detalleinterval.length > 0) {

                        swal({
                            title: "Eliminar intervalos ",
                            text: "¿Está seguro de eliminar todos los Intervalos'?",
                            type: "warning",
                            showCancelButton: true,
                            confirmButtonText: "Sí, eliminar",
                            cancelButtonText: "No, cancelar",
                        }).then(function (isConfirm) {
                            if (isConfirm) {
                                detalleinterval.length = 0;
                                detalleHoras.length = 0;

                                if (typeof _varTablaIntervalo !== 'undefined') {
                                    _varTablaIntervalo.destroy();
                                }

                                _varTablaIntervalo = $('#TablaIntervalso').DataTable({

                                    data: detalleinterval,
                                    columns: [
                                        { data: 'interva' },
                                        { data: 'NomTipoInter' },
                                        { data: 'timeTiempoMaximo' },
                                        { data: 'intTipoInterval' },
                                        { data: 'timeDuracion' },
                                        { data: 'bitDiaSig' },
                                        { data: 'timeHoraIni' },
                                        { data: 'timeTolerancia' },
                                        { data: 'intTurno' },
                                        { data: 'strorden' },
                                        { data: 'intnum' },
                                        { data: 'timeHoraFin' },
                                        {
                                            sortable: false,
                                            "render": (data, type, item, meta) => {

                                                let clave = item.clave;
                                                return `<input type="button" class="btn btn-danger btn-xs btn-delete" dataid="${clave}" data="${item}" value="Quitar" />`;
                                            }
                                        },
                                        { data: 'clave' },
                                        { data: 'bitFlHT' },
                                        //AÑADIDO-001 (para el campo tipo de servicio) en Formulario 
                                        { data: 'intidTipoServ' },  //P16 AÑADIDO 
                                        { data: 'strDeTipServ' },   //p17 AÑADIDO 

                                    ],
                                    order: [],
                                    lengthMenu: [15],
                                    sDom: '',
                                    responsive: true,
                                    language: {
                                        lengthMenu: '',
                                        info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
                                        infoEmpty: 'No hay Items para mostrar',
                                        search: '',
                                        sSearchPlaceholder: '',
                                        zeroRecords: '',
                                        infoFiltered: '',
                                        paginate: {
                                            previous: 'Anterior',
                                            next: 'Siguiente'
                                        }
                                    },
                                    columnDefs: [//ocultar y definir columnas
                                        {
                                            targets: [2],
                                            visible: false,
                                        },
                                        {
                                            targets: [3],
                                            visible: false,
                                        },
                                        {
                                            targets: [5],
                                            visible: false,
                                        },
                                        {
                                            targets: [6],
                                            visible: false,
                                        },
                                        {
                                            targets: [10],
                                            visible: false,
                                        },
                                        {
                                            targets: [11],
                                            visible: false,
                                        },
                                        {
                                            targets: [13],
                                            visible: false,
                                        },
                                        {
                                            targets: [14],
                                            visible: false,
                                        }
                                        ,{
                                            targets: [15],
                                            visible: false,
                                        }
                                    ],

                                });
                                return;
                            } else {
                                //swal("Cancelado", "La Operación fue cancelada", "error");
                            }
                        });

                    }
                });

                function EliminarIntervalos(data) {
                    var u = 0;

                    for (var i = 0; i < detalleinterval.length; i++) {
                        if (u == 0) {
                            if (detalleinterval[i].clave == data * 1) {
                                u = detalleinterval[i].timeHoraIni;
                                detalleinterval.splice(i, 1);
                                detalleHoras.splice(i, 1);
                                continue;
                            }
                        } else if (u !== 0) {
                            u++;
                            return false;
                            break;
                        }
                    }
                }
                //#endregion ONCHANGES
            }
        });

    function init_ColorPicker() {

        if (typeof ($.fn.colorpicker) === 'undefined') { return; }

        $('.demo1').colorpicker();
        $('.demo2').colorpicker();

        $('#demo_forceformat').colorpicker({
            format: 'rgba',
            horizontal: true
        });

        $('#demo_forceformat3').colorpicker({
            format: 'rgba',
        });

        $('.demo-auto').colorpicker();
    }
}


$('#tablaJornada  tbody').on('click', 'tr button.btn-edit', function () {
    validarSession()
    var data = _varTablaJornada.row($(this).parents('tr')).data();
    if (data == null) {
        data = null;
        var data = _varTablaJornada.row($(this).parents('li')).data();
        cardarDatosJornada(data);
    } else {
        var data = _varTablaJornada.row($(this).parents('tr')).data();
        cardarDatosJornada(data);
    }

});
$('#tablaJornada  tbody').on('click', 'tr button.btn-delete', function () {
    validarSession()
    var data = _varTablaJornada.row($(this).parents('tr')).data();

    if (data == null) {
        data = null;
        var data = _varTablaJornada.row($(this).parents('li')).data();
        intentEliminarJornada(data['intIdJornada'], data['strDscJornada']);
    } else {
        var data = _varTablaJornada.row($(this).parents('tr')).data();
        intentEliminarJornada(data['intIdJornada'], data['strDscJornada']);
    }
});

$('#btn-new-JornadaDiaria').on('click', function () {
    validarSession()
    $('.form-hide-JornadaDiaria').show();
    $('#cpicker').colorpicker();
    $('#btn-update-JornadaDiaria').hide();
    $('#btn-save-change-JornadaDiaria').show();
    $.post(
        '/Asistencia/NuevoJornadaDiaria',
        {},
        (response) => {
            if (response !== '') {
                $('.form-hide-JornadaDiaria .x_content').empty();
                $('.form-hide-JornadaDiaria .x_content').html(response);
                $('.form-hide-JornadaDiaria').show();
                switcheryLoad();
                init_checkBox_styles();
                init_ColorPicker();
                CamposAdicionalesJornada();
                CombosJornadaDiariaNuevo();//añadido 03.09.2021
                detalleinterval.length = 0;
                detalleHoras.length = 0;
                //--añadido 23.07.2021
                if (typeof _varTablaIntervalo !== 'undefined') {
                    _varTablaIntervalo.destroy();
                }

                _varTablaIntervalo = $('#TablaIntervalso').DataTable({

                    data: detalleinterval,
                    columns: [
                        { data: 'interva' },
                        { data: 'NomTipoInter' },
                        { data: 'intTipoInterval' },
                        { data: 'timeDuracion' },
                        { data: 'bitDiaSig' },
                        { data: 'timeHoraIni' },
                        { data: 'timeTiempoMaximo' },
                        { data: 'timeTolerancia' },
                        { data: 'intTurno' },
                        { data: 'strorden' },
                        { data: 'intnum' },
                        { data: 'timeHoraFin' },
                        {
                            sortable: false,
                            "render": (data, type, item, meta) => {

                                let clave = item.clave;
                                return `<input type="button" class="btn btn-danger btn-xs btn-delete InterJor" dataid="${clave}" data="${item}" value="Quitar" />`;
                            }
                        },
                        { data: 'clave' },
                        { data: 'bitFlHT' },
                        //AÑADIDO-001 (para el campo tipo de servicio) en Formulario 
                        { data: 'intidTipoServ' },  //P16 AÑADIDO 
                        { data: 'strDeTipServ' },   //p17 AÑADIDO 

                    ],
                    order: [],
                    lengthMenu: [15],
                    sDom: '',
                    responsive: true,
                    language: {
                        lengthMenu: '',
                        info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
                        infoEmpty: 'No hay Items para mostrar',//***
                        search: '',
                        sSearchPlaceholder: '',
                        zeroRecords: '',
                        infoFiltered: '',
                        paginate: {
                            previous: 'Anterior',
                            next: 'Siguiente'
                        }
                    },
                    columnDefs: [//ocultar y definir columnas
                        {
                            targets: [2],
                            visible: false,
                        },
                        {
                            targets: [4],
                            visible: false,
                        },
                        {
                            targets: [5],
                            visible: false,
                        },
                        {
                            targets: [6],
                            visible: false,
                        },
                        {
                            targets: [10],
                            visible: false,
                        },
                        {
                            targets: [11],
                            visible: false,
                        },
                        {
                            targets: [13],
                            visible: false,
                        },
                        {
                            targets: [14],
                            visible: false,
                        }
                        ,
                        {
                            targets: [15],
                            visible: false,
                        }
                    ],

                });
                //-------------------- fin 23.07.2021


                $('#chck_cambdia').on('ifChanged', function () {
                    if ($('#chck_cambdia').is(':checked') == true) {
                        $('#Pertenece_Jor').show();
                        $('#chck_perteneceJor').attr('disabled', false);
                        $('#bitDiaSqtIni').attr('disabled', false);
                        $('#bitDiaSqtFin').attr('disabled', false);
                    }
                    if ($('#chck_cambdia').is(':checked') == false) {
                        $('#chck_perteneceJor').iCheck('uncheck');
                        $('#Pertenece_Jor').hide();
                        $('#chck_perteneceJor').attr('disabled', true);
                        $('#bitDiaSqtIni').attr('disabled', true);
                        $('#bitDiaSqtFin').attr('disabled', true);
                    }
                });

                if ($('#TipoInter').val() == 2) {
                    $('#cons_trab').hide();
                    $('#consi_max').hide();
                    $('#checks_pri_ult').show();
                    $('#chck_pri').iCheck('uncheck');
                    $('#chck_ult').iCheck('uncheck');
                    $('#consTrab').iCheck('uncheck');
                    $('#tiempo_cons_max').empty();
                }
                $('#tiempo_dura').attr('disabled', true);//reubicado 03.09.2021
                $('#bitDiaSqtIni').attr('disabled', true);//reubicado 03.09.2021
                $('#bitDiaSqtFin').attr('disabled', true);//reubicado 03.09.2021
                var txtcod = 'strCodJornada';
                var txtdes = 'strDscJornada';
                var txtcol = 'strColor';

                $.post(
                    '/Organizacion/ListarCaracteresMax',
                    { strMaestro: 'TGJORNADA' },
                    (response) => {
                        response.forEach(element => {
                            if (element.strColumnName == txtcod) {
                                $('#Valcod').children("input").attr('maxlength', element.intMaxLength);
                            } else if (element.strColumnName == txtdes) {
                                $('#Valdes').children("input").attr('maxlength', element.intMaxLength);
                            } else if (element.strColumnName == txtcol) {
                                $('#Valcol').children("input").attr('maxlength', element.intMaxLength);
                            }
                        });
                    });

                /*=========================================BLOQUE ON CHANGES================================================================*/
                //#region ONCHANGES


                ////////////////////////////INICIO CAMBIOS 25.10.2021/////////////////////////////HGM


                $('#chck_pri').on('ifChecked', function (event) {
       
                    if ($('#chck_pri').is(':checked') == true) {
                      
                        if ($('#TipoInter').val() == _Ordinario || $('#TipoInter').val() == _OrdinarioFlex) {
                      
                            $('#tiempo_tole_f').show(); //añadido Comedor 25.10.2021
                        }
                    }

                });

                $('#chck_pri').on('ifUnchecked', function (event) {

                    if ($('#chck_pri').is(':checked') == false) {

                        if ($('#TipoInter').val() == _Ordinario || $('#TipoInter').val() == _OrdinarioFlex) {

                            $('#tiempo_tole_f').hide(); //añadido Comedor 25.10.2021
                            $('#tiempo_tole').val('00:00');
                        }
                    } 

                });

                $('#tiempo_tole_f').hide();
                $('#tiempo_tole').val('00:00');
                //-------------------------------------------------------------------------------------------------------
                $('#TipoInter').on('change', function () {
                    $('#TipServCom').hide();//añadido Comedor 28.09.2021
                    if ($('#TipoInter').val() == _Ordinario) {//modificado 03.09.2021
                        $('#tiempo_tole_f').hide(); //añadido Comedor 25.10.2021
                        $('#tiempo_tole').val('00:00');
                        $('#cons_trab').hide();
                        $('#consi_max').hide();
                        $('#checks_pri_ult').show();
                        $('#chck_pri').iCheck('uncheck');
                        $('#chck_ult').iCheck('uncheck');
                        $('#consTrab').iCheck('uncheck');
                        $('#tiempo_cons_max').empty();
                    } else if ($('#TipoInter').val() == _Extraordinario) {//modificado 03.09.2021
                        $('#tiempo_tole_f').hide(); //añadido Comedor 25.10.2021
                        $('#tiempo_tole').val('00:00');
                        $('#cons_trab').hide();
                        $('#consi_max').hide();
                        $('#checks_pri_ult').hide();
                        $('#chck_pri').iCheck('uncheck');
                        $('#chck_ult').iCheck('uncheck');
                        $('#consTrab').iCheck('uncheck');
                        $('#tiempo_cons_max').empty();
                    } else if ($('#TipoInter').val() == _Refrigerio) {//modificado 03.09.2021
                        ComboComedor();//añadido 28.09.2021
                        $('#tiempo_tole_f').show(); //añadido Comedor 25.10.2021
                        $('#cons_trab').show();
                        $('#TipServCom').show();//añadido Comedor 28.09.2021
                        $('#consi_max').hide();
                        $('#checks_pri_ult').hide();
                        $('#chck_pri').iCheck('uncheck');
                        $('#chck_ult').iCheck('uncheck');
                        $('#consTrab').iCheck('uncheck');
                        $('#tiempo_cons_max').empty();
                    } else if ($('#TipoInter').val() == _OrdinarioFlex) {//modificado 03.09.2021
                        $('#tiempo_tole_f').hide(); //añadido Comedor 25.10.2021
                        $('#tiempo_tole').val('00:00');
                        $('#cons_trab').hide();
                        $('#consi_max').show();
                        $('#checks_pri_ult').show();
                        $('#chck_pri').iCheck('uncheck');
                        $('#chck_ult').iCheck('uncheck');
                        $('#consTrab').iCheck('uncheck');
                        $('#tiempo_cons_max').empty();
                    } else if ($('#TipoInter').val() == _RefrigerioFlex) {//modificado 03.09.2021
                        ComboComedor();//añadido 28.09.2021
                        $('#tiempo_tole_f').show(); //añadido Comedor 25.10.2021
                        $('#consi_max').show();
                        $('#TipServCom').show();//añadido Comedor 28.09.2021
                        $('#cons_trab').show();
                        $('#checks_pri_ult').hide();
                        $('#chck_pri').iCheck('uncheck');
                        $('#chck_ult').iCheck('uncheck');
                        $('#consTrab').iCheck('uncheck');
                        $('#tiempo_cons_max').empty();
                    }
                });

                   ////////////////////////////FIN CAMBIOS 25.10.2021/////////////////////////////


                //$('#tiempo_dura').attr('disabled', true);//comentado y reubicado 03.09.2021

                //Limpiar o Borrar Todos los Intervalos
                //-------------------------------------------------------------------------------------------------------
                $('#btn-limpiar-Intrevalos').on('click', function () {
                    $('#TipoInter').val(_Ordinario);//modificado 03.09.2021
                    $('#TipoTurn').val(_TurnoM);
                    $('#tiempo_inic').val('00:00');
                    $('#tiempo_fin').val('00:00');
                    $('#tiempo_tole').val('00:00');
                    $('#tiempo_dura').val('00:00');
                    $('#tiempo_cons_max').val('00:00');
                    $('#cons_trab').hide();
                    $('#consi_max').hide();
                    $('#checks_pri_ult').hide();

                    if ($('#TipoInter').val() == _Ordinario) {//modificado 03.09.2021
                        $('#cons_trab').hide();
                        $('#consi_max').hide();
                        $('#checks_pri_ult').show();
                        $('#chck_pri').iCheck('uncheck');
                        $('#chck_ult').iCheck('uncheck');
                        $('#consTrab').iCheck('uncheck');
                        $('#tiempo_cons_max').empty();
                    }
                });

                //Check Primero
                //-------------------------------------------------------------------------------------------------------
                $('#chck_pri').on('ifChanged', function () {

                    if ($('#chck_pri').is(':checked') == true) {
                        $('#chck_ult').iCheck('uncheck');
                    } else if ($('#chck_pri').is(':checked') == false) {
                        $('#chck_pri').iCheck('uncheck');
                    }
                });

                //Check Ultimo
                //-------------------------------------------------------------------------------------------------------
                $('#chck_ult').on('ifChanged', function () {

                    if ($('#chck_ult').is(':checked') == true) {
                        $('#chck_pri').iCheck('uncheck');
                    } else if ($('#chck_ult').is(':checked') == false) {
                        $('#chck_ult').iCheck('uncheck');
                    }
                });

                //Cambio Día
                //-------------------------------------------------------------------------------------------------------
                $('#chck_cambdia').on('ifChanged', function () {

                    $('#tiempo_dura').val('00:00');

                    var _HoraIni = $('#tiempo_inic').val();
                    var _HoraFin = $('#tiempo_fin').val();
                    var _bitDiaSiq = $('#chck_cambdia').is(':checked');

                    if (_HoraIni == '00:00' && _HoraFin == '00:00') {
                        $('#tiempo_dura').val('00:00');
                    } else if (_HoraFin == '00:00') {

                        var HoraIni = parseInt(_HoraIni.substring(0, 2));
                        var HoraFin = parseInt(_HoraFin.substring(0, 2));
                        var MiniIni = parseInt(_HoraIni.substring(5, 3));
                        var MiniFin = parseInt(_HoraFin.substring(5, 3));

                        if (HoraIni == 0 && HoraFin == 0 && MiniIni !== 0) {
                            var HoraDur = 0;
                            var MinDur = '00';
                            if (MiniIni == 0) {
                                MinDur = 0;
                            } else if (MiniIni !== 0) {
                                MinDur = 60 - MiniIni;
                            }

                            if (HoraDur < 10) {
                                if (MinDur < 10) {
                                    $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                } else if (MinDur > 9) {
                                    $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                }
                            } else if (HoraDur > 9) {
                                if (MinDur < 10) {
                                    $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                } else if (MinDur > 9) {
                                    $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                }
                            }
                        } else if (HoraIni !== 0) {

                            var HoraDur = 24 - HoraIni;
                            var MinDur = '00';
                            if (MiniIni == 0) {
                                MinDur = 0;
                            } else if (MiniIni !== 0) {
                                MinDur = 60 - MiniIni;
                            }

                            if (HoraDur < 10) {
                                if (MinDur < 10) {
                                    $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                } else if (MinDur > 9) {
                                    $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                }
                            } else if (HoraDur > 9) {
                                if (MinDur < 10) {
                                    $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                } else if (MinDur > 9) {
                                    $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                }

                            }
                        }
                    } else {
                        var HoraIni = parseInt(_HoraIni.substring(0, 2));
                        var MiniIni = parseInt(_HoraIni.substring(5, 3));
                        var HoraFin = parseInt(_HoraFin.substring(0, 2));
                        var MiniFin = parseInt(_HoraFin.substring(5, 3));

                        if (HoraIni <= HoraFin) {

                            if (MiniIni <= MiniFin) {

                                var HoraDur = HoraFin - HoraIni;
                                var MinDur = MiniFin - MiniIni;

                                if (HoraDur < 10) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                    }
                                } else if (HoraDur > 9) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                    }
                                }
                            } else if (MiniIni > MiniFin) {

                                var HoraDur = (HoraFin - HoraIni) - 1;
                                var MinDur = (60 - MiniIni) + MiniFin;

                                if (HoraDur < 10) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                    }
                                } else if (HoraDur > 9) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                    }
                                }
                            }
                        }

                        else if (HoraIni > HoraFin) {

                            if (_bitDiaSiq == true) {

                                if (MiniIni <= MiniFin) {

                                    var HoraDur = (24 - HoraIni) + HoraFin;
                                    var MinDur = MiniFin - MiniIni;


                                    if (HoraDur < 10) {

                                        if (MinDur < 10) {
                                            $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                        } else if (MinDur > 9) {
                                            $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                        }
                                    } else if (HoraDur > 9) {
                                        if (MinDur < 10) {
                                            $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                        } else if (MinDur > 9) {
                                            $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                        }
                                    }

                                } else if (MiniIni > MiniFin) {

                                    var HoraDur = ((24 - HoraIni) + HoraFin) - 1;
                                    var MinDur = (60 - MiniIni) + MiniFin;

                                    if (HoraDur < 10) {
                                        if (MinDur < 10) {
                                            $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                        } else if (MinDur > 9) {
                                            $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                        }
                                    } else if (HoraDur > 9) {
                                        if (MinDur < 10) {
                                            $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                        } else if (MinDur > 9) {
                                            $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                        }
                                    }
                                }

                            }
                            else if (_bitDiaSiq == false) {
                                $('#tiempo_dura').val('00:00');
                            }

                        }
                        else {
                            $('#tiempo_dura').val('00:00');
                        }
                    }


                    var _HoraIni = $('#tiempo_inic').val();
                    var _HoraFin = $('#tiempo_fin').val();
                    var _bitDiaSiq = $('#chck_cambdia').is(':checked');

                    if (_HoraIni == '00:00' && _HoraFin == '00:00') {

                        $('#tiempo_dura').val('00:00');

                    } if (_HoraIni == '00:00') {

                        var HoraFin = parseInt(_HoraFin.substring(0, 2));
                        var MinFin = parseInt(_HoraFin.substring(5, 3));
                        var HoraDur = HoraFin;
                        var MinDur = MinFin;

                        if (HoraDur < 10) {
                            if (MinDur < 10) {
                                $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                            } else if (MinDur > 9) {
                                $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                            }
                        } else if (HoraDur > 9) {
                            if (MinDur < 10) {
                                $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                            } else if (MinDur > 9) {
                                $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                            }
                        }
                    } else {
                        var HoraIni = parseInt(_HoraIni.substring(0, 2));
                        var MiniIni = parseInt(_HoraIni.substring(5, 3));
                        var HoraFin = parseInt(_HoraFin.substring(0, 2));
                        var MiniFin = parseInt(_HoraFin.substring(5, 3));

                        if (HoraIni <= HoraFin) {
                            if (MiniIni <= MiniFin) {
                                var HoraDur = HoraFin - HoraIni;
                                var MinDur = MiniFin - MiniIni;

                                if (HoraDur < 10) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                    }
                                } else if (HoraDur > 9) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                    }
                                }
                            } else if (MiniIni > MiniFin) {

                                var HoraDur = (HoraFin - HoraIni) - 1;
                                var MinDur = (60 - MiniIni) + MiniFin;

                                if (HoraDur < 10) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                    }
                                } else if (HoraDur > 9) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                    }
                                }
                            }
                        }
                        else if (HoraIni > HoraFin) {

                            if (_bitDiaSiq == true) {

                                if (MiniIni <= MiniFin) {

                                    var HoraDur = (24 - HoraIni) + HoraFin;
                                    var MinDur = MiniFin - MiniIni;


                                    if (HoraDur < 10) {

                                        if (MinDur < 10) {
                                            $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                        } else if (MinDur > 9) {
                                            $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                        }
                                    } else if (HoraDur > 9) {
                                        if (MinDur < 10) {
                                            $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                        } else if (MinDur > 9) {
                                            $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                        }
                                    }

                                } else if (MiniIni > MiniFin) {

                                    var HoraDur = (24 - HoraIni) + HoraFin;
                                    var MinDur = (60 - MiniIni) + MiniFin;

                                    if (HoraDur < 10) {
                                        if (MinDur < 10) {
                                            $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                        } else if (MinDur > 9) {
                                            $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                        }
                                    } else if (HoraDur > 9) {
                                        if (MinDur < 10) {
                                            $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                        } else if (MinDur > 9) {
                                            $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                        }
                                    }
                                }

                            }
                            else if (_bitDiaSiq == false) {
                                $('#tiempo_dura').val('00:00');
                            }
                        }
                        else {
                            $('#tiempo_dura').val('00:00');
                        }
                    }
                });

                //-------------------------------------------------------------------------------------------------------
                $('#tiempo_inic').on('change', function () {

                    $('#tiempo_dura').val('00:00');

                    var _HoraIni = $('#tiempo_inic').val();
                    var _HoraFin = $('#tiempo_fin').val();
                    var _bitDiaSiq = $('#chck_cambdia').is(':checked');

                    if (_HoraIni == '00:00' && _HoraFin == '00:00') {
                        $('#tiempo_dura').val('00:00');
                    } else if (_HoraFin == '00:00') {
                        var HoraIni = parseInt(_HoraIni.substring(0, 2));
                        var HoraFin = parseInt(_HoraFin.substring(0, 2));
                        var MiniIni = parseInt(_HoraIni.substring(5, 3));
                        var MiniFin = parseInt(_HoraFin.substring(5, 3));

                        if (HoraIni == 0 && HoraFin == 0 && MiniIni !== 0) {

                            var HoraDur = 0;
                            var MinDur = '00';
                            if (MiniIni == 0) {
                                MinDur = 0;
                            } else if (MiniIni !== 0) {

                                MinDur = 60 - MiniIni;

                            }

                            if (HoraDur < 10) {
                                if (MinDur < 10) {
                                    $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                } else if (MinDur > 9) {
                                    $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                }
                            } else if (HoraDur > 9) {
                                if (MinDur < 10) {
                                    $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                } else if (MinDur > 9) {
                                    $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                }
                            }
                        } else if (HoraIni !== 0) {

                            var HoraDur = 24 - HoraIni;
                            var MinDur = '00';
                            if (MiniIni == 0) {
                                MinDur = 0;
                            } else if (MiniIni !== 0) {

                                MinDur = 60 - MiniIni;

                            }



                            if (HoraDur < 10) {
                                if (MinDur < 10) {
                                    $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                } else if (MinDur > 9) {
                                    $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                }
                            } else if (HoraDur > 9) {
                                if (MinDur < 10) {
                                    $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                } else if (MinDur > 9) {
                                    $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                }

                            }
                        }



                    } else {
                        var HoraIni = parseInt(_HoraIni.substring(0, 2));
                        var MiniIni = parseInt(_HoraIni.substring(5, 3));
                        var HoraFin = parseInt(_HoraFin.substring(0, 2));
                        var MiniFin = parseInt(_HoraFin.substring(5, 3));

                        if (HoraIni <= HoraFin) {

                            if (MiniIni <= MiniFin) {

                                var HoraDur = HoraFin - HoraIni;
                                var MinDur = MiniFin - MiniIni;

                                if (HoraDur < 10) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                    }
                                } else if (HoraDur > 9) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                    }
                                }
                            } else if (MiniIni > MiniFin) {

                                var HoraDur = (HoraFin - HoraIni) - 1;
                                var MinDur = (60 - MiniIni) + MiniFin;

                                if (HoraDur < 10) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                    }
                                } else if (HoraDur > 9) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                    }
                                }
                            }
                        }

                        else if (HoraIni > HoraFin) {

                            if (_bitDiaSiq == true) {

                                if (MiniIni <= MiniFin) {

                                    var HoraDur = (24 - HoraIni) + HoraFin;
                                    var MinDur = MiniFin - MiniIni;


                                    if (HoraDur < 10) {

                                        if (MinDur < 10) {
                                            $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                        } else if (MinDur > 9) {
                                            $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                        }
                                    } else if (HoraDur > 9) {
                                        if (MinDur < 10) {
                                            $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                        } else if (MinDur > 9) {
                                            $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                        }
                                    }

                                } else if (MiniIni > MiniFin) {

                                    var HoraDur = ((24 - HoraIni) + HoraFin) - 1;
                                    var MinDur = (60 - MiniIni) + MiniFin;

                                    if (HoraDur < 10) {
                                        if (MinDur < 10) {
                                            $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                        } else if (MinDur > 9) {
                                            $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                        }
                                    } else if (HoraDur > 9) {
                                        if (MinDur < 10) {
                                            $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                        } else if (MinDur > 9) {
                                            $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                        }
                                    }
                                }

                            }
                            else if (_bitDiaSiq == false) {
                                $('#tiempo_dura').val('00:00');
                            }

                        }
                        else {
                            $('#tiempo_dura').val('00:00');
                        }
                    }
                });

                //-------------------------------------------------------------------------------------------------------
                $('#tiempo_fin').on('change', function () {

                    var _HoraIni = $('#tiempo_inic').val();
                    var _HoraFin = $('#tiempo_fin').val();
                    var _bitDiaSiq = $('#chck_cambdia').is(':checked');

                    if (_HoraIni == '00:00' && _HoraFin == '00:00') {

                        $('#tiempo_dura').val('00:00');

                    } if (_HoraIni == '00:00') {

                        var HoraFin = parseInt(_HoraFin.substring(0, 2));
                        var MinFin = parseInt(_HoraFin.substring(5, 3));

                        var HoraDur = HoraFin;
                        var MinDur = MinFin;

                        if (HoraDur < 10) {
                            if (MinDur < 10) {
                                $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                            } else if (MinDur > 9) {
                                $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                            }
                        } else if (HoraDur > 9) {
                            if (MinDur < 10) {
                                $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                            } else if (MinDur > 9) {
                                $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                            }
                        }



                    } else {
                        var HoraIni = parseInt(_HoraIni.substring(0, 2));
                        var MiniIni = parseInt(_HoraIni.substring(5, 3));
                        var HoraFin = parseInt(_HoraFin.substring(0, 2));
                        var MiniFin = parseInt(_HoraFin.substring(5, 3));

                        if (HoraIni <= HoraFin) {

                            if (MiniIni <= MiniFin) {

                                var HoraDur = HoraFin - HoraIni;
                                var MinDur = MiniFin - MiniIni;

                                if (HoraDur < 10) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                    }
                                } else if (HoraDur > 9) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                    }
                                }
                            } else if (MiniIni > MiniFin) {

                                var HoraDur = (HoraFin - HoraIni) - 1;
                                var MinDur = (60 - MiniIni) + MiniFin;

                                if (HoraDur < 10) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                    }
                                } else if (HoraDur > 9) {
                                    if (MinDur < 10) {
                                        $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                    } else if (MinDur > 9) {
                                        $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                    }
                                }
                            }
                        }
                        else if (HoraIni > HoraFin) {

                            if (_bitDiaSiq == true) {

                                if (MiniIni <= MiniFin) {

                                    var HoraDur = (24 - HoraIni) + HoraFin;
                                    var MinDur = MiniFin - MiniIni;


                                    if (HoraDur < 10) {

                                        if (MinDur < 10) {
                                            $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');
                                        } else if (MinDur > 9) {
                                            $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');
                                        }
                                    } else if (HoraDur > 9) {
                                        if (MinDur < 10) {
                                            $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');
                                        } else if (MinDur > 9) {
                                            $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');
                                        }
                                    }

                                } else if (MiniIni > MiniFin) {

                                    var HoraDur = (24 - HoraIni) + HoraFin;
                                    var MinDur = (60 - MiniIni) + MiniFin;

                                    if (HoraDur < 10) {
                                        if (MinDur < 10) {

                                            $('#tiempo_dura').val('0' + HoraDur + ':0' + MinDur + '');

                                        } else if (MinDur > 9) {

                                            $('#tiempo_dura').val('0' + HoraDur + ':' + MinDur + '');

                                        }
                                    } else if (HoraDur > 9) {
                                        if (MinDur < 10) {

                                            $('#tiempo_dura').val('' + HoraDur + ':0' + MinDur + '');

                                        } else if (MinDur > 9) {

                                            $('#tiempo_dura').val('' + HoraDur + ':' + MinDur + '');

                                        }
                                    }
                                }

                            }
                            else if (_bitDiaSiq == false) {
                                $('#tiempo_dura').val('00:00');
                            }

                        }
                        else {
                            $('#tiempo_dura').val('00:00');
                        }
                    }


                });

                //-------------------------------------------------------------------------------------------------------
                $('#tiempo_tole').on('change', function () {

                    var _HoraTole = $('#tiempo_tole').val();
                    var _HoraDura = $('#tiempo_dura').val();

                    if (_HoraDura == '00:00') {

                        $('#tiempo_tole').val('00:00');
                        messageResponseMix({ type: 'info', message: 'Ingrese el Rango de Horas' }, 'Intervalo')
                        return;
                    } else {
                        var HoraDur = parseInt(_HoraDura.substring(0, 2));
                        var MiniDur = parseInt(_HoraDura.substring(5, 3));
                        var HoraTole = parseInt(_HoraTole.substring(0, 2));
                        var MiniTole = parseInt(_HoraTole.substring(5, 3));

                        if (HoraDur == HoraTole) {

                            if (MiniDur == MiniTole) {

                            } else if (MiniTole > MiniDur) {
                                $('#tiempo_tole').val('00:00');
                                messageResponseMix({ type: 'info', message: 'El tiempo de Tolerancia no puede ser mayor a la Duración.' }, 'Intervalo')
                                return;
                            }
                        } else if (HoraDur > HoraTole) {

                        } else if (HoraDur < HoraTole) {
                            $('#tiempo_tole').val('00:00');
                            messageResponseMix({ type: 'info', message: 'El tiempo de Tolerancia no puede ser mayor a la Duración.' }, 'Intervalo')
                            return;
                        }
                    }


                });

                //BOTON AGREGAR o + (NUEVO INTERVALO)
                //-------------------------------------------------------------------------------------------------------
                $('#btn-save-changes-Intrevalos').on('click', function () {
                    var titulo = 'Nuevo Intervalo';
                    if ($("#TablaIntervalso .InterJor").length == 15) {
                        messageResponseMix({ type: 'info', message: 'Ya se agregaron los 15 intervalos máximos permitidos' }, 'Intervalos')
                        return;
                    }
                    var _bitDiaSiq = $('#chck_cambdia').is(':checked');//Campo de la Jornada
                    //var idasig = $('#chck_cambdia').is(':checked');
                    //Campos del Intervalo:----------------------------------------------
                    var strorden = null;
                    var intnum = null;
                    var _TiEMPOiNTERV = $('#TipoInter option:selected').val();
                    var _HoraIni = $('#tiempo_inic').val();
                    var _HoraFin = $('#tiempo_fin').val();
                    var idTurno = $('#TipoTurn').val();
                    var _TipTutn = $('#TipoTurn option:selected').html();
                    //var num1 = parseInt(_HoraIni); //comentado 06.09.2021
                    //var num2 = parseInt(_HoraFin); //comentado 06.09.2021

                    //añadidos 06.09.2021
                    var DSgtIni = $('#bitDiaSqtIni').is(':checked');
                    var DSgtFin = $('#bitDiaSqtFin').is(':checked');
                    //fin 06.09.2021
                    //---------------------------------------------------------------------
                    if ($('#chck_pri').is(':checked')) {
                        var arr = jQuery.grep(detalleinterval, function (n, i) {
                            return (n.strorden == "Primero")
                        });

                        console.log(arr);
                        if (arr.length == 1) {
                            messageResponseMix({ type: 'info', message: 'Ya Existe el Intervalo de Primer Orden' }, 'Orden')
                            return;
                        }
                        else {

                            strorden = 'Primero';
                            intnum = 1
                        }
                    } else
                        if ($('#chck_ult').is(':checked')) {
                            var arr = jQuery.grep(detalleinterval, function (n, i) {
                                return (n.strorden == "Último")
                            });

                            if (arr.length == 1) {
                                messageResponseMix({ type: 'info', message: 'Ya Existe el Intervalo de Último Orden' }, 'Orden')
                                return;
                            } else {
                                strorden = 'Último';
                                intnum = 999;
                            }
                        }
                        else {
                            if (detalleinterval.length == 0) {
                                strorden = '';
                                intnum = detalleinterval.length + 2;
                            }
                            else if (detalleinterval.length !== 0) {
                                strorden = '';
                                intnum = detalleinterval.length + 1;
                            }
                        }

                    var _Tiptoler = $('#tiempo_tole').val();
                    var _Tipdur = $('#tiempo_dura').val();
                    var _chck_pri = $('#chck_pri').is(':checked');
                    var _chck_ult = $('#chck_ult').is(':checked');
                    var _consTrab = $('#consTrab').is(':checked');

                    //Añadido 28.09.2021
                    var strDeTipServ="";
                    var intidTipoServ = $('#TipoServC option:selected').val();
                    if (intidTipoServ > 0 && (_TiEMPOiNTERV == _Refrigerio || _TiEMPOiNTERV == _RefrigerioFlex )) {
                        strDeTipServ = $('#TipoServC option:selected').text();
                    }
                    else {
                        strDeTipServ = 'No Aplica';
                        intidTipoServ = 0;
                    }
                     //----------------------------------------------------------------------
                    if (_consTrab == 'true') {
                        _consTrab = true;
                    }
                    else if (_consTrab == true) {
                        _consTrab = true;
                    }
                    var _tiempo_cons_max = $('#tiempo_cons_max').val();
                    var NOMTIP_INT = null;

                    //Rango de Horas visible en tabla inferior
                    var interva;
                    if (DSgtIni == false && DSgtFin == false) {
                        interva = _HoraIni + ' - ' + _HoraFin;
                    } else if (DSgtIni == false && DSgtFin == true) {
                        interva = _HoraIni + ' - +' + _HoraFin;
                    } else if (DSgtIni == true && DSgtFin == false) {
                        interva = '+' + _HoraIni + ' - ' + _HoraFin;
                    } else if (DSgtIni == true && DSgtFin == true) {
                        interva = '+' + _HoraIni + ' - +' + _HoraFin;
                    }

                    //----------------------------------------------------
                    var d = new Date();
                    var n = d.getTime();
                    //Añadido 03.09.2021
                    var Intorden = 0;
                    if (strorden == 'Primero') {
                        Intorden = 1;
                    }
                    if (strorden == 'Último') {
                        Intorden = 2;
                    }

                    _ObjetoIntervalos.forEach(element2 => {
                        if (_TiEMPOiNTERV == element2.intidTipo) {
                            NOMTIP_INT = element2.strDeTipo;

                            class Intervalos {//modificado 06.09.2021
                                constructor(interva, intTipoInterval, NomTipoInter, timeHoraIni, timeHoraFin, intTurno, timeTolerancia, timeDuracion, timeTiempoMaximo, bitFlHT, bitDiaSig, strorden, intnum, idTurno, DSgtIni, DSgtFin, clave, intidTipoServ, strTipoServ) {

                                    this.interva = interva
                                    this.intTipoInterval = intTipoInterval
                                    this.NomTipoInter = NomTipoInter
                                    this.timeHoraIni = timeHoraIni
                                    this.timeHoraFin = timeHoraFin
                                    this.intTurno = intTurno
                                    this.timeTolerancia = timeTolerancia
                                    this.timeDuracion = timeDuracion
                                    this.timeTiempoMaximo = timeTiempoMaximo
                                    this.bitFlHT = bitFlHT
                                    this.bitDiaSig = bitDiaSig
                                    this.strorden = strorden
                                    this.intnum = intnum
                                    this.idTurno = idTurno
                                    this.DSgtIni = DSgtIni //añadido 06.09.2021
                                    this.DSgtFin = DSgtFin //añadido 06.09.2021
                                    this.clave = n
                                    this.intidTipoServ = intidTipoServ //Añadido HG_18.02.21 TIPO DE SERVICIO
                                    this.strDeTipServ = strDeTipServ   //Añadido HG_19.02.21 TIPO DE SERVICIO
                                }
                            }

                            class Horas {
                                constructor(HoraInicial, MinIninicial, HoraFinal, MiniFinal, clave, orden, DSgtIni, DSgtFin) {//modificado 06.09.2021

                                    this.HoraInicial = HoraInicial
                                    this.MinIninicial = MinIninicial
                                    this.HoraFinal = HoraFinal
                                    this.MiniFinal = MiniFinal
                                    this.clave = n
                                    this.orden = orden//añadido
                                    this.DSgtIni = DSgtIni //añadido 06.09.2021
                                    this.DSgtFin = DSgtFin //añadido 06.09.2021
                                }
                            }

                            //var _HoraIni = $('#tiempo_inic').val();//comentado 06.09.2021
                            //var _HoraFin = $('#tiempo_fin').val();//comentado 06.09.2021
                            //var _bitDiaSiq = $('#chck_cambdia').is(':checked');//comentado 06.09.2021
                            //Valores que intentan agregar
                            var HoraIni = parseInt(_HoraIni.substring(0, 2));
                            var MiniIni = parseInt(_HoraIni.substring(5, 3));
                            var HoraFin = parseInt(_HoraFin.substring(0, 2));
                            var MiniFin = parseInt(_HoraFin.substring(5, 3));

                            //CON CAMBIO DE DÍA------------------------------------------------------------------------------------------------------------------
                            if (DSgtIni == true && DSgtFin == true) {
                                var HoraIni = HoraIni + 24;//Convirtiendo a hrs en base 48 Hrs
                                var HoraFin = HoraFin + 24;//Convirtiendo a hrs en base 48 Hrs
                            }
                            else if (DSgtIni == false && DSgtFin == true) {
                                var HoraFin = HoraFin + 24;//Convirtiendo a hrs en base 48 Hrs
                            }
                            else if (DSgtIni == true && DSgtFin == false) {
                                var HoraIni = HoraIni + 24;//Convirtiendo a hrs en base 48 Hrs
                            }

                            //Bloque de Validaciones ------------------------------------------------------------------------
                            //Convirtiendo en Entero los tiempos para facilitar las validaciones
                            var HIniDc = parseFloat((parseFloat(MiniIni).toFixed(2) / 100)) + parseFloat(parseFloat(HoraIni).toFixed(2));
                            var HFinDc = parseFloat((parseFloat(MiniFin).toFixed(2) / 100)) + parseFloat(parseFloat(HoraFin).toFixed(2));

                            //0. validar que Ini != Fin
                            if (HIniDc == HFinDc) {
                                messageResponseMix({ type: 'info', message: 'La hora Inicial y la hora Final no pueden ser igual' }, titulo);
                                return;
                            }
                            //1. Validar que Hora Inicio sea Menor que Hora Fin
                            if (HIniDc > HFinDc) {
                                messageResponseMix({ type: 'info', message: '"Hora de Fin" debe ser posterior a la "Hora de Inicio"' }, titulo);
                                return;
                            }

                            //2. validar Ini - Fin versus Intervalos anteriormente agregados en caso existan
                            if (detalleHoras.length > 0) {
                                var Notify = 0; var xd = 1; var Valdes = 0;

                                detalleHoras.filter(function (dato) {
                                    //var HIniDc = parseFloat((parseFloat(MiniIni).toFixed(2) / 100)) + parseFloat(parseFloat(HoraIni).toFixed(2));
                                    //var HFinDc = parseFloat((parseFloat(MiniFin).toFixed(2) / 100)) + parseFloat(parseFloat(HoraFin).toFixed(2));
                                    var Dato_IniDc = parseFloat((parseFloat(dato.MinIninicial).toFixed(2) / 100)) + parseFloat(parseFloat(dato.HoraInicial).toFixed(2));
                                    var Dato_FinDc = parseFloat((parseFloat(dato.MiniFinal).toFixed(2) / 100)) + parseFloat(parseFloat(dato.HoraFinal).toFixed(2));

                                    //2.1 Validar Ini - Fin no existan previamente agregados (No duplicar)
                                    if (HoraIni == dato.HoraInicial && HoraFin == dato.HoraFinal && MiniIni == dato.MinIninicial && MiniFin == dato.MiniFinal) {
                                        Notify = 5; //Intervalo Existente
                                        return;//break;
                                    }

                                    //2.2 Validar existencia de Primer Intervalo / Ultimo Intervalo
                                    if (Intorden != 0 && dato.orden != 0) {
                                        if (Intorden == dato.orden && Intorden == 1) {
                                            Notify = 2; //Primer Intervalo
                                            return;//break;
                                        }
                                        if (Intorden == dato.orden && Intorden == 2) {
                                            Notify = 3; //Ultimo Intervalo
                                            return;//break;
                                        }
                                    }

                                    //2.3 Validar Cruce de Intervalos
                                    if ((HIniDc >= Dato_FinDc && HFinDc > Dato_FinDc) || (HFinDc <= Dato_IniDc && HIniDc < Dato_IniDc)) {
                                    } else {
                                        Notify = 1;//Cruce de Intervalos
                                        return;//break;
                                    }

                                    //2.4 Validar que Primero sea anterior a Ultimo y visceversa
                                    if (Intorden != 0 && dato.orden != 0) {
                                        //Si intentas registrar primer intervalo
                                        if (Intorden != dato.orden && Intorden == 1 && dato.orden == 2) {
                                            //Si la hora de inicio del intervalo que se intenta añadir como primero es mayor a la hora fin del ultimo intervalo
                                            if (HIniDc >= Dato_FinDc && HFinDc >= Dato_FinDc) {
                                                Notify = 6;
                                                return;
                                            }
                                        }
                                        //Si intentas registrar último intervalo
                                        if (Intorden != dato.orden && Intorden == 2 && dato.orden == 1) {
                                            //Si la hora de fin del intervalo que se intenta añadir como ultimo es menor a la hora inicio del primer intervalo
                                            if (HFinDc <= Dato_IniDc && HIniDc <= Dato_IniDc) {
                                                Notify = 7;
                                                return;
                                            }
                                        }
                                    }

                                    //2.5 Validar Solo Intervalo Ordinario
                                    if (_TiEMPOiNTERV == _Ordinario) {
                                        if (Intorden == 0 && dato.orden == 1) {
                                            if (HIniDc <= Dato_IniDc && HFinDc <= Dato_IniDc) {
                                                Notify = 8;
                                                return;
                                            }
                                        }
                                        if (Intorden == 0 && dato.orden == 2) {
                                            if (HIniDc >= Dato_FinDc && HFinDc >= Dato_FinDc) {
                                                Notify = 9;
                                                return;
                                            }
                                        }
                                    }
                                });

                                if (Notify == 1) {
                                    messageResponseMix({ type: 'info', message: 'Cruce de Intervalos' }, titulo)
                                    return;
                                } else if (Notify == 2) {
                                    messageResponseMix({ type: 'info', message: 'Solo puede agregar una única Primera Jornada' }, titulo)
                                    return;
                                } else if (Notify == 3) {
                                    messageResponseMix({ type: 'info', message: 'Solo puede agregar una única Última Jornada' }, titulo)
                                    return;
                                } else if (Notify == 5) {
                                    messageResponseMix({ type: 'info', message: 'No se puede Repetir el Intervalo' }, titulo)
                                    return;
                                } else if (Notify == 6) {
                                    messageResponseMix({ type: 'info', message: 'El Primer Intervalo debe ser anterior al Último' }, titulo)
                                    return;
                                } else if (Notify == 7) {
                                    messageResponseMix({ type: 'info', message: 'El Último Intervalo debe ser posterior al Primero' }, titulo)
                                    return;
                                } else if (Notify == 8) {
                                    messageResponseMix({ type: 'info', message: 'El Intervalo Ordinario no puede ser Anterior al Primero' }, titulo)
                                    return;
                                } else if (Notify == 9) {
                                    messageResponseMix({ type: 'info', message: 'El Intervalo Ordinario no puede ser Posterior al Último' }, titulo)
                                    return;
                                } else if (Notify == 0 && Valdes == 2 || Notify == 0 && Valdes == 4 || Notify == 0 && Valdes == 0) {
                                    //Agregar Intervalo si pasa todas las validaciones
                                    detalleHoras.push(new Horas(HoraIni, MiniIni, HoraFin, MiniFin, n, Intorden, DSgtIni, DSgtFin)); //modificado 06.09.2021
                                    //detalleHoras.push(new Horas(HoraIni, MiniIni, HoraFin, MiniFin, n));
                                    //Agregandolo al Objeto de Intervalos Permanente
                                    detalleinterval.push(new Intervalos(interva, _TiEMPOiNTERV, NOMTIP_INT, _HoraIni, _HoraFin, _TipTutn, _Tiptoler, _Tipdur, _tiempo_cons_max, _consTrab, _bitDiaSiq, strorden, intnum, idTurno, DSgtIni, DSgtFin, n, intidTipoServ, strDeTipServ));//modificado 28.09.2021
                                }
                                //else if (Valdes > 4) {
                                //    messageResponseMix({ type: 'info', message: 'No se puede Repetir el Intervalo' }, titulo)
                                //    //var dea = (detalleHoras.length) - 1;//comentado 03.09.2021
                                //    //detalleHoras.splice(dea, 1);//comentado 03.09.2021
                                //    return;
                                //}
                            }
                            else {
                                //Agregar Intervalo si pasa todas las validaciones
                                detalleHoras.push(new Horas(HoraIni, MiniIni, HoraFin, MiniFin, n, Intorden, DSgtIni, DSgtFin)); //modificado 06.09.2021
                                //Agregandolo al Objeto de Intervalos Permanente
                                detalleinterval.push(new Intervalos(interva, _TiEMPOiNTERV, NOMTIP_INT, _HoraIni, _HoraFin, _TipTutn, _Tiptoler, _Tipdur, _tiempo_cons_max, _consTrab, _bitDiaSiq, strorden, intnum, idTurno, DSgtIni, DSgtFin, n, intidTipoServ, strDeTipServ));//modificado 28.09.2021
                            }



                            console.log("Prueba 06.09.2021");
                            console.log(detalleHoras);
                            console.log(detalleinterval);

                        }
                        var numeroArreglos = detalleinterval.length;

                        $('#CantArrInter').val(numeroArreglos);

                        if (strorden == 'Primero') {
                            $('#end').val(5);
                        }
                        if (strorden == 'Último') {
                            $('#end2').val(5);
                        }

                    });

                    if (typeof _varTablaIntervalo !== 'undefined') {
                        _varTablaIntervalo.destroy();
                    }

                    _varTablaIntervalo = $('#TablaIntervalso').DataTable({

                        data: detalleinterval,
                        columns: [
                            { data: 'interva' },
                            { data: 'NomTipoInter' },
                            { data: 'intTipoInterval' },
                            { data: 'timeDuracion' },
                            { data: 'bitDiaSig' },
                            { data: 'timeHoraIni' },
                            { data: 'timeTiempoMaximo' },
                            { data: 'timeTolerancia' },
                            { data: 'intTurno' },
                            { data: 'strorden' },
                            { data: 'intnum' },
                            { data: 'timeHoraFin' },
                            {
                                sortable: false,
                                "render": (data, type, item, meta) => {

                                    let clave = item.clave;
                                    return `<input type="button" class="btn btn-danger btn-xs btn-delete InterJor" dataid="${clave}" data="${item}" value="Quitar" />`;
                                }
                            },
                            { data: 'clave' },
                            { data: 'bitFlHT' },
                            //AÑADIDO-001 (para el campo tipo de servicio) en Formulario 
                            { data: 'intidTipoServ' },  //P16 AÑADIDO 
                            { data: 'strDeTipServ' },   //p17 AÑADIDO 
                        ],
                        order: [],
                        lengthMenu: [15],
                        sDom: '',
                        responsive: true,
                        language: {
                            lengthMenu: '',
                            info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
                            infoEmpty: 'No hay Items para mostrar',//***
                            search: '',
                            sSearchPlaceholder: '',
                            zeroRecords: '',
                            infoFiltered: '',
                            paginate: {
                                previous: 'Anterior',
                                next: 'Siguiente'
                            }
                        },
                        columnDefs: [//ocultar y definir columnas
                            {
                                targets: [2],
                                visible: false,
                            },
                            {
                                targets: [4],
                                visible: false,
                            },
                            {
                                targets: [5],
                                visible: false,
                            },
                            {
                                targets: [6],
                                visible: false,
                            },
                            {
                                targets: [10],
                                visible: false,
                            },
                            {
                                targets: [11],
                                visible: false,
                            },
                            {
                                targets: [13],
                                visible: false,
                            },
                            {
                                targets: [14],
                                visible: false,
                            },
                            {
                                targets: [15],
                                visible: false,
                            }
                        ],

                    });

                    $('.form-control input-sm').hide();
                    //$('#chck_pri').iCheck('uncheck'); //Check Comentado Primero y Ultimo 26.10.2021
                    //$('#chck_ult').iCheck('uncheck');
                    $('#consTrab').iCheck('uncheck');

                });

                //Quitar Intervalo x Intervalo
                //-------------------------------------------------------------------------------------------------------
                $('#TablaIntervalso  tbody').on('click', 'tr input.btn-delete', function () {
                    let clave1 = $(this).attr("dataid");

                    var LimiteBucle = (detalleinterval.length) - 1;

                    if (!isNaN(clave1)) {
                        for (var i = 0; i <= LimiteBucle; i++) {
                            if (detalleinterval[i].clave == clave1) {
                                u = detalleinterval[i].timeHoraIni;
                                detalleinterval.splice(i, 1);

                                if (detalleHoras[i].clave = clave1) {
                                    detalleHoras.splice(i, 1);
                                    console.log(detalleinterval + '---->2');
                                    console.log(detalleHoras + '---->2');
                                    //continue;
                                    break;
                                }
                            }
                        }

                        if (typeof _varTablaIntervalo !== 'undefined') {
                            _varTablaIntervalo.destroy();
                        }
                        _varTablaIntervalo = $('#TablaIntervalso').DataTable({

                            data: detalleinterval,
                            columns: [
                                { data: 'interva' },
                                { data: 'NomTipoInter' },
                                { data: 'intTipoInterval' },
                                { data: 'timeDuracion' },
                                { data: 'bitDiaSig' },
                                { data: 'timeHoraIni' },
                                { data: 'timeTiempoMaximo' },
                                { data: 'timeTolerancia' },
                                { data: 'intTurno' },
                                { data: 'strorden' },
                                { data: 'intnum' },
                                { data: 'timeHoraFin' },
                                {
                                    sortable: false,
                                    "render": (data, type, item, meta) => {

                                        let clave = item.clave;
                                        return `<input type="button" class="btn btn-danger btn-xs btn-delete" dataid="${clave}" data="${item}" value="Quitar" />`;
                                    }
                                },
                                { data: 'clave' },
                                { data: 'bitFlHT' },
                                //AÑADIDO-001 (para el campo tipo de servicio) en Formulario 
                                { data: 'intidTipoServ' },  //P16 AÑADIDO 
                                { data: 'strDeTipServ' },   //p17 AÑADIDO 

                            ],
                            order: [],
                            lengthMenu: [15],
                            sDom: '',
                            responsive: true,
                            language: {
                                lengthMenu: '',
                                info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
                                infoEmpty: 'No hay Items para mostrar',
                                search: '',
                                sSearchPlaceholder: '',
                                zeroRecords: '',
                                infoFiltered: '',
                                paginate: {
                                    previous: 'Anterior',
                                    next: 'Siguiente'
                                }
                            },
                            columnDefs: [//ocultar y definir columnas
                                {
                                    targets: [2],
                                    visible: false,
                                },
                                {
                                    targets: [4],
                                    visible: false,
                                },
                                {
                                    targets: [5],
                                    visible: false,
                                },
                                {
                                    targets: [6],
                                    visible: false,
                                },
                                {
                                    targets: [10],
                                    visible: false,
                                },
                                {
                                    targets: [11],
                                    visible: false,
                                },
                                {
                                    targets: [13],
                                    visible: false,
                                },
                                {
                                    targets: [14],
                                    visible: false,
                                },
                                {
                                    targets: [15],
                                    visible: false,
                                }
                            ],
                        });

                    }
                });

                //-------------------------------------------------------------------------------------------------------
                $('#btn-clear-Intrevalos').on('click', function () {

                    if (detalleinterval.length > 0) {

                        swal({
                            title: "Eliminar intervalos ",
                            text: "¿Está seguro de eliminar Todos los Intervalos'?",
                            type: "warning",
                            showCancelButton: true,
                            confirmButtonText: "Sí, eliminar",
                            cancelButtonText: "No, cancelar",
                        }).then(function (isConfirm) {
                            if (isConfirm) {

                                detalleinterval.length = 0;
                                detalleHoras.length = 0;

                                if (typeof _varTablaIntervalo !== 'undefined') {
                                    _varTablaIntervalo.destroy();
                                }

                                _varTablaIntervalo = $('#TablaIntervalso').DataTable({

                                    data: detalleinterval,
                                    columns: [
                                        { data: 'interva' },
                                        { data: 'NomTipoInter' },
                                        { data: 'intTipoInterval' },
                                        { data: 'timeDuracion' },
                                        { data: 'bitDiaSig' },
                                        { data: 'timeHoraIni' },
                                        { data: 'timeTiempoMaximo' },
                                        { data: 'timeTolerancia' },
                                        { data: 'intTurno' },
                                        { data: 'strorden' },
                                        { data: 'intnum' },
                                        { data: 'timeHoraFin' },
                                        {
                                            sortable: false,
                                            "render": (data, type, item, meta) => {

                                                let clave = item.clave;
                                                return `<input type="button" class="btn btn-danger btn-xs btn-delete" dataid="${clave}" data="${item}" value="Quitar" />`;
                                            }
                                        },
                                        { data: 'clave' },
                                        { data: 'bitFlHT' },
                                        //AÑADIDO-001 (para el campo tipo de servicio) en Formulario 
                                        { data: 'intidTipoServ' },  //P16 AÑADIDO 
                                        { data: 'strDeTipServ' },   //p17 AÑADIDO 
                                    ],
                                    order: [],
                                    lengthMenu: [15],
                                    sDom: '',
                                    responsive: true,
                                    language: {
                                        lengthMenu: '',
                                        info: 'Mostrar _START_ a _END_ de _TOTAL_ Items',
                                        //infoEmpty: 'No hay Items para mostrar',
                                        search: '',
                                        sSearchPlaceholder: '',
                                        zeroRecords: '',
                                        infoFiltered: '',
                                        paginate: {
                                            previous: 'Anterior',
                                            next: 'Siguiente'
                                        }
                                    },
                                    columnDefs: [//ocultar y definir columnas
                                        {
                                            targets: [2],
                                            visible: false,
                                        },
                                        {
                                            targets: [4],
                                            visible: false,
                                        },
                                        {
                                            targets: [5],
                                            visible: false,
                                        },
                                        {
                                            targets: [6],
                                            visible: false,
                                        },
                                        {
                                            targets: [10],
                                            visible: false,
                                        },
                                        {
                                            targets: [11],
                                            visible: false,
                                        },
                                        {
                                            targets: [13],
                                            visible: false,
                                        },
                                        {
                                            targets: [14],
                                            visible: false,
                                        },
                                        {
                                            targets: [15],
                                            visible: false,
                                        }
                                    ],

                                });

                                return;
                            } else {
                                //swal("Cancelado", "La Operación fue cancelada", "error");
                            }

                        });

                    }
                });

                //#endregion ONCHANGES

            }

            var CURRENT_URL = window.location.href.split('#')[0].split('?')[0],
                $BODY = $('body'),
                $MENU_TOGGLE = $('#menu_toggle'),
                $SIDEBAR_MENU = $('#sidebar-menu'),
                $SIDEBAR_FOOTER = $('.sidebar-footer'),
                $LEFT_COL = $('.left_col'),
                $RIGHT_COL = $('.right_col'),
                $NAV_MENU = $('.nav_menu'),
                $FOOTER = $('footer');

            $(document).ready(function () {
                $('.collapse-link').on('click', function () {
                    var $BOX_PANEL = $(this).closest('.x_panel'),
                        $ICON = $(this).find('i'),
                        $BOX_CONTENT = $BOX_PANEL.find('#oculto');
                    // fix for some div with hardcoded fix class
                    if ($BOX_PANEL.attr('style')) {
                        $BOX_CONTENT.slideToggle(200, function () {
                            $BOX_PANEL.removeAttr('style');
                        });
                    } else {
                        $BOX_CONTENT.slideToggle(200);
                        $BOX_PANEL.css('height', 'auto');
                    }
                    $ICON.toggleClass('fa-chevron-up fa-chevron-down');
                });
            });

        });

    $(".range_min_max").ionRangeSlider({
        type: "double",
        min: 0,
        max: +24,
        from: -24,
        step: 1,
        to: +24,
        max_interval: 48
    });

    function init_ColorPicker() {

        if (typeof ($.fn.colorpicker) === 'undefined') { return; }
        console.log('init_ColorPicker');
        $('.demo1').colorpicker();
        $('.demo2').colorpicker();

        $('#demo_forceformat').colorpicker({
            format: 'rgba',
            horizontal: true
        });

        $('#demo_forceformat3').colorpicker({
            format: 'rgba',
        });
        $('.demo-auto').colorpicker();
    };
});

function Grabar(titulo_, _idjor, intTipoOperacion) {
    var chckactivo = $('#chk-activo-JorDia').is(':checked');
    var _TipoJor = $('#TipoJor option:selected').val();
    var _Refriguerio = $('#cboRef option:selected').val();
    var _jerar = $('#cboJerar option:selected').val();
    var _uo = $('#cboUndOrg option:selected').val();
    var _codigo = $('#txt_cod_Jor').val();
    var _desc = $('#txt_desc_Jor').val();
    var _cambio48 = $('#chck_cambdia').is(':checked');
    var _pertejor = $('#chck_perteneceJor').is(':checked');
    var _color = $('#txtcolor').val();
    var _campo1 = $('#strJornadaCampo1').val();
    var _campo2 = $('#strJornadaCampo2').val();
    var _campo3 = $('#strJornadaCampo3').val();
    var _campo4 = $('#strJornadaCampo4').val();
    var _campo5 = $('#strJornadaCampo5').val();

    if (_codigo === '' || _desc === '' || _TipoJor === '' || _Refriguerio === ''
        || _jerar === '' || _uo === '') {
        messageResponseMix({ type: 'info', message: 'Complete los campos obligatorios' }, titulo_)//añadido 04/08/2021
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }

    if (!$('#txt_cod_Jor')[0].validity.valid) {
        messageResponseMix({ type: 'info', message: 'Ingrese solo números y letras sin espacios en blanco.' }, titulo_)//añadido 04/08/2021
        return;
    }

    var _TiEMPOiNTERV = $('#TipoInter option:selected').val();
    var _HoraIni = $('#tiempo_inic').val();
    var _HoraFin = $('#tiempo_fin').val();
    var _TipTutn = $('#TipoTurn option:selected').val();
    var _Tiptoler = $('#tiempo_tole').val();
    var _Tipdur = $('#tiempo_dura').val();
    var _chck_pri = $('#chck_pri').is(':checked');
    var _chck_ult = $('#chck_ult').is(':checked');
    var _consTrab = $('#consTrab').is(':checked');
    var _tiempo_cons_max = $('#tiempo_cons_max').val();
    var detallejornada = new Array();
    var OrdenPrimero = 0;
    var OrdenUltimo = 0;
    var ValiDSgt = 0;
    class Intervalo {
        constructor(intTipoInterval, timeHoraIni, timeHoraFin, intTurno, timeTolerancia, timeDuracion, timeTiempoMaximo, bitFlHT, bitDiaSig, bitDSgtIni, bitDSgtFin, intNuOrden, intidTipoServ, bitFlActivo) {
            this.intTipoInterval = intTipoInterval
            this.timeHoraIni = timeHoraIni
            this.timeHoraFin = timeHoraFin
            this.intTurno = intTurno
            this.timeTolerancia = timeTolerancia
            this.timeDuracion = timeDuracion
            this.timeTiempoMaximo = timeTiempoMaximo
            this.bitFlHT = bitFlHT
            this.bitDiaSig = bitDiaSig
            this.bitDSgtIni = bitDSgtIni //añadido 06.09.2021
            this.bitDSgtFin = bitDSgtFin //añadido 06.09.2021
            this.intNuOrden = intNuOrden
            this.intidTipoServ = intidTipoServ
            this.bitFlActivo = bitFlActivo
        }
    }


    ////if (detalleinterval[0].intTipoInterval == "40") { //Para el caso de "intervalo Extraordinario"" 
    //    if (detalleinterval.length == 0 || detalleinterval.length == 1) {
    //        messageResponseMix({ type: 'info', message: 'Debe contener al menos un Intervalo.' }, titulo_)//añadido 04/08/2021
    //        return;
    //    }
    ////}
    //else{
        //añadido 03.09.2021
        if (detalleinterval.length == 0 || detalleinterval.length == 1) {
            messageResponseMix({ type: 'info', message: 'Debe contener al menos dos Intervalos (primero y último).' }, titulo_)//añadido 04/08/2021
            return;
        }
    //}
    var ConRefrigerio = false;
    detalleinterval.forEach(e => {
        var intidTipoServ = e.intidTipoServ;//modificado comedor 28.09.2021
        var bitFlActivo = true;

        var intTipoInterval = e.intTipoInterval;
        var timeHoraIni = e.timeHoraIni;
        var timeHoraFin = e.timeHoraFin;
        var intTurno = e.idTurno;
        var timeTolerancia = e.timeTolerancia;
        var timeDuracion = e.timeDuracion;
        var timeTiempoMaximo = e.timeTiempoMaximo;
        var bitTrabajado = e.bitFlHT;
        var bitDiaSig = e.bitDiaSig;
        var bitDSgtIni = e.DSgtIni;//añadido 06.09.2021
        var bitDSgtFin = e.DSgtFin;//añadido 06.09.2021
        var intnum = e.intnum;//FALTA

        //añadido 03.09.2021
        if (intnum == 1) {
            OrdenPrimero = 1;
        }
        if (intnum == 999) {
            OrdenUltimo = 1;
        }
        if (intTipoInterval == _Refrigerio || intTipoInterval == _RefrigerioFlex) {
            ConRefrigerio = true;
        }
        if (bitDSgtIni == true || bitDSgtFin == true) {
            ValiDSgt = 1;
        }
        detallejornada.push(new Intervalo(intTipoInterval, timeHoraIni, timeHoraFin, intTurno, timeTolerancia, timeDuracion, timeTiempoMaximo, bitTrabajado, bitDiaSig, bitDSgtIni, bitDSgtFin, intnum, intidTipoServ, bitFlActivo));
    });





    //if (detalleinterval[0].intTipoInterval != "40") { //Para el caso de "intervalo Extraordinario"" 
        //añadido 03.09.2021

        if (OrdenPrimero == 0 && OrdenUltimo == 0) {
            messageResponseMix({ type: 'info', message: 'Ingrese la Primera y Última Jornada.' }, titulo_)//añadido 04/08/2021
            return;
        }
    //}




    if (OrdenPrimero == 0) {
        messageResponseMix({ type: 'info', message: 'Ingrese la Primera Jornada.' }, titulo_)//añadido 04/08/2021
        return;
    }
    if (OrdenUltimo == 0) {
        messageResponseMix({ type: 'info', message: 'Ingrese la Última Jornada.' }, titulo_)//añadido 04/08/2021
        return;
    }
    if (_IdSinRefri != _Refriguerio && ConRefrigerio == false) {
        messageResponseMix({ type: 'info', message: 'Agregue el Intervalo de Refrigerio a la Jornada con Refrigerio' }, titulo_)//añadido 04/08/2021
        return;
    }
    if (_IdSinRefri == _Refriguerio && ConRefrigerio == true) {
        messageResponseMix({ type: 'info', message: 'Quite el Intervalo de Refrigerio a la Jornada sin Refrigerio' }, titulo_)//añadido 04/08/2021
        return;
    }
    //Falta Validar que si la Jornada no es con Cambio de Día, entonces no permita intervalos con cambio de dia...06.09.2021
    if (_cambio48 == false && ValiDSgt == true) {
        messageResponseMix({ type: 'info', message: 'Seleccione Cambio de Día' }, titulo_)//añadido 04/08/2021
        return;
    }
    if (_cambio48 == true && ValiDSgt == false) {
        messageResponseMix({ type: 'info', message: 'Jornada Sin Cambio de Día, quite los intervalos con + ' }, titulo_)//añadido 04/08/2021
        return;
    }

    console.log('NUEVA');//para probar
    console.log(detallejornada);//para probar

    var Jornada = {
        strCodJornada: _codigo,
        strDscJornada: _desc,
        intTipoDia: _TipoJor,
        intControlRefri: _Refriguerio,
        strColor: _color,
        IntIdUniOrg: _uo,
        bitDiaSig: _cambio48,
        bitPertenecDiaSig: _pertejor,
        bitPertenecDiaSig: _pertejor,
        strJornadaCampo1: _campo1,
        strJornadaCampo2: _campo2,
        strJornadaCampo3: _campo3,
        strJornadaCampo4: _campo4,
        strJornadaCampo5: _campo5,
        strJornadaCampo5: _campo5,
        bitFlActivo: chckactivo,
        intIdJornada: _idjor,
    }
    console.log(detallejornada);

    if (detallejornada.length == 0 || detallejornada.length == 1) {
        ////messageResponseMix({ type: 'info', message: 'Debe contener al menos un  Intervalo ' }, titulo_)//añadido 04/08/2021
        messageResponseMix({ type: 'info', message: 'Debe contener al menos dos Intervalos (primero y último).' }, titulo_)//añadido 04/08/2021
        return;
    }

    $.post(
        '/Asistencia/IUJornada',
        { ObjJornada: Jornada, listaIntervalos: detallejornada, intTipoOperacion: intTipoOperacion },
        (response) => {
            console.log(response);
            if (response.type !== '') {

                if (response.type === 'success') {
                    messageResponseMix({ type: response.type, message: response.message }, titulo_)//añadido 04/08/2021
                    detalleHoras.length = 0;
                    detalleinterval.length = 0;
                    detallejornada.length = 0;
                    TablaJornada();
                    $('.form-hide-JornadaDiaria').hide();
                } else {
                    if (response.message.indexOf("|") != -1) {
                        var list = response.message.split("|")
                        if (list.length == 2) {
                            var nomMantemiento = 'Jornada';
                            var campo = list[1];
                            var msj = list[0];
                            var response = 'info';
                            var deta = 'notifry_error';
                            INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                        } else {
                            messageResponseMix({ type: response.type, message: response.message }, titulo_)//añadido 04/08/2021
                        }
                        return;
                    } else {
                        messageResponseMix({ type: response.type, message: response.message }, titulo_)//añadido 04/08/2021
                    }

                }
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

}

$('#btn-save-change-JornadaDiaria').on('click', function () {
    validarSession()
    var titulo_ = 'Nueva Jornada Diaria'
    Grabar(titulo_, 0, 1);

});
$('#btn-update-JornadaDiaria').on('click', function () {
    validarSession()
    var titulo_ = 'Actualización de Jornada'
    var _idjor = $('#idjorn').val();
    Grabar(titulo_, _idjor, 2);
});
$('#btn-cancel-JornadaDiaria').on('click', function () {
    validarSession()
    detalleHoras.length = 0;
    detalleinterval.length = 0;
    $('.form-hide-JornadaDiaria').hide();
});

$('#filActi1').on('change', function () {
    validarSession()
    TablaJornada();
});
$('#filtojer1').on('change', function () {
    validarSession()
    TablaJornada();
});
$('#filtro1').on('change', function () {
    validarSession()
    TablaJornada();
})


//#endregion MANT. JORNADA DIARIA










/*---------------------------------------------- */
/**13. Horario */
/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
//#region MANT. HORARIO
var _varTablaHorario;
var _varTablaJornadasXHorario;
var _vartablaDia;
var habilitador = 0;
var ConDetalle = 0;
var detJornadasHorario_ = []

function TablaHorario() {
    var filtroActivo = $('#filActivo').val();
    var strfiltro = $('#filtroHor').val();
    var filtrojer = $('#cboJerarquica_h').val();

    $.ajax({
        url: '/Asistencia/GetTablaFiltradaHorario',
        type: 'POST',
        data: {
            IntActivoFilter: filtroActivo, strfilter: strfiltro, intfiltrojer: filtrojer
        },
        beforeSend: function () {
            $.blockUI({
                css: {
                    border: 'none',
                    padding: '15px',
                    backgroundColor: '#000',
                    '-webkit-border-radius': '10px',
                    '-moz-border-radius': '10px',
                    opacity: .5,
                    color: '#fff'
                },
                message: 'Procesando...'
            });
        },
        success: function (response) {
            console.log(response);

            if (typeof _varTablaHorario !== 'undefined') {
                _varTablaHorario.destroy();
            }
            _varTablaHorario = $('#datatable-horario').DataTable({
                data: response,
                columns: [
                    { data: 'strCoHorario' },
                    { data: 'strDeHorario' },
                    { data: 'strExtra1' },
                    { data: 'strExtra2' },
                    { data: 'strExtra3' },
                    { data: 'strExtra4' },
                    { data: null },
                    { data: 'intIdHorario' },
                ],
                lengthMenu: [10, 25, 50],
                order: [],
                responsive: true,
                language: _datatableLanguaje,
                columnDefs: [//ocultar y definir columnas
                    {
                        targets: [6],
                        data: null,
                        defaultContent: '<button class="btn btn-success btn-xs btn-edit" ><i class="fa fa-pencil"></i> Editar </button>' +
                            '<button class="btn btn-primary btn-xs btn-delete"><i class="fa fa-trash-o"></i> Eliminar </button>'
                    }, {
                        targets: [7],//intIdTipFisc
                        visible: false,
                        searchable: false
                    },
                ],
                dom: 'lBfrtip',
            });
        },
        complete: function () {
            $.unblockUI();
        }
    });
}
function ConDet(idJor__, NroDiaHorario__) {
    NroDiaHorario__ = NroDiaHorario__.replace("td", "");
    for (var i = 0; i < detJornadasHorario_.length; i++) {
        if (detJornadasHorario_[i].intNumDiaIni == NroDiaHorario__) {
            detJornadasHorario_.splice(i, 1);
            break;
        }
    }

    detJornadasHorario_.push({ intIdJornada: idJor__, intNumDiaIni: NroDiaHorario__ })
    ConDetalle = 1;
}
function cargarDaterangePicker() {
    $('#date_desde').daterangepicker({
        singleDatePicker: true,
        singleClasses: "picker_1"
    }, function (start, end, label) {
        console.log(start.toISOString(), end.toISOString(), label);
    });

    $('#date_hasta').daterangepicker({
        singleDatePicker: true,
        singleClasses: "picker_1"
    }, function (start, end, label) {
        console.log(start.toISOString(), end.toISOString(), label);
    });

    $('#date_extra1').daterangepicker({
        singleDatePicker: true,
        singleClasses: "picker_1"
    }, function (start, end, label) {
        console.log(start.toISOString(), end.toISOString(), label);
    });
}
function ListarJerarquia() {
    $.post(
        '/Organizacion/ComboDependenciaFiltro',
        {},
        (response) => {
            $('#cboJerarquica_h').empty();
            if (response.length > 1) {
                $('#cboJerarquica_h').append('<option value="0">Todos</option>');
            }
            response.forEach(element => {
                $('#cboJerarquica_h').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
            });
            $("#cboJerarquica_h").val(0);
        });
}
function CombosHorario() {
    //Combo Tipo de Dia
    $.post(
        '/Asistencia/LlenarTipoUM',
        { strEntidad: 'TGHORARIO', intIdFiltroGrupo: 0, strGrupo: 'CAL', strSubGrupo: 'DIA' },
        (response) => {
            $('#TipoDia').empty();
            response.forEach(element => {
                $('#TipoDia').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
            });
        });

    //ComboJerarquia-modificado 23.08.2021
    $.post(
        '/Personal/ListarCombos',
        {
            intIdMenu: 1,
            strEntidad: 'TGJERARQORG',
            intIdFiltroGrupo: 0,
            strGrupo: 'DEPEN_MAESTROS',
            strSubGrupo: '',
        },
        (response) => {
            $('#cboJerar_h').empty();
            if (response.length > 1) {
                $('#cboJerar_h').append('<option value="0">Seleccione</option>');
            }
            response.forEach(element => {
                $('#cboJerar_h').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
            });
            $("#cboUndOrg_h").val(0);
        });

    //Combo UnidadOrganizacional
    $('#cboJerar_h').on('change', function () {

        var IntidJerar = $('#cboJerar_h option:selected').val();

        $.post(
            '/Asistencia/LlenarTipoUM',
            { strEntidad: 'TGUNIDORG', intIdFiltroGrupo: IntidJerar, strGrupo: 'JERAR', strSubGrupo: 'HORARIO' },
            (response) => {
                $('#cboUndOrg_h').empty();
                $('#cboUndOrg_h').attr('disabled', false);

                response.forEach(element => {
                    $('#cboUndOrg_h').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

                });
            });
    });

}
function CambiosNumdIA() {

    $('#btn-edita-dias').on('click', function () {

        var IntLength = $('#1').html();

        if (IntLength !== undefined) {


            swal({
                title: "Generar Horario",
                text: "Al cambiar el inicio o la duración, el horario perderá las jornadas asignadas",
                type: "info",
                showCancelButton: true,
                confirmButtonText: "Sí, continuar",
                cancelButtonText: "No, cancelar",
            }).then(function (isConfirm) {
                $('#txt_Num_Dias').attr('disabled', false);
                $('#TipoDia').attr('disabled', false);
                $('#btn-genra-horario').show();
                $('#btn-edita-dias').hide();
                $('#cuerpo').empty();
                $('#external-events-listing').empty();
            }, function (dismiss) {
                if (dismiss == 'cancel') {
                    //swal("Cancelado", "La Operación fue cancelada", "error");
                }
            });
        } else if (IntLength == undefined) {

            $('#txt_Num_Dias').attr('disabled', false);
            $('#TipoDia').attr('disabled', false);
            $('#btn-genra-horario').show();
            $('#btn-edita-dias').hide();
        }
    });
}
function intentEliminarHorario(idHora, strNomHora) {
    swal({
        title: "Eliminar Horario",
        text: "¿Está seguro de eliminar el Horario   ''<strong>" + strNomHora + "</strong>''   ?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí, eliminar",
        cancelButtonText: "No, cancelar",
    }).then(function (isConfirm) {
        validarSession()
        yesEliminaHorario(idHora);
    }, function (dismiss) {
        if (dismiss == 'cancel') {
            //swal("Cancelado", "La Operación fue cancelada", "error");
        }
    });
}
function yesEliminaHorario(idHora) {

    $.post(
        '/Asistencia/EliminarHorario',
        { intIdHorario: idHora },
        (response) => {
            console.log(response);
            if (response.type !== '') {
                var tipo = 'Eliminado!';
                if (response.type === 'error')
                    tipo = 'NO SE PUEDE ELIMINAR EL REGISTRO';
                swal(tipo, response.message, response.type);

                if (response.type === 'success')
                    $('.form-hide-horario').hide();
                TablaHorario();
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}
function CreaTabla(intIdHorario = null, limpia) {
    var CargarJornadas_ = 1;

    var NumDiaas = $('#txt_Num_Dias').val();//comnentado 30.07
    if (limpia == 1) {
        NumDiaas = parseInt(NumDiaas, 10) + 1;
        CargarJornadas_ = 0;
    }
    var cboInicia = $('#TipoDia').val();
    var DiaSemana = $('#TipoDia option:selected').html();


    if (NumDiaas !== 0 && NumDiaas !== "" && cboInicia !== "" && cboInicia !== null) {
        //Probando 1848-30.07.2021
        detJornadasHorario_ = []
        if (typeof _vartablaDias !== 'undefined') {
            _vartablaDias.destroy();
        }

        $('#Header').empty();
        $('#cuerpo').empty();
        var fecha = moment()

        while (DiaSemana.toLowerCase() != fecha.locale('es').format('dddd').toLowerCase()) {
            var salida = fecha.add(1, 'd')
        }

        var header = '<tr>'
        for (var i = 0; i < 7; i++) {
            header += `<th>${capitalize(fecha.locale('es').format('dddd'))}</th>`
            fecha.add(1, 'd')
        }
        header += '</tr>'

        $('#Header').append(header)

        for (var i = 1; i <= NumDiaas; i += 7) {

            $('#cuerpo').append(`
                                <tr>
                                    <td style="height: 30px;" ondrop="drop(event)" ondragover="allowDrop(event)"  id="td${i}">
                                    <td ondrop="drop(event)" ondragover="allowDrop(event)"  id="td${i + 1}">
                                    <td ondrop="drop(event)" ondragover="allowDrop(event)"  id="td${i + 2}">
                                    <td ondrop="drop(event)" ondragover="allowDrop(event)"  id="td${i + 3}">
                                    <td ondrop="drop(event)" ondragover="allowDrop(event)"  id="td${i + 4}">
                                    <td ondrop="drop(event)" ondragover="allowDrop(event)"  id="td${i + 5}">
                                    <td ondrop="drop(event)" ondragover="allowDrop(event)"  id="td${i + 6}">
                                </tr>`);

            if (i > NumDiaas) {
                $('#td' + i).html('<h1 style="color:red;width:100%; height:100%;"><center><strong>X</strong></center></h1>');
                $('#td' + i).attr('disabbled', true);
                $('#td' + i).addClass("notDrop")
            }
            if ((i + 1) > NumDiaas) {
                $('#td' + (i + 1)).html('<h1 style="color:red;width:100%; height:100%;"><center><strong>X</strong></center></h1>');
                $('#td' + (i + 1)).attr('disabled', true);
                $('#td' + (i + 1)).addClass("notDrop")
            }
            if ((i + 2) > NumDiaas) {
                $('#td' + (i + 2)).html('<h1 style="color:red;width:100%; height:100%;"><center><strong>X</strong></center></h1>');
                $('#td' + (i + 2)).attr('disabled', true);
                $('#td' + (i + 2)).addClass("notDrop")
            }
            if ((i + 3) > NumDiaas) {
                $('#td' + (i + 3)).html('<h1 style="color:red;width:100%; height:100%;"><center><strong>X</strong></center></h1>');
                $('#td' + (i + 3)).attr('disabled', true);
                $('#td' + (i + 3)).addClass("notDrop")
            }
            if ((i + 4) > NumDiaas) {
                $('#td' + (i + 4)).html('<h1 style="color:red;width:100%; height:100%;"><center><strong>X</strong></center></h1>');
                $('#td' + (i + 4)).attr('disabled', true);
                $('#td' + (i + 4)).addClass("notDrop")
            }
            if ((i + 5) > NumDiaas) {
                $('#td' + (i + 5)).html('<h1 style="color:red;width:100%; height:100%;"><center><strong>X</strong></center></h1>');
                $('#td' + (i + 5)).attr('disabled', true);
                $('#td' + (i + 5)).addClass("notDrop")
            }
            if ((i + 6) > NumDiaas) {
                $('#td' + (i + 6)).html('<h1 style="color:red;width:100%; height:100%;"><center><strong>X</strong></center></h1>');
                $('#td' + (i + 6)).attr('disabled', true);
                $('#td' + (i + 6)).addClass("notDrop")
            }
            if ((i + 7) > NumDiaas) {
                $('#td' + (i + 7)).html('<h1 style="color:red;width:100%; height:100%;"><center><strong>X</strong></center></h1>');
                $('#td' + (i + 7)).attr('disabled', true);
                $('#td' + (i + 7)).addClass("notDrop")
            }

        }

        if (intIdHorario != null) {
            $.post(
                '/Asistencia/ListarHorJor',
                { intfiltrojer: intIdHorario },
                (response) => {
                    response.forEach(element => {

                        if (element.intIdJornada != 0) {
                            var html = `<div id="${element.intIdJornada}" class="label label-default p-2 col-md-12 col-sm-12 col-xs-12 dragJornada" style="font-size: small;color:white;background-color:${element.strColor}">${element.strCodJornada}</div>`
                            $("#td" + element.intNumDiaIni).html(html);

                            detJornadasHorario_.push({ intIdJornada: element.intIdJornada, intNumDiaIni: element.intNumDiaIni })//añadido 02.08.2021
                        }
                    });
                    //***************************************************************************************************************
                    _vartablaDias = $('#Dias').DataTable({
                        ordering: false,
                        language: {
                            lengthMenu: 'Mostrar _MENU_ Filas',
                            info: '(*) Los días con un aspa (X) no se grabarán',
                            infoEmpty: 'No hay Items para mostrar',
                            search: '',
                            sSearchPlaceholder: '',
                            zeroRecords: '',
                            infoFiltered: '',
                            paginate: {
                                previous: 'Anterior',
                                next: 'Siguiente'
                            }
                        },
                    });
                    $('#Dias_filter').html('<div class="input-group-btn" id="btn_trash"><label class="btn btn-danger" id="btn-clear-Jornadas" title="Borrar Jornadas por Pág"><i class="fa fa-trash-o fa-2x"></i></label></div>');
                    $('#Dias_filter').parent().removeClass()
                    $('#Dias_filter').parent().addClass('col-lg-6 col-md-6 col-sm-6 col-xs-6')
                    $('#Dias_length').parent().removeClass()
                    $('#Dias_length').parent().addClass('col-lg-6 col-md-6 col-sm-6 col-xs-6')
                    $('#Dias_info').parent().removeClass()
                    $('#Dias_info').parent().addClass('col-lg-6 col-md-6 col-sm-6 col-xs-6')
                    $('#Dias_paginate').parent().removeClass()
                    $('#Dias_paginate').parent().addClass('col-lg-6 col-md-6 col-sm-6 col-xs-6')
                    $('#Dias').parent().removeClass()

                    $('#Dias').parent().addClass('col-lg-12 col-md-12 col-sm-12 col-xs-12')
                    $('#btn-clear-Jornadas').on('click', function () {
                        console.log("prueba");

                        var l = $("table.table-striped.table-bordered.table-responsive.nowrap.dataTable.no-footer div[class='label label-default p-2 col-md-12 col-sm-12 col-xs-12 dragJornada']").length;
                        while (l > 0) {
                            var x = $("table.table-striped.table-bordered.table-responsive.nowrap.dataTable.no-footer div[class='label label-default p-2 col-md-12 col-sm-12 col-xs-12 dragJornada']:first");
                            var NroDiaHorario__ = $("table.table-striped.table-bordered.table-responsive.nowrap.dataTable.no-footer div[class='label label-default p-2 col-md-12 col-sm-12 col-xs-12 dragJornada']:first").parents("td").attr("id");
                            NroDiaHorario__ = NroDiaHorario__.replace("td", "");
                            for (var i = 0; i < detJornadasHorario_.length; i++) {
                                if (detJornadasHorario_[i].intNumDiaIni == NroDiaHorario__) {
                                    detJornadasHorario_.splice(i, 1);
                                    break;
                                }
                            }
                            x.remove();
                            l--;
                        }


                    });
                    //****************************************************************************************************************
                })
        } else {
            //***************************************************************************************************************
            _vartablaDias = $('#Dias').DataTable({
                ordering: false,
                language: {
                    lengthMenu: 'Mostrar _MENU_ Filas',
                    info: '(*) Los días con un aspa (X) no se grabarán',
                    infoEmpty: 'No hay Items para mostrar',
                    search: '',
                    sSearchPlaceholder: '',
                    zeroRecords: '',
                    infoFiltered: '',
                    paginate: {
                        previous: 'Anterior',
                        next: 'Siguiente'
                    }
                },
            });
            $('#Dias_filter').html('<div class="input-group-btn" id="btn_trash"><label class="btn btn-danger" id="btn-clear-Jornadas" title="Borrar Jornadas por Pág"><i class="fa fa-trash-o fa-2x"></i></label></div>');
            $('#Dias_filter').parent().removeClass()
            $('#Dias_filter').parent().addClass('col-lg-6 col-md-6 col-sm-6 col-xs-6')
            $('#Dias_length').parent().removeClass()
            $('#Dias_length').parent().addClass('col-lg-6 col-md-6 col-sm-6 col-xs-6')
            $('#Dias_info').parent().removeClass()
            $('#Dias_info').parent().addClass('col-lg-6 col-md-6 col-sm-6 col-xs-6')
            $('#Dias_paginate').parent().removeClass()
            $('#Dias_paginate').parent().addClass('col-lg-6 col-md-6 col-sm-6 col-xs-6')
            $('#Dias').parent().removeClass()

            $('#Dias').parent().addClass('col-lg-12 col-md-12 col-sm-12 col-xs-12')
            $('#btn-clear-Jornadas').on('click', function () {
                console.log("prueba");

                var l = $("table.table-striped.table-bordered.table-responsive.nowrap.dataTable.no-footer div[class='label label-default p-2 col-md-12 col-sm-12 col-xs-12 dragJornada']").length;
                while (l > 0) {
                    var x = $("table.table-striped.table-bordered.table-responsive.nowrap.dataTable.no-footer div[class='label label-default p-2 col-md-12 col-sm-12 col-xs-12 dragJornada']:first");
                    var NroDiaHorario__ = $("table.table-striped.table-bordered.table-responsive.nowrap.dataTable.no-footer div[class='label label-default p-2 col-md-12 col-sm-12 col-xs-12 dragJornada']:first").parents("td").attr("id");
                    NroDiaHorario__ = NroDiaHorario__.replace("td", "");
                    for (var i = 0; i < detJornadasHorario_.length; i++) {
                        if (detJornadasHorario_[i].intNumDiaIni == NroDiaHorario__) {
                            detJornadasHorario_.splice(i, 1);
                            break;
                        }
                    }
                    x.remove();
                    l--;
                }


            });
            //****************************************************************************************************************
        }

        if (CargarJornadas_ == 1) {
            TablaHorarioXJor();//Cargarlo solo al Crear
        }
    }
    else {
        $('#txt_Num_Dias').attr('disabled', false);
        $('#txt_Num_Dias').val('');
        $('#TipoDia').attr('disabled', false);
        $('#btn-genra-horario').show();
        $('#btn-edita-dias').hide();

        messageResponseMix({ type: 'info', message: 'Ingrese el Número de Días de duración del Horario' }, 'Días')//05.08.2021
        return;
    }

}
function CargarDatosHorario(data) {
    ConDetalle = 1;
    $('.form-hide-horario').show();
    $('#txt_Num_Dias').attr('disabled', true);
    $('#TipoDia').attr('disabled', true);

    $('#btn-genra-horario').hide();
    $('#btn-edita-dias').show();

    $('#btn-update-horario').show();
    $('#btn-save-change-horario').hide();
    $('#11').empty();//añadido 30.07.2021
    $.post(
        '/Asistencia/ObtenerHorarioPorsuPK',
        { intIdHorario: data.intIdHorario },
        (response) => {
            var element = response[0];
            if (element.bitFlActivo == false) {
                $('#11').html('<label id="_lbl_">Inactivo</label> <input type="checkbox" id="chk-activo-Hor" class=" js-switch"  /><script>switcheryLoad();</script >');
            } else if (element.bitFlActivo == true) {
                $('#11').html('<label id="_lbl_">Activo</label> <input type="checkbox" id="chk-activo-Hor" class=" js-switch" checked /><script>switcheryLoad();</script >');
            }


            if (element.bitFlPrincipal === true) {
                $('#checkPrincipal').iCheck('check')
            }

            $.post(
                '/Organizacion/CamposAdicionales',
                { strEntidad: 'TGHORARIO' },
                (response) => {
                    console.log(response);
                    $('#containerCampose').empty();
                    response.forEach(element => {
                        $('#containerCampose').append(
                            ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                            + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="' + element.strTitulo.replace("(*)", "") + '" maxlength="255"/>' + '</div></div>');
                    });
                    $('#strHorarioCampo1').val(element.strHorarioCampo1);
                    $('#strHorarioCampo2').val(element.strHorarioCampo2);
                    $('#strHorarioCampo3').val(element.strHorarioCampo3);
                    $('#strHorarioCampo4').val(element.strHorarioCampo4);
                    $('#strHorarioCampo5').val(element.strHorarioCampo5);
                });

            $('#txt_Cod_Hor').val(element.strCoHorario);
            $('#txt_Desc_Hor').val(element.strDeHorario);
            $('#txt_Num_Dias').val(element.intTotalDias);
            $('#IdHor').val(data.intIdHorario);
            //ComboJerarquia - modificado 23.08.2021
            $.post(
                //'/Asistencia/LlenarTipoUM',
                //{ strEntidad: 'TGJERARQORG', intIdFiltroGrupo: 0, strGrupo: 'DEPEN', strSubGrupo: '' },
                '/Personal/ListarCombos',
                {
                    intIdMenu: 1,
                    strEntidad: 'TGJERARQORG',
                    intIdFiltroGrupo: 0,
                    strGrupo: 'DEPEN_MAESTROS',
                    strSubGrupo: '',
                },
                (response) => {
                    $('#cboJerar_h').empty();
                    if (response.length > 1) {
                        $('#cboJerar_h').append('<option value="0">Seleccione</option>');
                    }
                    response.forEach(element => {
                        $('#cboJerar_h').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
                    });
                    $("#cboJerar_h").val(element.intExtra1);
                });

            $.post(
                '/Asistencia/LlenarTipoUM',
                { strEntidad: 'TGUNIDORG', intIdFiltroGrupo: element.intExtra1, strGrupo: 'JERAR', strSubGrupo: '' },
                (response) => {
                    $('#cboUndOrg_h').empty();
                    $('#cboUndOrg_h').attr('disabled', false);

                    response.forEach(element => {
                        $('#cboUndOrg_h').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
                    });
                    $("#cboUndOrg_h").val(element.intIdUniOrg);

                    $.post(
                        '/Asistencia/LlenarTipoUM',
                        { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'CAL', strSubGrupo: 'DIA' },
                        (response) => {
                            response.forEach(element => {
                                $('#TipoDia').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
                            });
                            $('#TipoDia').val(element.intNumDiaIni);
                            $('#Dias_wrapper').show();//añadido 02/08/2021
                            CreaTabla(data.intIdHorario, 0);
                        });
                });
        });
    init_checkBox_styles()
}
function init_calendar() {

    if (typeof ($.fn.fullCalendar) === 'undefined') { return; }
    console.log('init_calendar');

    var date = new Date(),
        d = date.getDate(),
        m = date.getMonth(),
        y = date.getFullYear(),
        started,
        categoryClass;

    var calendar = $('#calendar').fullCalendar({
        header: {
            left: 'prev,next today',
            center: 'title',
            right: 'month,agendaWeek,agendaDay,listMonth'
        },
        selectable: true,
        selectHelper: true,
        select: function (start, end, allDay) {
            $('#fc_create').click();

            started = start;
            ended = end;

            $(".antosubmit").on("click", function () {
                var title = $("#title").val();
                if (end) {
                    ended = end;
                }

                categoryClass = $("#event_type").val();

                if (title) {
                    calendar.fullCalendar('renderEvent', {
                        title: title,
                        start: started,
                        end: end,
                        allDay: allDay
                    },
                        true // make the event "stick"
                    );
                }

                $('#title').val('');

                calendar.fullCalendar('unselect');

                $('.antoclose').click();

                return false;
            });
        },
        eventClick: function (calEvent, jsEvent, view) {
            $('#fc_edit').click();
            $('#title2').val(calEvent.title);

            categoryClass = $("#event_type").val();

            $(".antosubmit2").on("click", function () {
                calEvent.title = $("#title2").val();

                calendar.fullCalendar('updateEvent', calEvent);
                $('.antoclose2').click();
            });

            calendar.fullCalendar('unselect');
        },
        editable: true,

    });

};
function editarHorario() {
    $('.form-hide-horario').show();
    $.post(
        '/Asistencia/EditarHorario',
        {},
        (response) => {
            if (response !== '') {
                $('.form-hide-horario .x_content').empty();
                $('.form-hide-horario .x_content').html(response);
                $('.form-hide-horario').show();
                switcheryLoad();
                init_checkBox_styles();
            }
        });
}
function TablaHorarioXJor() {
    $.post(
        '/Asistencia/GetTablaFiltradaJornadaDiariaHoraria',
        { IntActivoFilter: 2, strfilter: '', intfiltrojer: 2 },
        (response) => {
            console.log(response);
            $('#external-events-listing').empty();
            $('#external-events-listing').append('<center><h2>Jornadas Diarias Disponibles</h2></center><h4> Arrastre cada Jornada a un día de la semana del Horario (Cuadro Superior) </h4>');

            response.forEach(element => {
                //añadido 25.02.2021 es
                var L1 = element.strLinea1;
                var L2 = element.strLinea2;
                var L3 = element.strLinea3;//Color
                var L4 = element.strLinea4;
                var L5 = element.strLinea5;
                var L6 = element.strLinea6;
                var L7 = element.strLinea7;
                var L8 = element.strTipoServicio;//añadido 25.02.2021
                var L0 = "-------------------------------";

                if (L8 == "") {
                    if (L7 == "") { //Sin Cambio de día
                        $('#external-events-listing').append(`
                        <div data-placement="auto" class="p-1 col-md-2 col-sm-2 col-xs-2 drags" draggable="true" title="${L2} \n ${L0} \n ${L1} \n ${L4} \n ${L6} \n ${L5}">
                            <div id="${element.intIdJornada}" class="label label-default p-2 col-md-12 col-sm-12 col-xs-12 dragJornada" style="font-size: small;color:white;background-color:${element.strColor}">${L3}</div>
                        </div>
                        `)
                    } else {
                        $('#external-events-listing').append(`
                        <div data-placement="auto" class="p-1 col-md-2 col-sm-2 col-xs-2 drags" draggable="true" title="${L2} \n ${L0} \n ${L1} \n ${L4} \n ${L6} \n ${L5} \n ${L7}">
                            <div id="${element.intIdJornada}" class="label label-default p-2 col-md-12 col-sm-12 col-xs-12 dragJornada" style="font-size: small;color:white;background-color:${element.strColor}">${L3}</div>
                        </div>
                        `)
                    }

                } else {
                    if (L7 == "") { //Sin Cambio de día
                        $('#external-events-listing').append(`
                        <div data-placement="auto" class="p-1 col-md-2 col-sm-2 col-xs-2 drags" draggable="true" title="${L2} \n ${L0} \n ${L1} \n ${L4} \n ${L8} \n ${L6} \n ${L5}">
                            <div id="${element.intIdJornada}" class="label label-default p-2 col-md-12 col-sm-12 col-xs-12 dragJornada" style="font-size: small;color:white;background-color:${element.strColor}">${L3}</div>
                        </div>
                        `)
                    } else {
                        $('#external-events-listing').append(`
                        <div data-placement="auto" class="p-1 col-md-2 col-sm-2 col-xs-2 drags" draggable="true" title="${L2} \n ${L0} \n ${L1} \n ${L4} \n ${L8} \n ${L6} \n ${L5} \n ${L7}">
                            <div id="${element.intIdJornada}" class="label label-default p-2 col-md-12 col-sm-12 col-xs-12 dragJornada" style="font-size: small;color:white;background-color:${element.strColor}">${L3}</div>
                        </div>
                        `)
                    }

                }
                //fin
            });
            $(".drags").tooltip()

        });


}
function CamposAdicionalesHorarios() {
    $.post(
        '/Organizacion/CamposAdicionales',
        { strEntidad: 'TGHORARIO' },
        (response) => {
            console.log(response);
            $('#containerCampose').empty();
            response.forEach(element => {

                $('#containerCampose').append(
                    ' <div class="col-md-6 col-sm-6 col-xs-6"><div class="form-group"><label> ' + element.strTitulo
                    + '</label><input id="' + element.strNomCampo + '" type="text" class="form-control " placeholder="' + element.strTitulo.replace("(*)", "") + '" maxlength="255"/>' + '</div></div>');
            });
        });
}

$('#datatable-horario  tbody').on('click', 'tr button.btn-edit', function () {
    validarSession()
    var data = _varTablaHorario.row($(this).parents('tr')).data();
    if (data == null) {
        var data = _varTablaHorario.row($(this).parents('li')).data();
        CargarDatosHorario(data);
    } else {
        CargarDatosHorario(data);
    }

});
$('#datatable-horario  tbody').on('click', 'tr button.btn-delete', function () {
    validarSession()
    var data = _varTablaHorario.row($(this).parents('tr')).data();

    if (data == null) {
        data = null;

        var data = _varTablaHorario.row($(this).parents('li')).data();
        intentEliminarHorario(data['intIdHorario'], data['strDeHorario']);
    } else {
        var data = _varTablaHorario.row($(this).parents('tr')).data();
        intentEliminarHorario(data['intIdHorario'], data['strDeHorario']);
    }
});
$('#btn-new-horario').on('click', function () {
    validarSession()
    ConDetalle = 0;

    $('.form-hide-horario').show();
    $('#11').empty();//añadido 30.07.2021
    switcheryLoad();//checked verde
    $('#11').html('<label id="_lbl_">Activo</label> <input type="checkbox" id="chk-activo-Hor" class=" js-switch" checked /><script>switcheryLoad();</script >');
    CamposAdicionalesHorarios();
    CombosHorario();
    $("#txt_Num_Dias").val(7)
    $("#txt_Cod_Hor").val('')
    $("#txt_Desc_Hor").val('')
    $('#cboUndOrg_h').attr('disabled', true);
    $('#txt_Num_Dias').attr('disabled', false);
    $('#TipoDia').attr('disabled', false);
    $('#btn-genra-horario').show();
    $('#btn-edita-dias').hide();
    $('#btn-update-horario').hide();
    $('#btn-save-change-horario').show();
    //añadido 30.07************************
    $('#external-events-listing').empty();
    $('#Dias_wrapper').hide();//añadido 02/08/2021

    var txtCod = 'strCoHorario';
    var txtdes = 'strDeHorario';

    $.post(
        '/Organizacion/ListarCaracteresMax',
        { strMaestro: 'TGHORARIO' },
        (response) => {
            response.forEach(element => {
                if (element.strColumnName == txtCod) {
                    $('#ValCode').children("input").attr('maxlength', element.intMaxLength);
                } if (element.strColumnName == txtdes) {
                    $('#Valdes').children("input").attr('maxlength', element.intMaxLength);
                }
            });
        });

    init_checkBox_styles();

    /* ADDING EVENTS */
    var currColor = '#3c8dbc' //Red by default
    //Color chooser button
    var colorChooser = $('#color-chooser-btn')
    $('#color-chooser > li > a').click(function (e) {
        e.preventDefault()
        //Save color
        currColor = $(this).css('color')
        //Add color effect to button
        $('#add-new-event').css({ 'background-color': currColor, 'border-color': currColor })
    });
    $('#add-new-event').click(function (e) {
        e.preventDefault()
        //Get value and make sure it is not null
        var val = $('#new-event').val()
        if (val.length == 0) {
            return
        }

        //Create events
        var event = $('<div />')
        event.css({
            'background-color': currColor,
            'border-color': currColor,
            'color': '#fff'
        }).addClass('external-event')
        event.html(val)
        $('#external-events').prepend(event)

        //Add draggable funtionality
        init_events(event)

        //Remove event from text input
        $('#new-event').val('')
    });

});
$('#btn-save-change-horario').on('click', function () {
    validarSession()
    var titulo_ = 'Nuevo Horario'

    var _uorg = $('#cboUndOrg_h option:selected').val();   //selected
    var _codHor = $('#txt_Cod_Hor').val();
    var _descHor = $('#txt_Desc_Hor').val();
    var _TipoDia = $('#TipoDia option:selected').val();
    var _NumDias = $('#txt_Num_Dias').val();
    var _camp1 = $('#strHorarioCampo1').val();
    var _camp2 = $('#strHorarioCampo2').val();
    var _camp3 = $('#strHorarioCampo3').val();
    var _camp4 = $('#strHorarioCampo4').val();
    var _camp5 = $('#strHorarioCampo5').val();
    var _activo = $('#chk-activo-Hor').is(':checked');
    var _principal = $('#checkPrincipal').is(':checked');

    if (_uorg == null || _codHor === '' || _descHor === '' || _TipoDia == null) {
        messageResponseMix({ type: 'info', message: 'Complete los campos obligatorios' }, titulo_)//05.08.2021
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }

    if (!$('#txt_Cod_Hor')[0].validity.valid) {
        messageResponseMix({ type: 'info', message: 'Ingrese solo números y letras sin espacios en blanco.' }, 'Codigo(*)')//05.08.2021
        return;
    }

    if (_uorg === '') {
        _uorg = null;
    }

    if (detJornadasHorario_.length == 0) {
        messageResponseMix({ type: 'info', message: 'Arrastre al Horario al menos una jornada' }, titulo_)//05.08.2021
        return;
    }

    var Horario = {
        strCoHorario: _codHor,
        strDeHorario: _descHor,
        intIdUniOrg: _uorg,
        intTotalDias: _NumDias,
        intNumDiaIni: _TipoDia,
        strHorarioCampo1: _camp1,
        strHorarioCampo2: _camp2,
        strHorarioCampo3: _camp3,
        strHorarioCampo4: _camp4,
        strHorarioCampo5: _camp5,
        bitFlActivo: _activo,
        bitFlPrincipal: _principal

    }

    $.post(
        '/Asistencia/RegistrarEditarHorario',
        { ObjHorario: Horario, lISTAHorJor: detJornadasHorario_, intTipoOperacion: 1 },  //Antes>>  lISTAHorJor: detalleHorJor
        (response) => {
            console.log(response);
            if (response.type !== '') {
                if (response.type === 'success') {
                    $('#cuerpo').empty();//añadido 30.07.2021
                    $('#external-events-listing').empty(); //añadido 30.07.2021
                    messageResponseMix({ type: response.type, message: response.message }, titulo_)//05.08.2021
                    TablaHorario();
                    $('.form-hide-horario').hide();
                    ConDetalle = 0;
                    detJornadasHorario_ = [];
                } else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Horario';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        messageResponseMix({ type: response.type, message: response.message }, titulo_)//05.08.2021
                    }
                    return;
                }
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });


});
$('#btn-update-horario').on('click', function () {
    validarSession()
    var titulo_ = 'Actualización de Horario'

    var _uorg = $('#cboUndOrg_h option:selected').val();   //selected
    var _codHor = $('#txt_Cod_Hor').val();
    var _descHor = $('#txt_Desc_Hor').val();
    var _TipoDia = $('#TipoDia option:selected').val();
    var _NumDias = $('#txt_Num_Dias').val();

    var _camp1 = $('#strHorarioCampo1').val();
    var _camp2 = $('#strHorarioCampo2').val();
    var _camp3 = $('#strHorarioCampo3').val();
    var _camp4 = $('#strHorarioCampo4').val();
    var _camp5 = $('#strHorarioCampo5').val();
    var _activo = $('#chk-activo-Hor').is(':checked');
    var _principal = $('#checkPrincipal').is(':checked');

    var id_hor = $('#IdHor').val();

    if (_uorg === '' || _codHor === '' || _descHor === '' || _TipoDia == null) {
        messageResponseMix({ type: 'info', message: 'Complete los campos obligatorios' }, titulo_)//05.08.2021
        $('#notifry_error').html('');
        $('#notifry_errordes').html('');
        return;
    }

    if (!$('#txt_Cod_Hor')[0].validity.valid) {
        messageResponseMix({ type: 'info', message: 'Ingrese solo números y letras sin espacios en blanco.' }, 'Codigo(*)')//05.08.2021
        return;
    }

    if (_uorg === '') {
        _uorg = null;
    }

    if (detJornadasHorario_.length == 0) {
        messageResponseMix({ type: 'info', message: 'Arrastre al Horario al menos una jornada' }, titulo_)//05.08.2021
        return;
    }

    var Horario = {
        strCoHorario: _codHor,
        strDeHorario: _descHor,
        intIdUniOrg: _uorg,
        intTotalDias: _NumDias,
        intNumDiaIni: _TipoDia,
        strHorarioCampo1: _camp1,
        strHorarioCampo2: _camp2,
        strHorarioCampo3: _camp3,
        strHorarioCampo4: _camp4,
        strHorarioCampo5: _camp5,
        bitFlActivo: _activo,
        bitFlPrincipal: _principal,
        intIdHorario: id_hor,
    }

    $.post(
        '/Asistencia/RegistrarEditarHorario',
        { ObjHorario: Horario, lISTAHorJor: detJornadasHorario_, intTipoOperacion: 2 }, //Antes>> lISTAHorJor: detalleHorJor
        (response) => {
            console.log(response);
            if (response.type !== '') {
                if (response.type === 'success') {
                    $('#cuerpo').empty();//añadido 30.07.2021
                    $('#external-events-listing').empty(); //añadido 30.07.2021
                    messageResponseMix({ type: response.type, message: response.message }, titulo_)//05.08.2021
                    TablaHorario();
                    $('.form-hide-horario').hide();
                    ConDetalle = 0;
                    detJornadasHorario_ = [];
                } else {
                    var list = response.message.split("|")
                    if (list.length == 2) {
                        var nomMantemiento = 'Horario';
                        var campo = list[1];
                        var msj = list[0];
                        var response = 'info';
                        var deta = 'notifry_error';
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                    } else {
                        messageResponseMix({ type: response.type, message: response.message }, titulo_)//05.08.2021
                    }
                    return;
                }

            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

});
$('#btn-cancel-horario').on('click', function () {
    validarSession()
    $('.form-hide-horario').hide();
    ConDetalle = 0;
    detJornadasHorario_ = [];
});

//extraido 30.07.2021
$('#btn-genra-horario').on('click', function () {

    var NumeroDias = $('#txt_Num_Dias').val();
    if (NumeroDias == '' || NumeroDias == null) {
        messageResponseMix({ type: 'info', message: 'Ingrese la cantidad de días que debe durar el Horario' }, 'Duración en Días')//05.08.2021
        $('#txt_Num_Dias').val("");
        return;
    }
    else if (NumeroDias == 0 || NumeroDias < 0) {
        messageResponseMix({ type: 'info', message: '' + NumeroDias + ' No es un Número válido' }, 'Duración en Días')//05.08.2021
        $('#txt_Num_Dias').val("");
        return;
    } else if (NumeroDias>365) {
        messageResponseMix({ type: 'info', message: 'La Duración permite máximo 365 días' }, 'Duración en Días')//05.08.2021
        $('#txt_Num_Dias').val("365");
        return;

    } else if (NumeroDias !== 0) {
        $('#txt_Num_Dias').attr('disabled', true);
        $('#TipoDia').attr('disabled', true);
        $('#btn-genra-horario').hide();
        $('#btn-edita-dias').show();


        if (NumeroDias !== null && NumeroDias > 0) {
            $('#Dias_wrapper').show();//añadido 02/08/2021
            CreaTabla(null, 0);//modificado 30.07.2021 1430
            ConDetalle = 0;
        } else if (NumeroDias == null || NumeroDias == '') {

            messageResponseMix({ type: 'info', message: 'Ingrese un número de días para el Horario' }, 'Duración en Días')//05.08.2021
            $('#txt_Num_Dias').attr('disabled', false);
            $('#TipoDia').attr('disabled', false);
            $('#btn-genra-horario').show();
            $('#btn-edita-dias').hide();
            return;
        }
    }

});
//extraido 30.07.2021
$('#btn-edita-dias').on('click', function () {
    swal({
        title: "Generar Horario",
        text: "Al cambiar el inicio o la duración, el horario perderá las jornadas asignadas",
        type: "info",
        showCancelButton: true,
        confirmButtonText: "Sí, continuar",
        cancelButtonText: "No, cancelar",
    }).then(function (isConfirm) {
        $('#txt_Num_Dias').attr('disabled', false);
        $('#TipoDia').attr('disabled', false);
        $('#btn-genra-horario').show();
        $('#btn-edita-dias').hide();
        //añadido 30.07************************
        $('#external-events-listing').empty();
        $('#Dias_wrapper').hide();//añadido 02/08/2021
        ConDetalle = 0;
        return;
    }, function (dismiss) {
        if (dismiss == 'cancel') {
            //swal("Cancelado", "La Operación fue cancelada", "error");
        }
    });
});
$('#RemoveJornada').on('click', function () {
});
$('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
    e.target // newly activated tab
    e.relatedTarget // previous active tab
})
$('#filActivo').on('change', function () {
    validarSession()
    TablaHorario();
});
$('#cboJerarquica_h').on('change', function () {
    validarSession()
    TablaHorario();
});
//$('#filtroHor').keyup(function () {
//    validarSession()
//    TablaHorario();
//});
$('#filtroHor').on('change', function () {
    validarSession()
    TablaHorario();
})

//#endregion MANT. HORARIO












/*************************************************/
/******** Mantenimiento Toma de Consumos *********/
/*************************************************/
//#region TOMA DE CONSMO - COMEDOR
var CantTotalSC; var TotalSC; var CantTotalS; var TotalS; var Confi; //Variables de Carrito de Compras

function traerComboMarcadorDeTipoDni() {
    validarSession()//AÑADIDO 07.04.2021
    $.post( //traer el ID(PK) del Marcador llamado DNI -->Usar al momento de grabar el consumo.
        '/Personal/ListarCombos',
        {
            intIdMenu: 0,
            strEntidad: 'TGMARCADOR',
            intIdFiltroGrupo: 0, // intIdUniOrg,
            strGrupo: 'INTERNO',
            strSubGrupo: 'DNI',
        },
        response => {
            $('#txt_NumeroDeMarcadorDeTipoDni').empty();
            $('#int_NumeroDeMarcadorDeTipoDni').empty();
            response.forEach(element => {
                $('#txt_NumeroDeMarcadorDeTipoDni').append(element.strDeTipo);
                $('#int_NumeroDeMarcadorDeTipoDni').append(element.intidTipo);
            })
        })

    var SesionMovi = {
        IntIdMenu: 'M0305',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }

    $.post( //traer el ID(PK) del Marcador llamado DNI -->Usar al momento de grabar el consumo.
        '/Personal/GetTSConfi',
        {
            objSession: SesionMovi,
            strCoConfi: 'HAB_TEMPORIZADOR_TOMACONSUMO',
        },
        response => {
            Confi = response.strValorConfi;
            //RESULTADO: El valor está expresado en Si=1 y No=0.
        })

    CantTotalSC = 0; TotalSC = 0; CantTotalS = 0; TotalS = 0;
}

focusMethod = function getFocus() {
    document.getElementById("dni_Empleado_input").focus();
}

//===============================================================================================
//================================ MODAL MARCADOR ===============================================
//===============================================================================================


///7AÑADIDO PARA EL MAX CARATER DE INPUT
let maxlenghtDocIdent ; //HGM04112021  ' + maxlenghtDocIdent +' 
function maxCarateresDocIdentidad(){

    //HGM04112021 ' + maxlenghtDocIdent +' 
    $.post(
        '/Personal/ListarCombos',
        {
            intIdMenu: 0,
            strEntidad: 'TSTIPDOC',
            intIdFiltroGrupo: 1,
            strGrupo: 'MAXIMODECARACTERES',
            strSubGrupo: ''
        },
        response => {

            $("#dni_Empleado_input").attr('maxlength', response[0].intidTipo);
            maxlenghtDocIdent = response[0].intidTipo;
            //alert(response[0].intidTipo);

            ////////response.forEach(element => {
            //////    $("#dni_Empleado_input").attr('maxlength', intidTipo);
            //////    maxlenghtDocIdent = intidTipo;
            //////    alert();
            //////     //$('#cboEmpresa').append(`<option value="${element.intidTipo}">${element.strDeTipo}</option>`)
            ////////})
        })
}


var NumeroMarcadorVisor; // 07.04.2021 variable global
function modalIngreseMarcador() {
    validarSession();//AÑADIDO 07.04.2021
    $.ajax({
        url: '/LoginSiscop/getNumMarcadorTomaConsumo',
        type: 'POST',
        data: {},
        beforeSend: function () {
            $.blockUI({
                css: {
                    border: 'none',
                    padding: '15px',
                    backgroundColor: '#000',
                    '-webkit-border-radius': '10px',
                    '-moz-border-radius': '10px',
                    opacity: .5,
                    color: '#fff'
                },
                message: 'Cargando...'
            });
        },
        success: function (response) {
            console.log(response);
            NumeroMarcadorVisor = response;

            if (parseInt(NumeroMarcadorVisor) === 0) {//añadido 07/04/2021
                $('#seleccioneUnMarcador').empty();
                $('#seleccioneUnMarcador').append('Tiene que Seleccionar un Marcador');
                modal.style.display = "block";
            } else {
                modal.style.display = "none";
                NewValidaPreModal(NumeroMarcadorVisor);
            }
        },
        complete: function () {
            $.unblockUI();
        }
    });






    // Get the modal
    var modal = document.getElementById("myModal");
    // Get the button that opens the modal
    var btn = document.getElementById("myBtn");
    // Get the <span> element that closes the modal
    var span = document.getElementsByClassName("close")[0];
    // When the user clicks the button, open the modal
    //btn.onclick = function () {

    //}
    // When the user clicks on <span> (x), close the modal para Seleccionar Marcador
    span.onclick = function () {
        modal.style.display = "none";
        focusMethod();//añadido 06.05.2021
    }

    //01.-  COMBO EMPRESA
    var intidUniOrg = 0;//166;// $(this).val()
    $.post(
        '/Personal/ListarCombos',
        {
            intIdMenu: 0,
            strEntidad: 'TGPERSONAL',
            intIdFiltroGrupo: intidUniOrg,
            strGrupo: 'EMPRESA',
            strSubGrupo: ''
        },
        response => {
            $('#cboEmpresa').empty()
            $('#cboEmpresa').attr('disabled', false)
            $('#cboEmpresa').append('<option value="0">Seleccione</option>')
            response.forEach(element => {
                $('#cboEmpresa').append(`<option value="${element.intidTipo}">${element.strDeTipo}</option>`)
            })
        })

    //Configuración de Impresión
    var SesionMovi = {
        IntIdMenu: 'M0314', //MENÚ TOMA DE CONSUMO
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }

    $.post(
        '/Personal/GetTSConfi',
        {
            objSession: SesionMovi,
            strCoConfi: 'HAB_IMPR_TICKET_COMEDOR',
        },
        response => {
            ConfiImpr = response.strValorConfi;
        })
    focusMethod();
}

//03.- COMBO MARCADOR 
$("#cboLocal").change(function () {
    validarSession()//AÑADIDO 07.04.2021
    var intIdUniOrg = $(this).val();

    $.post(
        '/Personal/ListarCombos',
        {
            intIdMenu: 0,
            strEntidad: 'TGMARCADOR',
            intIdFiltroGrupo: intIdUniOrg,
            strGrupo: 'TGMARCADOR',
            strSubGrupo: 'TOMACONSUMO',
        },
        response => {
            $('#cboMarcador').empty()
            $('#cboMarcador').append('<option value="0" selected>Seleccione</option>')
            response.forEach(element => {
                $('#cboMarcador').append(`<option value="${element.intidTipo}">${element.strDeTipo}</option>`)
            })
        })

})

//2.- COMBO LOCAL
$("#cboEmpresa").change(function () {
    validarSession()//AÑADIDO 07.04.2021
    var intid = $(this).val()

    $.post(
        '/Personal/ListarCombos',
        {
            intIdMenu: 0,
            strEntidad: 'TGPERSONAL',
            intIdFiltroGrupo: intid,
            strGrupo: 'LOCAL',
            strSubGrupo: ''
        },
        response => {
            $('#cboLocal').empty()
            $('#cboMarcador').empty()//añadido 26.05.2021
            $('#cboLocal').attr('disabled', false)
            $('#cboLocal').append('<option value="0">Seleccione</option>')
            response.forEach(element => {
                $('#cboLocal').append(`<option value="${element.intidTipo}">${element.strDeTipo}</option>`)
            })
        })

})

//VALIDAR CAMPO DNI
$("#dni_Empleado_input").keyup(function (event) {

    validarSession()//AÑADIDO 07.04.2021
    if (event.keyCode === 13) {
        if (($("#dni_Empleado_input").val().length) < maxlenghtDocIdent) { //HGM04112021
            $('#dni_Empleado_input_error').empty();
            //////$('#dni_Empleado_input_error').append('EL DNI DEBE CONTENER ' + maxlenghtDocIdent +' CARACTERES'); //HGM04112021
            $('#dni_Empleado_input_error').css('color', 'red');

            var $body = jQuery('#dni_Empleado_input_error')
            $body.fadeOut(300, function () {
                $body.fadeIn(300);
            });
        }
        else {
            $('#dni_Empleado_input_error').empty();
            ////$('#dni_Empleado_input_error').append('SE COMPLETÓ LOS ' + maxlenghtDocIdent +' CARACTERES');//HGM04112021
            $('#dni_Empleado_input_error').css('color', 'green');
            $("#btn-insertar-marcacion-con-dni").click();
        }
    }

});


/*
//KEYUP KEYDOWN
$("#dni_Empleado_input").keypress(function () {
    validarSession()//AÑADIDO 07.04.2021
    var longitud = $("#dni_Empleado_input").val().length + 1;
    if (longitud < maxlenghtDocIdent) {
        $('#dni_Empleado_input_error').empty();
        //////$('#dni_Empleado_input_error').append('EL DNI DEBE CONTENER ' + maxlenghtDocIdent +' CARACTERES');//HGM04112021
        $('#dni_Empleado_input_error').css('color', 'red');

        var $body = jQuery('#dni_Empleado_input_error')
        $body.fadeOut(300, function () {
            $body.fadeIn(300);
        });
        return;
    }
    else {
        $('#dni_Empleado_input_error').empty();
        //////$('#dni_Empleado_input_error').append('SE COMPLETÓ LOS ' + maxlenghtDocIdent +' CARACTERES'); //HGM04112021
        $('#dni_Empleado_input_error').css('color', 'green');
        $("#btn-insertar-marcacion-con-dni").click();
    }
});

*/

//===============================================================================================
//=============================== BOTON INGRESAR CON DNI ========================================
//===============================================================================================
$('#btn-insertar-marcacion-con-dni').on('click', function () {
    validarSession()//AÑADIDO 07.04.2021
    $('#dni_Empleado_input_error').empty();

    if (($("#dni_Empleado_input").val().length) == 0 || $("#dni_Empleado_input").val() == null) {
        //añadido 06.05.2021
        focusMethod();
        swal({
            title: "Toma de Consumos",
            text: "Tiene que ingresar el número de Documento",
            timer: 2000,
        });

        return;
    }
    /*
    else {
        if (($("#dni_Empleado_input").val().length) < maxlenghtDocIdent) { //HGM04112021
            $('#dni_Empleado_input_error').empty();
            //$('#dni_Empleado_input_error').append('EL DNI DEBE CONTENER ' + maxlenghtDocIdent+ ' CARACTERES'); //HGM04112021
            $('#dni_Empleado_input_error').css('color', 'red');

            var $body = jQuery('#dni_Empleado_input_error')
            $body.fadeOut(300, function () {
                $body.fadeIn(300);
            });
            return;
        }
        else {
            $('#dni_Empleado_input_error').empty();
            //$('#dni_Empleado_input_error').append('SE COMPLETÓ LOS ' + maxlenghtDocIdent + ' CARACTERES');  //HGM04112021
            $('#dni_Empleado_input_error').css('color', 'green');
        }
    }
    */

    

    var _intIdAsistencia = 0; var _intIdConsumoAuto = 0;
    var _strNumDocumento = $('#dni_Empleado_input').val();

    var _intNumTerminalRelac = $('#numeroMarcadorDelVisor').text();//Numero de DNI numeroMarcadorDelVisor
    var _dttFechaMarca = moment().format('DD/MM/YYYY HH:mm:ss')

    var MarcacionConDni = {
        intIdAsistencia: _intIdAsistencia
        , strNumDocumento: _strNumDocumento
        , dttFechaMarca: _dttFechaMarca
        , intNumTerminalRelac: _intNumTerminalRelac
        , bitMarcaDNI: true//_bitMarcaDNI  
    }

    var SesionMovi = {
        IntIdMenu: 'M0305',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }

    //return;
    $.post(
        '/Personal/RegistrarMarcacionConDni',
        { ObjEmpleadoConDni: MarcacionConDni, intTipoOperacion: 1, objSession: SesionMovi },
        (response) => {
            if (response.type !== '') {
                if (response.type === 'success') {
                    $('#dni_Empleado_input').val('');
                    $('#dni_Empleado_input_error').empty();
                    //>> IMPRIMIR
                    if (ConfiImpr == 1) {//chck_1_
                        //si no se registró ningún consumo automático o por defecto entonces no se debe imprimir nada.
                        _intIdAsistencia = response.objeto.intIdMarca;
                        _intIdConsumoAuto = response.objeto.intIdConsumoAuto;
                        if (_intIdConsumoAuto > 0) {
                            var evento_ = 2;/// 0: cuando envias varios IdAsist / 1: cuando envias varios idConsumos/ 2: cuando envias un IdAsist con al menos un idconsumo
                            dataCheckGC = [];// enviar el objeto vacío solo para trabajar con el mismo método.
                            ImprimirTicket_Comedor(SesionMovi, _intIdAsistencia, dataCheckGC, evento_, 1); //último 0: no debe mostrar mensaje
                        } else {
                            swal({
                                title: "Marcación con DNI",
                                text: response.message,
                            });
                            $('#dni_Empleado_input').val('');
                            $('#dni_Empleado_input_error').empty();
                        }
                        //añadido 06.05.2021
                        focusMethod();
                    }
                } else if (response.type === 'info') {
                    swal({
                        title: "Marcación con DNI",
                        text: response.message,
                    });
                    $('#dni_Empleado_input').val('');
                    $('#dni_Empleado_input_error').empty();
                    //añadido 06.05.2021
                    focusMethod();
                }
                else {
                    //añadido 06.05.2021
                    focusMethod();
                }
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

});

$('#btn-update-marcadorToma').on('click', function () {

    validarSession()//AÑADIDO 22.04.2021 HG
    var modal = document.getElementById("myModal");
    var btn = document.getElementById("myBtn");
    // Get the <span> element that closes the modal
    var span = document.getElementsByClassName("close")[0];
    // When the user clicks the button, open the modal
    //btn.onclick = function () {

    //}
    // When the user clicks on <span> (x), close the modal
    span.onclick = function () {
        modal.style.display = "none";
        //añadido 06.05.2021
        focusMethod();
    }

    if (parseInt(NumeroMarcadorVisor) === 0) {//añadido 07/04/2021
        //01.-  COMBO EMPRESA
        var intidUniOrg = 0;
        $.post(
            '/Personal/ListarCombos',
            {
                intIdMenu: 0,
                strEntidad: 'TGPERSONAL',
                intIdFiltroGrupo: intidUniOrg,
                strGrupo: 'EMPRESA',
                strSubGrupo: ''
            },
            response => {
                $('#cboEmpresa').empty()
                $('#cboEmpresa').attr('disabled', false)
                $('#cboEmpresa').append('<option value="0">Seleccione</option>')
                response.forEach(element => {
                    $('#cboEmpresa').append(`<option value="${element.intidTipo}">${element.strDeTipo}</option>`)
                })
            })
    } else {
        //traer datos del marcador: empresa y local
        let intIdEmpresa = 0;
        let intIdLocal = 0;
        $.post(
            '/Personal/ListarCombos',
            {
                intIdMenu: 0,
                strEntidad: 'TGMARCADOR',
                intIdFiltroGrupo: parseInt(NumeroMarcadorVisor),//ENVIA NÚMERO ENTERO DEL MARCADOR 
                strGrupo: 'TGMARCADOR',
                strSubGrupo: 'MARCADOR_TOMA'
            },
            response => {
                console.log(response);
                response.forEach(element => {
                    intIdEmpresa = element.intidTipo
                    intIdLocal = parseInt(element.strDeTipo)
                })
                $.post(
                    '/Personal/ListarCombos',
                    {
                        intIdMenu: 0,
                        strEntidad: 'TGPERSONAL',
                        intIdFiltroGrupo: 0,
                        strGrupo: 'EMPRESA',
                        strSubGrupo: ''
                    },
                    response => {
                        $('#cboEmpresa').empty()
                        $('#cboEmpresa').attr('disabled', false)
                        $('#cboEmpresa').append('<option value="0">Seleccione</option>')
                        response.forEach(element => {
                            $('#cboEmpresa').append(`<option value="${element.intidTipo}">${element.strDeTipo}</option>`)
                        })

                        $('#cboEmpresa').val(intIdEmpresa);

                        $.post(
                            '/Personal/ListarCombos',
                            {
                                intIdMenu: 0,
                                strEntidad: 'TGPERSONAL',
                                intIdFiltroGrupo: intIdEmpresa,
                                strGrupo: 'LOCAL',
                                strSubGrupo: ''
                            },
                            response => {
                                $('#cboLocal').empty()
                                $('#cboLocal').attr('disabled', false)
                                $('#cboLocal').append('<option value="0">Seleccione</option>')
                                response.forEach(element => {
                                    $('#cboLocal').append(`<option value="${element.intidTipo}">${element.strDeTipo}</option>`)
                                })
                                $('#cboLocal').val(intIdLocal);

                                $.post(
                                    '/Personal/ListarCombos',
                                    {
                                        intIdMenu: 0,
                                        strEntidad: 'TGMARCADOR',
                                        intIdFiltroGrupo: intIdLocal,
                                        strGrupo: 'TGMARCADOR',
                                        strSubGrupo: 'TOMACONSUMO',
                                    },
                                    response => {
                                        $('#cboMarcador').empty()
                                        $('#cboMarcador').append('<option value="0" selected>Seleccione</option>')
                                        response.forEach(element => {
                                            $('#cboMarcador').append(`<option value="${element.intidTipo}">${element.strDeTipo}</option>`)
                                        })

                                        $('#cboMarcador').val(parseInt(NumeroMarcadorVisor));
                                    })
                            })
                    })


            })


    }





    //Configuración de Impresión
    var SesionMovi = {
        IntIdMenu: 'M0305',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }

    $.post(
        '/Personal/GetTSConfi',
        {
            objSession: SesionMovi,
            strCoConfi: 'HAB_IMPR_TICKET_COMEDOR',
        },
        response => {
            ConfiImpr = response.strValorConfi;

        })

    $('#seleccioneUnMarcador').empty();
    modal.style.display = "block";
    return;
});

//===============================================================================================
//================================ ON CLICK idEmpleadoConsumo ===================================
//===============================================================================================
function esconder_pantalla_modo_espera() {
    validarSession();//AÑADIDO 22.04.2021 HG
    $("#contenedor_superior_top_nav").hide(); //Menu de opcion Salir del sistema
    $('#pantalla_bienvenida_modo_espera').fadeOut('slow').delay(5000).hide(); //HIDE TIENE QUE IR DE LA MANO CON FADEOUT
    $('#table-lista-servicios-disponibles').hide();
    $('#TbServiciosDiv').hide();//añadido 20.03.2021
    //añadido 19.03.2021
    $('#table-lista-servicios-complementarios').hide();
    $('#TbcomplementariosDiv').hide(); //añadido 20.03.2021
    //fin
    $('#Contenedor_Toma_Consumos').show();//modificado 26.03.2021
    $('#idTemporizador').hide();//añadido 20.03.2021
    $('#contenedor_padre_datos_comensal').show();
    $('#contenedor_padre_datos_comensal').appendTo('#contenedor_superior_top_nav2');

    CantTotalSC = 0; TotalSC = 0; CantTotalS = 0; TotalS = 0;
    //añadido 06.05.2021
    focusMethod();
}

////===============================================================================================
////================================ FUNCION boton_trigger_visor() ================================ modo de espera visor
////===============================================================================================
function boton_trigger_visor() {
    validarSession(); //AÑADIDO 07.04.2021
    var idEmpleadoConsumo_ = $('#input_idAsistencia').val();
    $('#input_idAsistencia').empty();// Añadido/HGM  13.04.21
    $('#input_idAsistencia').val('0');// Añadido/HGM  13.04.21
    //añadido 14/04/2021 ES
    console.log("==========================================");
    //var idEmpleadoConsumo_ = mi_variable_global_;
    console.log("Variable global :");
    console.log(mi_variable_global_);
    console.log("==========================================");


    //Código Del Marcador Impreso en el Label Que Usa el WebObserver 
    var txt_codigo_marcador_observer = $('#codigo_marcador').text();
    var TxtNumeroMarcadorEnVisor = $('#numeroMarcadorDelVisor').text();

    if (txt_codigo_marcador_observer == TxtNumeroMarcadorEnVisor) {
        if (!isNaN(idEmpleadoConsumo_)) {
            DatosEmpleadoTomaConsumoVisor(idEmpleadoConsumo_);
        }
    } else {
        $('#idTemporizador').hide();//modificado 26.03.2021
    }

};

//=============================================================================================== 
//================================ MODAL PARA LA INSERCION DEL NUMERO DEL MARCADOR ==============
//===============================================================================================
function NewValidaPreModal(NumeroMarcadorVisor) {
    validarSession()//AÑADIDO 07.04.2021
    var modal = document.getElementById("myModal");
    var ventana_modo_espera = document.getElementById("abrir_ventana_modo_espera");

    //Verifica si en el modal se ha elegido un marcador o no
    if (NumeroMarcadorVisor == '0' || NumeroMarcadorVisor == null) {
        $('#seleccioneUnMarcador').empty();
        $('#seleccioneUnMarcador').append('Tiene que Seleccionar un Marcador');
        modal.style.display = "block";
        return;
    }

    if (NumeroMarcadorVisor != '0' && NumeroMarcadorVisor != null) {
        $('#numeroMarcadorDelVisor').empty();
        $('#numeroMarcadorDelVisor').append(NumeroMarcadorVisor);
        $('#numeroMarcadorDeLaMarcacion').empty();
        $('#numeroMarcadorDeLaMarcacion').append(NumeroMarcadorVisor);
        $('#lbl_NumMarcadorRelacionado').empty();//añadido 19.03.2021 (general)
        $('#lbl_NumMarcadorRelacionado').append(NumeroMarcadorVisor); //añadido 19.03.2021 (general)
        $('#pantalla_bienvenida_modo_espera').fadeIn('slow').delay(50).show();
        $('#idTemporizador').hide();//26.03.2021
        modal.style.display = "none";
        //añadido 06.05.2021
        focusMethod();
    }

}


$('#abrir_ventana_modo_espera').on('click', function () {
    validarSession()//AÑADIDO 07.04.2021
    var modal = document.getElementById("myModal");
    var ventana_modo_espera = document.getElementById("abrir_ventana_modo_espera");
    NumeroMarcadorVisor = $('#cboMarcador').val(); //comentado var

    var Int_ = 0; var Cadena_ = "Sin Dato";
    //añadido 05.05.2021 
    var Marcador = {
        intNumMarcador: NumeroMarcadorVisor,
        intIdMarcador: Int_,
        strDesMarcador: Cadena_,
        intIdUniOrg: Int_,
        intTipoFunc: Int_,
        intTipoMarcad: Int_,
        bitTipoComu: Int_,
        strNumIP: Cadena_,
        intNumPuerto: 0,
        strMarcadCampo1: Cadena_,
        strMarcadCampo2: Cadena_,
        strMarcadCampo3: Cadena_,
        strMarcadCampo4: Cadena_,
        strMarcadCampo5: Cadena_,
        bitFlActivo: 1,
    }


    //enviar el marcador a la sesion 07/04/2021
    $.post(
        '/LoginSiscop/setNumMarcadorTomaConsumo',
        { numMarcador: NumeroMarcadorVisor },
        (response) => {
            console.log(response);

            //Verifica si en el modal se ha elegido un marcador o no
            if (NumeroMarcadorVisor == '0' || NumeroMarcadorVisor == null) {
                $('#seleccioneUnMarcador').empty();
                $('#seleccioneUnMarcador').append('Tiene que Seleccionar un Marcador');
                modal.style.display = "block";
                return;
            }

            if (NumeroMarcadorVisor != '0' && NumeroMarcadorVisor != null) {

                //añadir que se grabe en BD el marcador por IP asignado.
                console.log(Marcador);
                $.post(
                    '/Personal/SeleccionarMarcadorToma',
                    { objDatos: Marcador, intTipoOperacion: 3 },//TipoOperacion 3 es una excepcion para reutilizar el método.
                    (response) => {
                        console.log(response);
                        if (response.type !== '') {

                            if (response.type === 'success') {
                                $('#numeroMarcadorDelVisor').empty();
                                $('#numeroMarcadorDelVisor').append(NumeroMarcadorVisor);
                                $('#numeroMarcadorDeLaMarcacion').empty();
                                $('#numeroMarcadorDeLaMarcacion').append(NumeroMarcadorVisor);
                                $('#lbl_NumMarcadorRelacionado').empty();//añadido 19.03.2021 (general)
                                $('#lbl_NumMarcadorRelacionado').append(NumeroMarcadorVisor); //añadido 19.03.2021 (general)
                                $('#pantalla_bienvenida_modo_espera').fadeIn('slow').delay(50).show();
                                $('#idTemporizador').hide();//26.03.2021
                                modal.style.display = "none";
                            } else {
                                var list = response.message.split("|")
                                if (list.length == 2) {
                                    var nomMantemiento = 'Marcador';
                                    var campo = list[1];
                                    var msj = list[0];
                                    var response = 'info';
                                    var deta = 'notifry_error';
                                    INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                                } else {
                                    messageResponseMix({ type: response.type, message: response.message }, 'Marcador')//28.09.2021
                                }
                                return;
                            }

                        }
                    }
                )
                //añadido 06.05.2021
                focusMethod();
            }
        });
});

//=============================================================================================== 
//================================ FUNCION limpieza() =========================================== Controles de Texto
//=============================================================================================== Limpiar limpieza toma consumo
function limpieza() {
    $('#lblNombre').empty();
    $('#lblFotocheck').empty();
    $('#lbl_intIdReglaNeg').empty();
    $('#txt_dttFecha').empty();
    $('#txt_dttFechaHora').empty();
    $('#TipMenuTomaConsumo').val('0');
    $('#TipServicioTomaConsumo').empty()
    CantTotalSC = 0; TotalSC = 0; CantTotalS = 0; TotalS = 0;
    MaxDisponible = 0; bitTodosTS_ = 0;
}

$('#boton_limpiar').on('click', function () {
    validarSession()//AÑADIDO 07.04.2021
    limpieza();
});

//===============================================================================================46515
//=================================== FUNCION DatosEmpleadoTomaConsumoVisor() ===================mdetc ftdetc
//===============================================================================================get datos toma consumo
/*  Esta función trae los datos que se mostrarán en la vista de la persona que marcó. Esos datos son traidos 
 *  desde el sp TSP_TAASISTENCIA_CONSUMO_Q01. La marca entra a esta función como un parámetro "idEmpleadoConsumo" y
 *  fue recibido por el Websocket al momento que se insertó una marcación en la tabla TAASISTENCIA.
 */
var bitTodosTS_ = 0; let MaxDisponible = 0;
function DatosEmpleadoTomaConsumoVisor(idEmpleadoConsumo) { /*este parametro es traido de...*/
    validarSession()//AÑADIDO 07.04.2021
    swal.close();
    CantTotalSC = 0; TotalSC = 0; CantTotalS = 0; TotalS = 0;
    var SesionMovi = {
        IntIdMenu: 'M0314',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }

    $.post(
        '/Personal/ObtenerEmpleadoTomaConsumo',
        { IntIdAsistencia: idEmpleadoConsumo, objSession: SesionMovi },
        (response) => {
            console.log(response);
            console.log(Confi);//prueba de impresion 29.03.2021
            $('#table-lista-servicios-disponibles').hide();
            $('#TbServiciosDiv').hide();//añadido 20.03.2021
            $('#table-lista-servicios-complementarios').hide();
            $('#TbcomplementariosDiv').hide(); //añadido 20.03.2021
            $('#Contenedor_Toma_Consumos').hide();//modificado 26.03.2021
            $('#idTemporizador').hide();//26.03.2021
            //fin
            response.forEach(element => {
                var dttFechaHora_slice_fecha = (element.dttFechaHora).slice(0, 10);//Se esta recortando la fecha ('2020-11-26') 
                var salidaFecha = formato(dttFechaHora_slice_fecha);
                var salidaFechaMostrar = formato1(dttFechaHora_slice_fecha);
                /**
                 * Convierte un texto de la forma 2017-01-10 a la forma
                 * 10/01/2017
                 *
                 * @param {string} texto Texto de la forma 2017-01-10
                 * @return {string} texto de la forma 10/01/2017
                 *
                 */
                //INVERTIR EL FORMATO DE LA FECHA PARA USARLO EN EL new Date(salidaFecha)
                function formato(dttFechaHora_slice_fecha) {
                    return dttFechaHora_slice_fecha.replace(/^(\d{4})-(\d{2})-(\d{2})$/g, '$2/$3/$1');
                }

                //INVERTIR EL FORMATO DE LA FECHA PARA MOSTRARLO EN LA VISTA
                function formato1(dttFechaHora_slice_fecha) {
                    return dttFechaHora_slice_fecha.replace(/^(\d{4})-(\d{2})-(\d{2})$/g, '$3/$2/$1');
                }

                //FECHA HORA DIA
                var today = new Date(salidaFecha); //Debe estar llegar aquí con el formato: MM/DD/YY
                var hoy = today.getDay();
                var eldia;//lunes, martes;...
                if (hoy == 0) { eldia = 'Domingo'; }
                if (hoy == 1) { eldia = 'Lunes'; }
                if (hoy == 2) { eldia = 'Martes'; }
                if (hoy == 3) { eldia = 'Miércoles'; }
                if (hoy == 4) { eldia = 'Jueves'; }
                if (hoy == 5) { eldia = 'Viernes'; }
                if (hoy == 6) { eldia = 'Sábado'; }

                $('#lblNombre').empty();
                $('#lblNombre').append(element.strNombresCompletos); //strNombresCompletos
                $('#lblFotocheck').empty();
                $('#lblFotocheck').append(element.strFotocheck);
                $('#lbl_intIdReglaNeg').empty();
                $('#lbl_intIdReglaNeg').append(element.intIdReglaNeg);
                $('#txt_dttFecha').empty();
                $('#txt_dttFecha').append(eldia + ', ' + salidaFechaMostrar);
                var dttFechaHora_slice_hora = (element.dttFechaHora).slice(11);//Se esta recortando la fecha
                $('#txt_dttFechaHora').empty();
                $('#txt_dttFechaHora').append(dttFechaHora_slice_hora);
                $('#txt_dttFechaHora_completa').empty();
                $('#txt_dttFechaHora_completa').append(element.dttFechaHora);
                $('#txt_intIdServicio').val(element.intIdServicio);
                $('#div_intIdPersonal').empty();
                $('#div_intIdPersonal').append('<label id="lbl_intIdPersonal">' + element.intIdPersonal + '</label>');
                $('#div_intIdServicio').empty();
                $('#div_intIdServicio').append('<label id="lbl_intIdServicio">' + element.intIdServicio + '</label>');
                $('#div_intIdAsistencia').empty();
                $('#div_intIdAsistencia').append('<label id="lbl_intIdAsistencia">' + element.intIdAsistencia + '</label>');
                $('#div_dttFechaHora').empty();
                $('#div_dttFechaHora').append('<label id="lbl_dttFechaHora">' + element.dttFecha + '</label>');//revisar este caso
                $('#div_intCantidad').empty();
                $('#div_intCantidad').append('<label id="lbl_intCantidad">' + element.intCantidad + '</label>');
                $('#lblstrTipoServicio').empty();
                $('#lblstrTipoServicio').append(element.strTipoServicio.toUpperCase());
                $('#lblintCantMaxRN').empty();
                $('#lblintCantMaxRN').append(element.intTipoPeriodoConsumo);
                $('#lblintCantMaxConsumo').empty();
                $('#lblintCantMaxConsumo').append(element.intCantMaxConsumo);
                MaxDisponible = element.intCantMaxConsumo;
                //AÑADIDOS 07.04.2021
                $('#lblstrHorarioAtencion').empty();
                $('#lblstrHorarioAtencion').append(element.strHorarioAtencion);

                //añadido 09.04.2021
                CantTotalS = element.CantS;
                CantTotalSC = element.CantC;
                var Simb_ = element.Sim;
                //añadido 12.04.2021
                bitTodosTS_ = element.bitTodosTS;

                //añadidos 22.03.2021
                $('#lblCantServ').empty();
                $('#SplblCantServ').empty();
                $('#lblTotalServ').empty();

                $('#lblCantServC').empty();
                $('#SplblCantServC').empty();
                $('#lblTotalServC').empty();

                $('#lblCantServAnt').empty();
                $('#lblCantServCAnt').empty();
                //añadido 09.04.2021

                if (CantTotalS > 0) {
                    $('#lblCantServAnt').show();
                    TotalS = parseFloat(element.TotalS).toFixed(2);
                    if (CantTotalS == 1) {
                        $('#lblCantServAnt').append(CantTotalS.toString() + " Servicio Anterior Solicitado");
                    } else {
                        $('#lblCantServAnt').append(CantTotalS.toString() + " Servicios Anteriores Solicitados");
                    }
                }
                if (CantTotalSC > 0) {
                    $('#lblCantServCAnt').show();
                    TotalSC = parseFloat(element.TotalC).toFixed(2);

                    if (CantTotalSC == 1) {
                        $('#lblCantServCAnt').append(CantTotalSC.toString() + " Complemento Anterior Solicitado");
                    } else {
                        $('#lblCantServCAnt').append(CantTotalSC.toString() + " Complementos Anteriores Solicitados");
                    }
                }

                CantTotalS = 0;
                CantTotalSC = 0;
                //$('#SplblCantServ').append(CantTotalS.toString());
                $('#lblTotalServ').append(Simb_ + " " + TotalS.toString());
                //$('#SplblCantServC').append(CantTotalSC.toString());
                $('#lblTotalServC').append(Simb_ + " " + TotalSC.toString());


                //viernes19
                if (element.bitMarcaDNI == true) {
                    var txtDNI = $('#txt_NumeroDeMarcadorDeTipoDni').text();
                    $('#numeroMarcadorDeLaMarcacion').empty();
                    $('#numeroMarcadorDeLaMarcacion').append(txtDNI);
                } else {
                    $('#numeroMarcadorDeLaMarcacion').empty();
                    $('#numeroMarcadorDeLaMarcacion').append('N°  ' + $('#lbl_NumMarcadorRelacionado').text());//modificado 07.04.2021
                }

                Imagen_GC(element.imgFoto, "TomaConsumo");//añadido 26.03.2021

                //===============================================================================================
                //=============================== SECCION QUE TRAE LA IMAGEN ====================================
                //===============================================================================================
                //$('#contenedor_imagen_empleado').html('<img src = ' + '/DirEmpleadosRuta/' + element.imgFoto + ' style="width:100%; max-width:220px;border-radius:2%;"  />');
                //$('#contenedor_imagen_empleado').html('<img src = ' + '/DirEmpleadosRuta/' + element.imgFoto + ' style="width:100%; max-width:220px;border-radius:50%;border: 5px solid white;"  />');
                var ServicioId = element.intIdServicio;
                esconder_pantalla_modo_espera();
            });

            $('#TipServicioTomaConsumo').empty();
            $('#TipServicioTomaConsumo_Horario').empty();

            // despues de llenarse este label lbl_intIdReglaNe ejecutaremos  la sigt funcion:
            //ID ASISTENCIA OBTENIDO EN ESTE POST IRA COMO PARAMETRO EN LA FUNCION "TraerListaDeTablaRegNegDet" 
            //PARA LUEGO TRAER LA LISTA DE SERVICIOS QUE LE CORRESPONDE A ESE ID
            var id_intIdAsistencia = $('#lbl_intIdAsistencia').text(); //texto intIdAsistencia en el label
            var id_strNombresCompletos = $('#lblNombre').text();

            TraerListaDeTablaRegNegDet(id_intIdAsistencia, id_strNombresCompletos);

        });
}

//===============================================================================================
//=================================== FUNCION fechaHoraTomaConsumo() ============================fecha hora toma consumo
//===============================================================================================
//Funcion utilizada para el html y mostrar el dia, fecha, hora y minuto actual en el VISOR
function fechaHoraTomaConsumo() {

    function checkTime(i) {
        if (i < 10) {
            i = "0" + i;
        }
        return i;
    }

    function startTime() {

        var today = new Date();

        var hoy = today.getDay();
        var hoydia;
        if (hoy == 0) { hoydia = 'Domingo'; }
        if (hoy == 1) { hoydia = 'Lunes'; }
        if (hoy == 2) { hoydia = 'Martes'; }
        if (hoy == 3) { hoydia = 'Miércoles'; }
        if (hoy == 4) { hoydia = 'Jueves'; }
        if (hoy == 5) { hoydia = 'Viernes'; }
        if (hoy == 6) { hoydia = 'Sábado'; }

        var strDay = today.getDate();
        var strMonth = today.getMonth() + 1;
        var strYear = today.getFullYear();

        var h = today.getHours();
        var m = today.getMinutes();
        var s = today.getSeconds();

        var ampm = 'AM'
        if (h >= 13 && h <= 23) {
            ampm = ''; //no debe tener formato AM o PM
        } else {
            if (h < 12) { ampm = 'AM'; }
            if (h >= 12) { ampm = 'PM'; }
        }


        // agregar cero delante de numeros<10
        m = checkTime(m);
        s = checkTime(s);

        if (strDay == 1 || strDay == 2 || strDay == 3 || strDay == 4 || strDay == 5 || strDay == 6 || strDay == 7 || strDay == 8 || strDay == 9) {
            strDay = "0" + strDay;
        }

        if (strMonth == 1 || strMonth == 2 || strMonth == 3 || strMonth == 4 || strMonth == 5 || strMonth == 6 || strMonth == 7 || strMonth == 8 || strMonth == 9) {
            strMonth = "0" + strMonth;
        }

        //Si se comenta genera en la consola el error de: Uncaught TypeError: Cannot set property 'innerHTML' of null
        document.getElementById('time').innerHTML = hoydia + "  " + strDay + "/" + strMonth + "/" + strYear + " <br />  " + h + ":" + m + ":" + s + " " + ampm;


        t = setTimeout(function () {
            startTime()
        }, 500);
    }
    startTime();
}

//===============================================================================================Tabla Toma Consumos
//============================= FUNCION TraerListaDeTablaRegNegDet() ============================servicios disponibles 
//===============================================================================================
var _varTabla
var _varTablaRNS
var _varTablaSC
function TraerListaDeTablaRegNegDet(intIdAsistencia_, strNombresCompletos_) {
    validarSession()//AÑADIDO 07.04.2021
    Reloj();
    //$('#idTemporizador').show();

    var SesionMovi = {
        IntIdMenu: 'M0314',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }

    $.post(
        '/Personal/GetTablaComplementarios',
        { objSession: SesionMovi, intIdAsistencia: intIdAsistencia_ },
        (response) => {
            if (response.type == 'error') { //Cuando el response no sea una lista sino Cadena de Caracteres(un mensaje)
                //añadido 19.03.2021
                $('#table-lista-servicios-complementarios').hide();
                $('#TbcomplementariosDiv').hide(); //añadido 20.03.2021
                //fin
                if (response.type === 'error') {
                    swal({
                        title: "Estimado(a): " + strNombresCompletos_,
                        text: response.message,
                    });

                    //añadido 19.03.2021
                    $('#table-lista-servicios-complementarios').hide();
                    $('#TbcomplementariosDiv').hide(); //añadido 20.03.2021
                    //fin
                }
            } else {
                response.forEach(element => {
                    if (typeof _varTablaSC !== 'undefined') {
                        _varTablaSC.destroy();
                    }

                    _varTablaSC =
                        $('#table-lista-servicios-complementarios').DataTable({
                            data: response,
                            'sDom': 't',
                            columns: [
                                { data: 'intIdServicio' },
                                { data: 'strDesServicio' },
                                { data: 'strCategoria' },
                                { data: 'monCostoServ' },
                                { data: 'strCoMoneda' },
                                { data: 'dcTipoCambio' },
                                { data: 'simbolo' },
                                {
                                    sortable: false,
                                    "render": (data, type, item, meta) => {
                                        let intIdServicio_ = item.intIdServicio;
                                        let monCostoServ_ = item.monCostoServ;
                                        let Simb_ = item.simbolo;//añadido 20.03.2021

                                        var fecha = new Date();
                                        var hora = fecha.getHours();
                                        //btn btn-success btn-xs btn-edit
                                        return `<button class="btn btn-info btn-xs" dataidServC="${intIdServicio_}" onclick='fnAgregarComplemento(this,"${intIdServicio_}","${monCostoServ_}", "${Simb_}")'> AÑADIR </button>  ` +
                                            `<button class="btn btn-danger btn-xs"  dataidServC="${intIdServicio_}" onclick='fnAnularComplemento(this,"${intIdServicio_}","${monCostoServ_}", "${Simb_}")' hidden><i class="fa fa-trash-o"></i> QUITAR </button>  ` +
                                            `<button class="btn btn-success btn-xs" style="font-size: 11px;" hidden ><i class="fa fa-check"></i> ATENDIDO </button>`;
                                    }
                                },
                            ],
                            lengthMenu: [10, 25, 50],
                            order: [],
                            responsive: true,
                            language: _datatableLanguaje,
                            columnDefs: [//ocultar y definir columnas                  
                                {
                                    targets: [0],  //Columna numero "cero"
                                    visible: false,//Columna no visible pero programable
                                    searchable: true
                                },
                                {
                                    targets: [3],//
                                    visible: false,
                                    searchable: true
                                },
                                {
                                    targets: [5],//
                                    visible: false,
                                    searchable: true
                                },
                                {
                                    targets: [6],//
                                    visible: false,
                                    searchable: true
                                }

                            ],
                            dom: 'lBfrtip',
                        });
                    $('#table-lista-servicios-complementarios').show();
                    $('#contenedor-table-lista-complementarios').show();
                    $('#TbcomplementariosDiv').show();
                });
            }
        });

    $.post(
        '/Personal/GetTablaReglaNegocioServicio',
        { objSession: SesionMovi, intIdAsistencia: intIdAsistencia_ },
        (response) => {

            if (response.type == 'error') { //Cuando el response no sea una lista sino Cadena de Caracteres(un mensaje)
                $('#table-lista-servicios-disponibles').hide();
                $('#TbServiciosDiv').hide();

                if (response.type === 'error') {
                    swal({
                        title: "Estimado(a): " + strNombresCompletos_,
                        text: response.message,
                    });

                    $('#table-lista-servicios-disponibles').hide(); //martes05
                    $('#TbServiciosDiv').hide();
                }
            } else {
                response.forEach(element => {

                    if (typeof _varTablaRNS !== 'undefined') {
                        _varTablaRNS.destroy();
                    }

                    _varTablaRNS =
                        $('#table-lista-servicios-disponibles').DataTable({
                            data: response,
                            'sDom': 't',
                            columns: [
                                { data: 'IntIdReglaNeg' },
                                { data: 'intIdServicio' },//----Necesario al guardar
                                { data: 'strDesServicio' },
                                { data: 'intIdTipServ' },
                                { data: 'intIdTipoMenu' },
                                { data: 'monCostoServ' },//---- Necesario al guardar
                                { data: 'strCoMoneda' },
                                { data: 'dcTipoCambio' },
                                { data: 'simbolo' },
                                {
                                    sortable: false,
                                    "render": (data, type, item, meta) => {

                                        let IntIdReglaNeg_ = item.IntIdReglaNeg;
                                        let intIdServicio_ = item.intIdServicio;
                                        let monCostoServ_ = item.monCostoServ;
                                        let intIdTipServ_ = item.intIdTipServ;
                                        let intIdTipoMenu_ = item.intIdTipoMenu;
                                        let Simb_ = item.simbolo;//añadido 20.03.2021
                                        var fecha = new Date();
                                        var hora = fecha.getHours();
                                        if (MaxDisponible === 0) {
                                            return `<button class="btn btn-primary btn-xs btn-edit" style="font-size: 12px;" dataidServ="${intIdServicio_}" onclick='BotonSeleccionarServicioRegistrado(this,"${intIdServicio_}","${monCostoServ_}","${intIdTipServ_}", "${Simb_}")' disabled> AGREGAR </button>  ` +
                                                `<button class="btn btn-danger btn-xs"  dataidServ="${intIdServicio_}" onclick='BotonDeshacerServicioRegistrado(this,"${intIdServicio_}","${monCostoServ_}", "${Simb_}")' hidden><i class="fa fa-trash-o"></i> QUITAR </button>  ` +
                                                `<button class="btn btn-success btn-xs" style="font-size: 11px;" hidden ><i class="fa fa-check"></i> ATENDIDO </button>`;
                                        } else {
                                            return `<button class="btn btn-primary btn-xs btn-edit" style="font-size: 12px;" dataidServ="${intIdServicio_}" onclick='BotonSeleccionarServicioRegistrado(this,"${intIdServicio_}","${monCostoServ_}","${intIdTipServ_}", "${Simb_}")'> AGREGAR </button>  ` +
                                                `<button class="btn btn-danger btn-xs"  dataidServ="${intIdServicio_}" onclick='BotonDeshacerServicioRegistrado(this,"${intIdServicio_}","${monCostoServ_}", "${Simb_}")' hidden><i class="fa fa-trash-o"></i> QUITAR </button>  ` +
                                                `<button class="btn btn-success btn-xs" style="font-size: 11px;" hidden ><i class="fa fa-check"></i> ATENDIDO </button>`;
                                        }
                                    }
                                },

                            ],
                            lengthMenu: [10, 25, 50],
                            order: [],
                            responsive: true,
                            language: _datatableLanguaje,
                            columnDefs: [//ocultar y definir columnas                  
                                {
                                    targets: [0],  //Columna numero "cero"
                                    visible: false,//Columna no visible pero programable
                                    searchable: true
                                },
                                {
                                    targets: [1],//
                                    visible: false,
                                    searchable: true
                                },
                                {
                                    targets: [5],//
                                    visible: false,
                                    searchable: true
                                },
                                {
                                    targets: [7],//
                                    visible: false,
                                    searchable: true
                                },
                                {
                                    targets: [8],//
                                    visible: false,
                                    searchable: true
                                }
                            ],
                            dom: 'lBfrtip',
                        });

                    $('#table-lista-servicios-disponibles').show();
                    $('#contenedor-table-lista-servicios').show();  //martes05
                    $('#TbServiciosDiv').show();
                    swal({
                        title: "Estimado(a): " + strNombresCompletos_,
                        text: 'Tiene los siguientes SERVICIOS', //'Tiene los siguientes servicios disponibles',
                    });



                });
            } //fin del else   
        });
    $('#idTemporizador').show();
}

function Reloj() {
    if (Confi === '1') {
        $('#start').click();
        $('#reset').click();
        $('#titulo').empty();
        $('#titulo').append(" LA VENTANA DE TOMA DE CONSUMOS SE CERRARÁ EN: ");
        $('#btn-refresh').show();
        $('#hours').show();
        $('#minutes').show();
        $('#h_').show();
        $('#m_').show();
        $('#seconds').show();
    } else {
        $('#titulo').empty();
        $('#titulo').append(" TOMA DE CONSUMOS ");
        $('#btn-refresh').hide();
        $('#hours').hide();
        $('#minutes').hide();
        $('#h_').hide();
        $('#m_').hide();
        $('#seconds').hide();
    }
}

//===============================================================================================
//================================ FUNCION countdown, tiempo de espera, timer =================== countdown temporizador timer
//===============================================================================================
//El countdown_07 se pasó al consumo.html
function AnularConsumoTrue(anulado) {
    return anulado = true
}

//===============================================================================================
//=============================== BOTON TERMINAR Toma de Consumo ================================
//===============================================================================================
$('#btn-refresh').on('click', function () {

    $('#start').click();
    $('#reset').click();
});

$('#btn-salir-toma-consumo-comensal').on('click', function () {
    validarSession()//AÑADIDO 07.04.2021
    swal({
        title: "Finalizar Toma de Consumo",
        text: "Estimado Usuario, ¿Desea finalizar el proceso de atención de su Consumo?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí",
        cancelButtonText: "No",
        allowOutsideClick: false, //añadido 25/03/2021
    }).then(function (isConfirm) {
        if (isConfirm) {
            $('#contenedor_superior_top_nav').fadeIn('slow').delay(2000).show();
            $('#pantalla_bienvenida_modo_espera').fadeIn('slow').delay(3000).show();
            $('#contenedor_padre_datos_comensal').fadeOut('slow').delay(3000).hide();
            $('#idTemporizador').hide();
            $('#TbServiciosDiv').hide();
            $('#TbcomplementariosDiv').hide();
            $('#contenedor-table-lista-complementarios').hide();
            $('#contenedor-table-lista-servicios').hide();
            $('#table-lista-servicios-disponibles').hide();
            $('#table-lista-servicios-complementarios').hide();
            $('#stop').click();

            Selec = [];//nueva instancia
            SelecSC = [];//nueva instancia
            CantTotalSC = 0;
            TotalSC = 0;
            CantTotalS = 0;
            TotalS = 0;

            //IMPRIMIR SI LA CONFIGURACION: Generar Ticket desde Servicio de Comensal (imprimir ticket completo al finalizar TOMA)
            console.log("Configuracion de Impresora:");
            console.log(ConfiImpr);
            if (ConfiImpr == 2) {//chck_2_
                var SesionMovi = {
                    IntIdMenu: 'M0314',
                    intIdUsuario: idUsuar,
                    intIdSoft: idSoftw,
                    intIdSesion: intIdSe
                }
                var intIdAsistencia_ = $('#lbl_intIdAsistencia').text(); //texto intIdAsistencia en el label
                var evento_ = 2;
                dataCheckGC = [];// enviar el objeto vacío solo para trabajar con el mismo método.
                //añadido 06.05.2021
                focusMethod();

                ImprimirTicket_Comedor(SesionMovi, parseInt(intIdAsistencia_, 10), dataCheckGC, evento_, 1); //último 0: no debe mostrar mensaje
                //if (ImprimirTicket_Comedor(SesionMovi, parseInt(intIdAsistencia_, 10), dataCheckGC, evento_)) {
                //    swal({
                //        title: "Ticket de Consumos",
                //        text: "No olvide recoger su ticket impreso",
                //        //timer: 3500,
                //    });
                //}
            }

            mi_variable_global_ = 0; //añadido 14.04.2021 Limpiar
            //añadido 06.05.2021
            focusMethod();
        }
    }, function (dismiss) {
        if (dismiss === 'cancel') { // you might also handle 'close' or 'timer' if you used those
            Reloj(); //añadido 29.03.2021 y comentadas las lineas inferiores
        } if (dismiss === 'overlay') {
            //ignorar
        }
        else {
            throw dismiss;
        }
    }
    );

});

//===============================================================================================
//============================= FUNCION traer pk del consumo registrado  ======================== esta usando un metodo listar
//===============================================================================================
$('#TablaEmpresa  tbody').on('click', 'tr button.btn-delete', function () {
    validarSession()//AÑADIDO 07.04.2021
    //ESTAS LINEAS TIENEN QUE IR DEBAJO DEL OBTENER PK
    let EmpresaId = $(this).attr("dataid")  //Donde esta ete atributo de ese div cogerlo para tener ese

    let Descripcion = $(this).attr("des_data")
    if (!isNaN(EmpresaId)) {
        intentEliminarEmpresa(EmpresaId, Descripcion)
    }

});
function JJ() {
    return false;
}

//===============================================================================================
//=================================== FUNCION TraerIdRegistroParaEliminar() ===================== 
//=============================================================================================== eliminar toma consumo
function TraerIdRegistroParaEliminar() {
    validarSession()//AÑADIDO 07.04.2021
    var SesionMovi = {
        IntIdMenu: 'M0314',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }

    $.post(
        '/Personal/GetIdConsumoParaEliminar',
        { objSession: SesionMovi },
        (response) => {
            console.log(response);
            response.forEach(element => {
                $('#div_intIdConsumo, #div_intIdConsumo_2').empty();
                $('#div_intIdConsumo, #div_intIdConsumo_2').append('<label id="lbl_intIdConsumo">' + element.intIdConsumo + '</label>');
            });
        });
}

//VALOR INICIAL CERO
var cantidad_inicial = 0;
//===============================================================================================
//==================== DESHABILITAR BOTON SELECCIONAR valor 'int_Valida' ===============
//===============================================================================================
function deshabilitarBtnSelecionar(intIdServicio_, this_, intValida_, bt_) {

    var tablaServiciosD = $('#table-lista-servicios-disponibles').DataTable();

    tablaServiciosD.rows().every(function (rowIdx, tableLoop, rowLoop) {

        var cell = tablaServiciosD.cell({ row: rowIdx, column: 9 }).node(); //9 es el número de columna de la tabla según HTML

        if (intValida_ == 0) {
            $('button:eq(0)', cell).prop("disabled", true);//.html(' ');//.prop('value', 'Registrado');;
        }

        if (intValida_ >= 1) { //modificado 07.04.2021 (intValida_ == 1)
            $('button:eq(0)', cell).prop("disabled", false);
        }
    });


    if (bt_ > 0) {// bt_= 0, cuando proviene del botón seleccionar.
        var filaRowId = $(this_).closest("tr");//.parents('tr');//[0];

        $('button:eq(1)', filaRowId).prop("disabled", false);
        $('button:eq(1)', filaRowId).toggle(true);
    }


}
function deshabilitarBtnAgregarSC(intIdServicio_, this_, intValida_, bt_) {

    var tablaServiciosC = $('#table-lista-servicios-complementarios').DataTable();

    tablaServiciosC.rows().every(function (rowIdx, tableLoop, rowLoop) {
        var cell = tablaServiciosC.cell({ row: rowIdx, column: 7 }).node();

        if (intValida_ == 0) {
            $('button:eq(0)', cell).prop("disabled", true);//.html(' ');//.prop('value', 'Registrado');;
        }

        if (intValida_ >= 1) { //modificado 07.04.2021 (intValida_ == 1)
            $('button:eq(0)', cell).prop("disabled", false);
        }
    });


    if (bt_ > 0) {// bt_= 0, cuando proviene del botón seleccionar.
        var filaRowId = $(this_).closest("tr");//.parents('tr');//[0];

        $('button:eq(1)', filaRowId).prop("disabled", false);
        $('button:eq(1)', filaRowId).toggle(true);
    }


}

//===============================================================================================
//==================== DESHABILITAR BOTON ANULAR SEGUN valor 'int_Valida' ====================
//===============================================================================================
function deshabilitarBtnAnular(this_, intIdServicio_a, Cont) {
    var filaRowId = $(this_).parents('tr');
    $('button:eq(1)', filaRowId).toggle(false);
}
function deshabilitarBtnAnularSC(this_, intIdServicio_a, Cont) {
    var filaRowId = $(this_).parents('tr');
    $('button:eq(1)', filaRowId).toggle(false);
}
function habEstadoAtendido(this_, intIdServicio_a, Cont) {
    var filaRowId = $(this_).closest("tr");
    $('button:eq(2)', filaRowId).prop("disabled", false);
    $('button:eq(2)', filaRowId).toggle(true);//26.03.2021 prueba
}


//===============================================================================================
//============================ BOTON SELCCIONAR (e Insertar Toma Consumo) ======================= 
//===============================================================================================
var Selec = new Array(); //declarar
var SelecSC = new Array(); //declarar

function BotonSeleccionarServicioRegistrado(this_, intIdServicio_p, monCostoServ_p, intIdTipServ_p, Simb_) {
    validarSession()//AÑADIDO 07.04.2021
    var _intIdServicio = intIdServicio_p;
    var _intIdAsistencia = $('#lbl_intIdAsistencia').text();
    var _intCantidad = 1
    var _strObservacion = '';

    var CONSUMO_OBJ = {
        intIdServicio: _intIdServicio      //52
        , intIdAsistencia: _intIdAsistencia  //12
        , intCantidad: _intCantidad          //2
        , strObservacion: _strObservacion    //Ya se esta controlando en el sp 
    }

    var servicio_seleccionado = $(this_).parents('tr').find('td').eq(1).text();
    var menu_seleccionado = $(this_).parents('tr').find('td').eq(2).text();

    swal({

        title: servicio_seleccionado.toUpperCase() + ' ' + menu_seleccionado.toUpperCase(),
        text: "¿Está seguro de Agregar el Consumo del Servicio Seleccionado?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Registrar",
        cancelButtonText: "Cancelar",
        allowOutsideClick: false, //añadido 25/03/2021
    }).then(function (isConfirm) {

        if (isConfirm) {
            var SesionMovi = {
                IntIdMenu: 'M0314',
                intIdUsuario: idUsuar,
                intIdSoft: idSoftw,
                intIdSesion: intIdSe
            }

            $.post(
                '/Personal/RegistrarTomaConsumo',
                { ObjConsumo: CONSUMO_OBJ, objSession: SesionMovi, intTipoOperacion: 1, tipo: 'S', bitTodosTS: bitTodosTS_ },
                //{ ObjConsumo: CONSUMO_OBJ, objSession: SesionMovi, intTipoOperacion: 1, tipo: 'S'},
                (response) => {

                    var longitudMsg = response.message.length;
                    var Indice = response.message.indexOf("|");    // indice inicial es 0
                    var Longitud = (longitudMsg - Indice) * (-1)
                    var response_Valida = parseInt(response.message.slice(Longitud + 1));

                    $('#lblintValida').empty();
                    $('#lblintValida').append(response_Valida);

                    //Actualizando el contador
                    $('#lblintCantMaxConsumo').empty();
                    $('#lblintCantMaxConsumo').append(response_Valida);


                    if (response.type !== '') {
                        if (response.type === 'success') {
                            var responseMessage = response.message.slice(-0, Longitud);
                            var mensaje_ = responseMessage + ' <input type="checkbox" checked="checked" style="border: none; pointer-events: none; background: transparent; outline: none !important;" >';

                            swal({
                                title: servicio_seleccionado.toUpperCase() + ' ' + menu_seleccionado.toUpperCase(),
                                text: mensaje_,
                            });

                            $('#btn-seleccionar-insertar-toma-consumo').prop('disabled', true); // $("#step-two").prop("disabled", true)
                            $('#btn-cancelar-toma-consumo-comensal').prop('disabled', false);
                            $('#btn-salir-toma-consumo-comensal').prop('disabled', false);

                            ////////CUANDO EL COMENSAL YA REGISTRÓ LO SELECCIONADO  //jueves11.03.21 comentado
                            var btn = document.createElement("button");
                            var y = document.createTextNode("REGISTRADO");
                            btn.style.color = '#fff';
                            btn.disabled;
                            btn.style.background = "#1abb9c";
                            btn.appendChild(y);
                            btn.className = 'btn_registrado';

                            //Arreglo "Selec" de uso interno
                            //----------------------------------------------------
                            console.log(Selec);
                            var Cont = 1;
                            //Primero buscamos si en el arreglo no existe el mismo servicio:
                            const FuncionArray = (element) => element.IntId1 === _intIdServicio; var index = Selec.findIndex(FuncionArray);
                            console.log(index);

                            if (index > -1) {
                                function es(f) { return f.IntId1 === _intIdServicio; }
                                console.log(Selec.find(es).Contador);
                                Cont = Selec.find(es).Contador + 1
                                Selec.splice(index, 1)//RETIRA EL ITEM DEL ARRAY
                            }

                            // Añadir Servicio Seleccionado al arreglo
                            class General {
                                constructor(IntId1, Contador) {
                                    this.IntId1 = IntId1 //almacena el IdEmpresa
                                    this.Contador = Contador //Descripcion de la Empresa
                                }
                            }
                            //if (Cont>1)
                            Selec.push({ IntId1: _intIdServicio, Contador: Cont })
                            console.log(Selec);

                            //Utilizando una funcion para deshabilitar todos los botones 'Seleccionar':
                            deshabilitarBtnSelecionar(_intIdServicio, this_, response_Valida, 1)

                            //Carrito Servicios 20.03.2021
                            var Cantidad = parseInt(CantTotalS);
                            var Total = 0;

                            Cantidad += 1;
                            Total = parseFloat(monCostoServ_p) + parseFloat(TotalS);

                            CantTotalS = Cantidad;
                            TotalS = parseFloat(Total).toFixed(2);

                            $('#lblCantServ').empty();
                            $('#SplblCantServ').empty();

                            if (Cantidad == 1) {
                                $('#lblCantServ').append(CantTotalS.toString() + " Servicio Agregado");
                            } else {
                                $('#lblCantServ').append(CantTotalS.toString() + " Servicios Agregados");
                            }

                            $('#SplblCantServ').append(CantTotalS.toString());
                            $('#lblTotalServ').empty();
                            $('#lblTotalServ').append(Simb_ + " " + TotalS.toString());

                            //Actualizar el Máximo de Consumo 20.03.2021
                            var UltMax = parseInt($('#lblintCantMaxConsumo').text()) - 1;
                            //$('#lblintCantMaxConsumo').empty();//COMENTADO 07.04.2021
                            //$('#lblintCantMaxConsumo').append(UltMax);//COMENTADO 07.04.2021

                            //Ampliar Tiempo de Cierre.
                            Reloj(); //añadido 29.03.2021 y comentadas las lineas inferiores

                        } else {  //Cuando el servicio ya no esta disponible: se terminó ese menú,
                            if (response.type === 'error') {
                                var mensaje_ = '<span style="color:#00c292; font-weight: bold; font-size:16px;">' + response.message + '</span>';
                                swal({
                                    title: servicio_seleccionado.toUpperCase() + ' ' + menu_seleccionado.toUpperCase(),
                                    text: mensaje_,
                                });
                            } else { }
                        }
                    }
                }).fail(function (result) {
                    alert('ERROR ' + result.status + ' ' + result.statusText);
                });
        } else {
            swal("Cancelled", "", "error");
        }
    });
}

function fnAgregarComplemento(this_, intIdServicio_p, monCostoServ_p, Simb_) {
    validarSession()//AÑADIDO 07.04.2021
    var _intIdServicio = intIdServicio_p;
    var _intIdAsistencia = $('#lbl_intIdAsistencia').text();
    var _intCantidad = 1
    var _strObservacion = '';

    var CONSUMO_OBJ = {
        intIdServicio: _intIdServicio      //52
        , intIdAsistencia: _intIdAsistencia  //12
        , intCantidad: _intCantidad          //2
        , strObservacion: _strObservacion    //Ya se esta controlando en el sp 
    }

    var servicio_seleccionado = $(this_).parents('tr').find('td').eq(1).text();
    var menu_seleccionado = $(this_).parents('tr').find('td').eq(2).text();

    swal({

        title: servicio_seleccionado.toUpperCase() + ' ' + menu_seleccionado.toUpperCase(),
        text: "¿Está seguro de Añadir el Complemento Seleccionado?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Registrar",
        cancelButtonText: "Cancelar",
        allowOutsideClick: false, //añadido 25/03/2021
    }).then(function (isConfirm) {
        if (isConfirm) {
            var SesionMovi = {
                IntIdMenu: 'M0314',
                intIdUsuario: idUsuar,
                intIdSoft: idSoftw,
                intIdSesion: intIdSe
            }

            $.post(
                '/Personal/RegistrarTomaConsumo',
                { ObjConsumo: CONSUMO_OBJ, objSession: SesionMovi, intTipoOperacion: 1, tipo: 'C', bitTodosTS: bitTodosTS_ },
                (response) => {
                    //var response_Valida = parseInt(response.message.slice(-1));
                    var longitudMsg = response.message.length;
                    var Indice = response.message.indexOf("|");    // indice inicial es 0
                    var Longitud = (longitudMsg - Indice) * (-1)
                    var response_Valida = parseInt(response.message.slice(Longitud + 1));

                    $('#lblintValida').empty();
                    $('#lblintValida').append(response_Valida);
                    //Los complementos no actualizan el Contador lblintCantMaxConsumo

                    if (response.type !== '') {
                        if (response.type === 'success') {
                            //var responseMessage = response.message.slice(-0, -2);
                            var responseMessage = response.message.slice(-0, Longitud);

                            var mensaje_ = responseMessage + ' <input type="checkbox" checked="checked" style="border: none; pointer-events: none; background: transparent; outline: none !important;" >';
                            swal({
                                title: servicio_seleccionado.toUpperCase() + ' ' + menu_seleccionado.toUpperCase(),
                                text: mensaje_,
                            });

                            $('#btn-seleccionar-insertar-toma-consumo').prop('disabled', true); // $("#step-two").prop("disabled", true)
                            $('#btn-cancelar-toma-consumo-comensal').prop('disabled', false);
                            $('#btn-salir-toma-consumo-comensal').prop('disabled', false);

                            ////////CUANDO EL COMENSAL YA REGISTRÓ LO SELECCIONADO  //jueves11.03.21 comentado
                            var btn = document.createElement("button");
                            var y = document.createTextNode("REGISTRADO");
                            btn.style.color = '#fff';
                            btn.disabled;
                            btn.style.background = "#1abb9c";
                            btn.appendChild(y);
                            btn.className = 'btn_registrado';

                            //Arreglo "Selec" de uso interno
                            //----------------------------------------------------
                            console.log(SelecSC);
                            var Cont = 1;
                            //Primero buscamos si en el arreglo no existe el mismo servicio:
                            const FuncionArray = (element) => element.IntId1 === _intIdServicio; var index = SelecSC.findIndex(FuncionArray);
                            console.log(index);

                            if (index > -1) {
                                function es(f) { return f.IntId1 === _intIdServicio; }
                                console.log(SelecSC.find(es).Contador);
                                Cont = SelecSC.find(es).Contador + 1
                                SelecSC.splice(index, 1)//RETIRA EL ITEM DEL ARRAY
                            }

                            // Añadir Servicio Seleccionado al arreglo
                            class General {
                                constructor(IntId1, Contador) {
                                    this.IntId1 = IntId1 //almacena el IdEmpresa
                                    this.Contador = Contador //Descripcion de la Empresa
                                }
                            }
                            //if (Cont>1)
                            SelecSC.push({ IntId1: _intIdServicio, Contador: Cont })
                            console.log(SelecSC);

                            //Utilizando una funcion para deshabilitar todos los botones 'Agregar':
                            deshabilitarBtnAgregarSC(_intIdServicio, this_, response_Valida, 1)

                            //Carrito Complementarios 20.03.2021
                            var Cantidad = parseInt(CantTotalSC);
                            var Total = 0;

                            Cantidad += 1;
                            Total = parseFloat(monCostoServ_p) + parseFloat(TotalSC);

                            CantTotalSC = Cantidad;
                            TotalSC = parseFloat(Total).toFixed(2);

                            $('#lblCantServC').empty();
                            $('#SplblCantServC').empty();

                            if (Cantidad == 1) {
                                $('#lblCantServC').append(CantTotalSC.toString() + " Complemento Añadido");
                            } else {
                                $('#lblCantServC').append(CantTotalSC.toString() + " Complementos Añadidos");
                            }

                            $('#SplblCantServC').append(CantTotalSC.toString());
                            $('#lblTotalServC').empty();
                            $('#lblTotalServC').append(Simb_ + " " + TotalSC.toString());

                            //Ampliar Tiempo de Cierre.
                            Reloj(); //añadido 29.03.2021 y comentadas las lineas inferiores

                        } else {  //Cuando el servicio ya no esta disponible: se terminó ese menú,
                            if (response.type === 'error') {
                                var mensaje_ = '<span style="color:#00c292; font-weight: bold; font-size:16px;">' + response.message + '</span>';

                                swal({
                                    title: servicio_seleccionado.toUpperCase() + ' ' + menu_seleccionado.toUpperCase(),
                                    text: mensaje_,
                                });

                            } else { }

                        }

                    }
                }).fail(function (result) {
                    alert('ERROR ' + result.status + ' ' + result.statusText);
                });
        }
        else {
            swal("Cancelled", "", "error");
        }
    });
}

//===============================================================================================
//=============================== BOTON ANULAR(eliminar) un Servicio Registrado ================= eliminar toma de consumo
//===============================================================================================
function BotonDeshacerServicioRegistrado(this_, intIdServicio_a, monCostoServ_p, Simb_) {
    validarSession()//AÑADIDO 07.04.2021
    swal({
        title: "Anular Consumo",
        text: "¿Está Seguro que desea Quitar el Servicio Consumido?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí",
        cancelButtonText: "No",
        allowOutsideClick: false, //añadido 25/03/2021
        //closeOnClickOutside: false,//añadido 25/03/2021
        //closeOnEsc: false,//añadido 25/03/2021
    }).then(function (isConfirm) {
        if (isConfirm) {
            var intIdAsistencia_ = $('#lbl_intIdAsistencia').text();
            var intIdServicio_ = intIdServicio_a;

            var SesionMovi = {
                IntIdMenu: 'M0314',
                intIdUsuario: idUsuar,
                intIdSoft: idSoftw,
                intIdSesion: intIdSe
            }

            $.post(
                '/Personal/EliminarAnularServicioRegistrado',//EliminarTomaConsumo
                { objSession: SesionMovi, intIdAsistencia: intIdAsistencia_, intIdServicio: intIdServicio_, tipo: 'S' },
                (response) => {
                    //jueves11.03 HG
                    // var response_valida = parseInt(response.message.slice(-1));
                    // var responseMessage = response.message.slice(-0, -2);

                    var longitudMsg = response.message.length;
                    var Indice = response.message.indexOf("|");    // indice inicial es 0
                    var Longitud = (longitudMsg - Indice) * (-1)
                    var response_Valida = parseInt(response.message.slice(Longitud + 1));
                    var responseMessage = response.message.slice(-0, Longitud);

                    //Actualizando el contador
                    $('#lblintCantMaxConsumo').empty();
                    $('#lblintCantMaxConsumo').append(response_Valida);

                    if (response.type !== '') {
                        var tipo = 'ANULADO';

                        //REGISTRO NO SE PUDO ELIMINAR
                        if (response.type === 'error') {
                            tipo = 'CONSUMO NO ANULABLE';

                            //Primero buscamos si en el arreglo no existe el mismo servicio:
                            const FuncionArray = (element) => element.IntId1 === intIdServicio_a;
                            var index = Selec.findIndex(FuncionArray);

                            if (index > -1) {
                                function es(f) { return f.IntId1 === intIdServicio_a; }
                                Cont = 0
                                Selec.splice(index, 1)//RETIRA EL ITEM DEL ARRAY
                            }

                            //QUITAR EL BOTÓN ANULAR Y COLOCAR UN ESTADO
                            deshabilitarBtnAnular(this_, intIdServicio_a, Cont);
                            habEstadoAtendido(this_, intIdServicio_a, Cont);
                        }
                        else if (response.type === 'success') {
                            //Arreglo "Selec" de uso interno
                            //----------------------------------------------------
                            console.log(Selec);
                            var Cont = 1;
                            //Primero buscamos si en el arreglo no existe el mismo servicio:
                            const FuncionArray = (element) => element.IntId1 === intIdServicio_a;
                            var index = Selec.findIndex(FuncionArray);
                            console.log(index);

                            if (index > -1) {
                                function es(f) { return f.IntId1 === intIdServicio_a; }
                                console.log(Selec.find(es).Contador);
                                Cont = Selec.find(es).Contador - 1
                                Selec.splice(index, 1)//RETIRA EL ITEM DEL ARRAY
                            }

                            if (Cont > 0) {
                                // Añadir Servicio Seleccionado al arreglo pero reducido en una unidad.
                                class General {
                                    constructor(IntId1, Contador) {
                                        this.IntId1 = IntId1 //almacena el IdEmpresa
                                        this.Contador = Contador //Descripcion de la Empresa
                                    }
                                }
                                //if (Cont>1)
                                Selec.push({ IntId1: intIdServicio_a, Contador: Cont })
                                console.log(Selec);
                            } else {
                                deshabilitarBtnAnular(this_, intIdServicio_a, Cont);
                            }

                            deshabilitarBtnSelecionar(intIdServicio_a, this_, response_Valida, 0)

                            //Carrito Servicios 20.03.2021
                            var Cantidad = parseInt(CantTotalS);
                            var Total = 0;

                            Cantidad -= 1;
                            Total = parseFloat(TotalS) - parseFloat(monCostoServ_p);

                            if (Cantidad < 0) {
                                CantTotalS = ""; //para no permitir negativos
                                TotalS = "";//para no permitir negativos
                            } else {
                                CantTotalS = Cantidad;
                                TotalS = parseFloat(Total).toFixed(2);
                            }

                            $('#lblCantServ').empty();
                            $('#SplblCantServ').empty();

                            if (CantTotalS == "") {
                                $('#lblCantServ').append("");
                                $('#SplblCantServ').append("");
                            } else {

                                if (Cantidad == 1) {
                                    $('#lblCantServ').append(CantTotalS.toString() + " Servicio Agrgado");
                                } else {
                                    $('#lblCantServ').append(CantTotalS.toString() + " Servicios Agregados");
                                }

                                $('#SplblCantServ').append(CantTotalS.toString());
                            }

                            $('#lblTotalServ').empty();
                            $('#lblTotalServ').append(Simb_ + " " + TotalS.toString());

                            //Actualizar el Máximo de Consumo 20.03.2021
                            var UltMax = parseInt($('#lblintCantMaxConsumo').text()) + 1;
                            //$('#lblintCantMaxConsumo').empty(); //COMENTADO 07.04.2021
                            //$('#lblintCantMaxConsumo').append(UltMax);//COMENTADO 07.04.2021

                            //Ampliar Tiempo de Cierre.
                            Reloj(); //añadido 29.03.2021 y comentadas las lineas inferiores
                            //$('#start').click();
                            //$('#reset').click();
                        }
                        swal(tipo, responseMessage, response.type);
                    }
                }
            ).fail(function (result) {
                alert('ERROR ' + result.status + ' ' + result.statusText);
            });

        } else {
            //swal("Cancelado", "La Operación fue cancelada", "error");
        }
    });
}

function fnAnularComplemento(this_, intIdServicio_a, monCostoServ_p, Simb_) {
    validarSession()//AÑADIDO 07.04.2021
    swal({
        title: "Anular Consumo",
        text: "¿Está Seguro que desea Quitar el Complemento?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí",
        cancelButtonText: "No",
        allowOutsideClick: false, //añadido 25/03/2021
    }).then(function (isConfirm) {
        if (isConfirm) {
            var intIdAsistencia_ = $('#lbl_intIdAsistencia').text();
            var intIdServicio_ = intIdServicio_a;

            var SesionMovi = {
                IntIdMenu: 'M0314',
                intIdUsuario: idUsuar,
                intIdSoft: idSoftw,
                intIdSesion: intIdSe
            }

            $.post(
                '/Personal/EliminarAnularServicioRegistrado',//EliminarTomaConsumo
                { objSession: SesionMovi, intIdAsistencia: intIdAsistencia_, intIdServicio: intIdServicio_, tipo: 'C' },
                (response) => {
                    //var response_valida = parseInt(response.message.slice(-1));
                    //var responseMessage = response.message.slice(-0, -2);
                    var longitudMsg = response.message.length;
                    var Indice = response.message.indexOf("|");    // indice inicial es 0
                    var Longitud = (longitudMsg - Indice) * (-1)
                    var response_Valida = parseInt(response.message.slice(Longitud + 1));
                    var responseMessage = response.message.slice(-0, Longitud);

                    if (response.type !== '') {
                        var tipo = 'ANULADO';

                        //REGISTRO NO SE PUDO ELIMINAR
                        if (response.type === 'error') {
                            tipo = 'CONSUMO NO ANULABLE';

                            //Primero buscamos si en el arreglo no existe el mismo servicio:
                            const FuncionArray = (element) => element.IntId1 === intIdServicio_a;
                            var index = SelecSC.findIndex(FuncionArray);

                            if (index > -1) {
                                function es(f) { return f.IntId1 === intIdServicio_a; }
                                Cont = 0
                                SelecSC.splice(index, 1)//RETIRA EL ITEM DEL ARRAY
                            }

                            //QUITAR EL BOTÓN ANULAR Y COLOCAR UN ESTADO
                            deshabilitarBtnAnularSC(this_, intIdServicio_a, Cont);
                            habEstadoAtendido(this_, intIdServicio_a, Cont);//26.03.2021

                        }
                        else if (response.type === 'success') {
                            //var responseMessage = response.message.slice(-0, -2);//COMENTADO 07.04.2021

                            //Arreglo "Selec" de uso interno
                            //----------------------------------------------------
                            console.log(SelecSC);
                            var Cont = 1;
                            //Primero buscamos si en el arreglo no existe el mismo servicio:
                            const FuncionArray = (element) => element.IntId1 === intIdServicio_a;
                            var index = SelecSC.findIndex(FuncionArray);
                            console.log(index);

                            if (index > -1) {
                                function es(f) { return f.IntId1 === intIdServicio_a; }
                                console.log(SelecSC.find(es).Contador);
                                Cont = SelecSC.find(es).Contador - 1
                                SelecSC.splice(index, 1)//RETIRA EL ITEM DEL ARRAY
                            }

                            if (Cont > 0) {
                                // Añadir Servicio Seleccionado al arreglo pero reducido en una unidad.
                                class General {
                                    constructor(IntId1, Contador) {
                                        this.IntId1 = IntId1 //almacena el IdEmpresa
                                        this.Contador = Contador //Descripcion de la Empresa
                                    }
                                }
                                //if (Cont>1)
                                SelecSC.push({ IntId1: intIdServicio_a, Contador: Cont })
                                console.log(SelecSC);
                            } else {
                                deshabilitarBtnAnularSC(this_, intIdServicio_a, Cont);
                            }

                            deshabilitarBtnAgregarSC(intIdServicio_a, this_, response_Valida, 0)

                            //Carrito Complementos 20.03.2021
                            var Cantidad = parseInt(CantTotalSC);
                            var Total = 0;

                            Cantidad -= 1;
                            Total = parseFloat(TotalSC) - parseFloat(monCostoServ_p);

                            if (Cantidad < 0) {
                                CantTotalSC = ""; //para no permitir negativos
                                TotalSC = "";//para no permitir negativos
                            } else {
                                CantTotalSC = Cantidad;
                                TotalSC = parseFloat(Total).toFixed(2);
                            }

                            $('#lblCantServC').empty();
                            $('#SplblCantServC').empty();

                            if (CantTotalSC == "") {
                                $('#lblCantServC').append("");
                                $('#SplblCantServC').append("");
                            } else {

                                if (Cantidad == 1) {
                                    $('#lblCantServC').append(CantTotalSC.toString() + " Complemento Añadido");
                                } else {
                                    $('#lblCantServC').append(CantTotalSC.toString() + " Complementos Añadidos");
                                }

                                $('#SplblCantServC').append(CantTotalSC.toString());
                            }
                            $('#lblTotalServC').empty();
                            $('#lblTotalServC').append(Simb_ + " " + TotalSC.toString());

                            //Ampliar Tiempo de Cierre.
                            Reloj(); //añadido 29.03.2021 y comentadas las lineas inferiores
                            //$('#start').click();
                            //$('#reset').click();
                        }

                        swal(tipo, responseMessage, response.type);

                    }
                }
            ).fail(function (result) {
                alert('ERROR ' + result.status + ' ' + result.statusText);
            });

        } else {

            //swal("Cancelado", "La Operación fue cancelada", "error");
            //AQUI SE DEBERIA LLAMAR A LA PANTALLA MODO ESPERA
        }

    });

}

//#endregion TOMA DE CONSMO - COMEDOR



/**------------------------------------------------------*//*ln_37945_all*/
/**30. Mantenimiento Gestión de Consumos (desde sisfood) */
/**------------------------------------------------------*//*ln_00000_all*/
/*================================================================================================
============================ MANTENIMIENTO GESTION DE CONSUMO ====================================
==================================================================================================
*/
//#region MANT. GESTION DE CONSUMO
var ConfiImpr;
var _varTablaGestionConsumo;

function getDateRangePickerConsumo() {
    const idRange = ".rangedatepickergeneral";
    const fechaInicio = $(idRange).data('daterangepicker').startDate.format('DD/MM/YYYY');
    const fechaFin = $(idRange).data('daterangepicker').endDate.format('DD/MM/YYYY');
    return { fInicio: fechaInicio, fFin: fechaFin }
}

//FILTRO RANGO DE FECHAS
$('.rangedatepickergeneral').on('apply.daterangepicker', function (ev, picker) {
    const date = getDateRangePickerConsumo();
    TablaGestionConsumo(date.fInicio, date.fFin)
});

function CombosFiltros() {
    validarSession();//AÑADIDO 22.04.2021 HG
    //---------------------------COMBO EMPRESA 01
    $.post(
        '/Personal/ListarCombosPersonal_',
        { strEntidad: 'TGPERSONAL', intIdFiltroGrupo: 0, strGrupo: 'EMPRESA', strSubGrupo: '' }, //modificado 22.03.2021
        (response) => {
            $('#intIdEmpCombo').empty();
            $('#intIdEmpCombo').append('<option value="0" selected>Todos</option>');

            response.forEach(element => {
                $('#intIdEmpCombo').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
            });
        });

    //---------------------------COMBO TIPO SERVICIO(Desayuno, Almuerzo, Cena)
    $.post(
        '/Personal/ListarCombosPersonal_',
        { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'COMEDOR_FILTRO', strSubGrupo: 'TIPOSERV' }, // HG 13.03.21 //modificado 12.04.2021
        (response) => {
            $('#intTipoServCombo').empty();
            $('#intTipoServCombo').append('<option value="0">Todos</option>');
            response.forEach(element => {
                $('#intTipoServCombo').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

            });

        });

    //Configuración de Impresión
    var SesionMovi = {
        IntIdMenu: 'M0305',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }

    $.post(
        '/Personal/GetTSConfi',
        {
            objSession: SesionMovi,
            strCoConfi: 'HAB_IMPR_TICKET_COMEDOR',
        },
        response => {
            ConfiImpr = response.strValorConfi;
            //RESULTADO: El valor está expresado en Si=1 y No=0.
        })
}

//FILTRO INPUT BUSCAR
$('#strDesInput').keyup(function () {
    ejecutarTablaConParamFechas();
});

//FILTRO ESTADO
$('#boolEstadoCombo').on('change', function () {
    ejecutarTablaConParamFechas();
});

//FILTRO SERVICIOS
$('#intTipoServCombo').on('change', function () {
    ejecutarTablaConParamFechas();
});

//FILTRO MENU
$('#intClaseCombo').on('change', function () {
    ejecutarTablaConParamFechas();
});

//FILTRO EMPRESA
$('#intIdEmpCombo').on('change', function () {
    ejecutarTablaConParamFechas();
});

//FILTRO MARCADOR
$('#intMarcadorCombo').on('change', function () {
    ejecutarTablaConParamFechas();
});

//===============================================================================================
//=================================== FUNCION TablaGestionConsumos() ============================
//===============================================================================================

//let dataCheck = [];
let dataConsumoGlobal; //añadido 09.04.2021
let dataConsumoGlobal_tmp;
var responseFiltrado;
function TablaGestionConsumo(filtrojer_ini_var = null, filtrojer_fin_var = null) {
    validarSession();//AÑADIDO 22.04.2021 HG
    var SesionMovi = {
        IntIdMenu: 'M0315',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }
    let filtroFech_ini = filtrojer_ini_var ? filtrojer_ini_var : null;//filtro_ini ? filtro_ini : null;
    let filtroFech_fin = filtrojer_fin_var ? filtrojer_fin_var : null;//filtro_fin ? filtro_fin : null;
    var descipcionFiltro = $('#strDesInput').val();
    var boolEstadoFiltro = $('#boolEstadoCombo  option:selected').val(); //FILRO ESTADO
    var intTipoServFiltro = $('#intTipoServCombo option:selected').val(); //FILRO TIPO SERVICIO
    //var intTipoMenuFiltro = $('#intTipoMenuCombo option:selected').val(); //FILRO TIPO MENU
    var intTipoMenuFiltro = $('#intClaseCombo option:selected').val(); //FILTRO CLASE DE SERVICIO
    var intIdEmpFiltro = $('#intIdEmpCombo    option:selected').val(); //FILRO EMPRESA
    var intIdMarFiltro = $('#intMarcadorCombo option:selected').val(); //FILRO MARCADOR 

    $.post(
        '/Personal/GetTablaGestionConsumo',
        {
            objSession: SesionMovi,
            dttFiltroFchI: filtroFech_ini,
            dttFiltroFchF: filtroFech_fin,
            strDescripcion: descipcionFiltro,
            intConsumido: boolEstadoFiltro,
            intTipoServ: intTipoServFiltro,
            intTipoMenu: intTipoMenuFiltro,
            IntIdEmp: intIdEmpFiltro,
            intIdMarcador: intIdMarFiltro
        },
        (response) => {

            responseFiltrado = [];
            responseFiltrado = response.filter(function (e) {
                return e.bitFlConsumido == 0;
            });

            //dataConsumoGlobal = responseFiltrado;
            dataConsumoGlobal_tmp = response;

            if (typeof _varTablaGestionConsumo !== 'undefined') {
                _varTablaGestionConsumo.destroy();
            }
            _varTablaGestionConsumo = $('#tabla-gestion-consumo').DataTable({
                data: response,
                columns: [
                    {
                        sortable: false,
                        "render": (data, type, item, meta) => {

                            let intIdConsumo = item.intIdConsumo;
                            let bitFlConsumido = item.bitFlConsumido;

                            if (bitFlConsumido == 0) {
                                return `<input type="checkbox" 
                                           class="ClassChecksSolicitados"  
                                           id="Chck${intIdConsumo}"
                                           data_intId="${intIdConsumo}"
                                           data_bit="${bitFlConsumido}" 
                                           onChange="CheckedItemDeTablaConsumo(${intIdConsumo}, ${bitFlConsumido})"                                           
                                        >`;
                            }

                            if (bitFlConsumido == 1 || bitFlConsumido == 2) {
                                return '<span class="ClassChecksConsumidos"   ></span>';
                            }
                        }
                    },
                    {
                        data: 'strFotocheck',
                        "render": (data, type, item, meta) => {
                            let intIdConsumo = item.intIdConsumo;
                            let imgFoto = item.imgFoto;
                            return `<span onclick = 'mostrarDatosEnModal(this,"${intIdConsumo}", "${imgFoto}")' style="background-color:transparent;white-space: nowrap; width: 99%;text-align: justify; padding:11px 15px 11px 15px;  " dataidServ= "${intIdConsumo}" >` + data + `</span>`;
                        }
                    },
                    {
                        data: 'strNombresCompletos',
                        "render": (data, type, item, meta) => {
                            let intIdConsumo = item.intIdConsumo;
                            let imgFoto = item.imgFoto;
                            return `<span onclick = 'mostrarDatosEnModal(this,"${intIdConsumo}", "${imgFoto}")' style="background-color:transparent;white-space: nowrap; width: 99%;text-align: justify; padding:11px 15px 11px 15px;  " dataidServ= "${intIdConsumo}" >` + data + `</span>`;
                        }
                    },
                    {
                        data: 'strNumDoc',
                        "render": (data, type, item, meta) => {
                            let intIdConsumo = item.intIdConsumo;
                            let imgFoto = item.imgFoto;
                            return `<span onclick = 'mostrarDatosEnModal(this,"${intIdConsumo}", "${imgFoto}")' style="background-color:transparent;white-space: nowrap; width: 99%;text-align: justify; padding:11px 15px 11px 15px;  " dataidServ= "${intIdConsumo}" >` + data + `</span>`;
                        }
                    },
                    {
                        data: 'strDescripcion',
                        "render": (data, type, item, meta) => {
                            let intIdConsumo = item.intIdConsumo;
                            let imgFoto = item.imgFoto;
                            return `<span onclick = 'mostrarDatosEnModal(this,"${intIdConsumo}", "${imgFoto}")' style="background-color:transparent;white-space: nowrap; width: 99%;text-align: justify; padding:11px 15px 11px 15px;  " dataidServ= "${intIdConsumo}" >` + data + `</span>`;
                        }
                    }, // TIPO SERVICIO
                    {
                        data: 'strCantidad', //'strDesTipMenu'
                        "render": (data, type, item, meta) => {
                            let intIdConsumo = item.intIdConsumo;
                            let imgFoto = item.imgFoto;
                            let data_ = data //.slice(0,3);
                            return `<span onclick    = 'mostrarDatosEnModal(this,"${intIdConsumo}", "${imgFoto}")' 
                                          style      = "background-color:transparent;white-space: nowrap; width: 99%;text-align: justify; padding:11px 15px 11px 15px;" 
                                          dataidServ = "${intIdConsumo}" >` + data_ + `</span>`;
                        }
                    }, // TIPO MENU
                    {
                        data: 'bitFlConsumido',
                        "render": (data, type, item, meta) => {
                            let intIdConsumo = item.intIdConsumo;
                            let imgFoto = item.imgFoto;
                            if (data == 0) {
                                return `<center><span onclick    = 'mostrarDatosEnModal(this,"${intIdConsumo}", "${imgFoto}")' class="badge bg-orange" dataidServ = "${intIdConsumo}" >SOLICITADO</span></center>`;
                            }

                            if (data == 1) {
                                return `<center><span onclick    = 'mostrarDatosEnModal(this,"${intIdConsumo}", "${imgFoto}")' class="badge bg-green" dataidServ = "${intIdConsumo}" >CONSUMIDO</span></center>`;
                            }
                            if (data == 2) {
                                return `<center><span onclick    = 'mostrarDatosEnModal(this,"${intIdConsumo}", "${imgFoto}")' class="badge bg-red" dataidServ = "${intIdConsumo}" >ANULADO</span></center>`;
                            }
                        }
                    },
                    {
                        data: 'dttFechaHora',
                        "render": (data, type, item, meta) => {
                            let intIdConsumo = item.intIdConsumo;
                            let imgFoto = item.imgFoto;

                            let fecha_en_YYYYMMDD = data.slice(0, 10); //llega como: '2017-01-10';
                            let hh_mm_ss = data.slice(11, 19);
                            let fecha_en_DDMMYYYY = convertDateFormat(fecha_en_YYYYMMDD); //se invierte a: '10-01-2017';
                            function convertDateFormat(string) {
                                var info = string.split('-');
                                return info[2] + '-' + info[1] + '-' + info[0];//Se mantiene los guiones
                            }
                            return `<span onclick    = 'mostrarDatosEnModal(this,"${intIdConsumo}", "${imgFoto}")' 
                                          style      = "background-color:transparent;white-space: nowrap; width: 99%;text-align: justify; padding:11px 15px 11px 15px;" 
                                          dataidServ = "${intIdConsumo}" >` + fecha_en_DDMMYYYY + ' ' + hh_mm_ss + `</span>`;//data
                        }
                    }, // FECHA Y HORA(Marca)
                    {
                        data: 'strDesEmp',
                        "render": (data, type, item, meta) => {
                            let intIdConsumo = item.intIdConsumo;
                            let imgFoto = item.imgFoto;
                            return `<span onclick    = 'mostrarDatosEnModal(this,"${intIdConsumo}", "${imgFoto}")' 
                                          style      = "background-color:transparent;white-space: nowrap; width: 99%;text-align: justify; padding:11px 15px 11px 15px;" 
                                          dataidServ = "${intIdConsumo}" >` + data + `</span>`;
                        }
                    }, // EMPRESA
                    {
                        data: 'strDesMarcador',
                        "render": (data, type, item, meta) => {
                            let intIdConsumo = item.intIdConsumo;
                            let imgFoto = item.imgFoto;
                            return `<span onclick    = 'mostrarDatosEnModal(this,"${intIdConsumo}", "${imgFoto}")' 
                                          style      = "background-color:transparent;white-space: nowrap; width: 99%;text-align: justify; padding:11px 15px 11px 15px;" 
                                          dataidServ = "${intIdConsumo}" >` + data + `</span>`;
                        }
                    },
                    {
                        sortable: false,
                        "render": (data, type, item, meta) => {
                            let intIdAsistencia = item.intIdConsumo;
                            let bitFlConsumido = item.bitFlConsumido;
                            let cant = item.intCantidad;
                            let strNombre = '';
                            if (bitFlConsumido == 0) {
                                return `<button class="btn btn-primary btn-xs btn-atender" dataid="${intIdAsistencia}" des_data="${strNombre}" data="${item}" ><i class="fa fa-check"></i> Atender </button>
                                        <button class="btn btn-danger btn-xs btn-anular"  dataid="${intIdAsistencia}" des_data="${strNombre}" data="${item}" ><i class="fa fa-trash-o"></i> Anular </button>`;
                            }
                            if (bitFlConsumido == 1) {
                                return `<button class="btn btn-primary btn-xs btn-atender" dataid="${intIdAsistencia}" des_data="${strNombre}" data="${item}" disabled="true"><i class="fa fa-check"></i> Atender </button>
                                        <button class="btn btn-danger btn-xs btn-anular"  dataid="${intIdAsistencia}" des_data="${strNombre}" data="${item}" ><i class="fa fa-trash-o"></i> Anular </button> `;
                            }
                            if (bitFlConsumido == 2) {
                                return `<button class="btn btn-primary btn-xs btn-atender" dataid="${intIdAsistencia}" des_data="${strNombre}" data="${item}" disabled="true"><i class="fa fa-check"></i> Atender </button>
                                        <button class="btn btn-danger btn-xs btn-anular"  dataid="${intIdAsistencia}" des_data="${strNombre}" data="${item}" disabled="true"><i class="fa fa-trash-o"></i> Anular </button> `;
                            }
                        }
                    },
                    { data: 'imgFoto' }  // No se visualizará. Esta como string y solo se usa como ruta
                    ,
                    { data: 'strHorarioAtencion' }  // No se visualizará. AÑADIDO 07.04.2021
                ],

                lengthMenu: [10, 25, 50],
                order: [],//Ordenar esta columna  //order: [1, 'asc'],
                responsive: true,
                language: _datatableLanguaje,
                columnDefs: [
                    {
                        targets: [11],//14
                        visible: false,
                        searchable: true
                    },
                ],
                dom: 'lBfrtip',
            });

            var table = $('#tabla-gestion-consumo').DataTable();
            $('#tabla-gestion-consumo tbody').on('click', 'tr', function () {

                if ($(this).hasClass('selected')) {
                    $(this).removeClass('selected');
                }
                else {
                    table.$('tr.selected').removeClass('selected');
                    $(this).addClass('selected');
                }

            });

            //Linea necesaria para desckheckear cada vez que se carga la tabla
            $('#select_consumos_TODOS').iCheck('uncheck');

            dataConsumoGlobal = [];
            console.log(response.length);

            if (response.length > 0) {
                $("#select_consumos_TODOS").attr("disabled", false)
            } else { $("#select_consumos_TODOS").attr("disabled", true) }

        });
}

//***************************** SELECCIONAR TODO *********************************************************************
$('#select_consumos_TODOS').on('change', function () {
    validarSession();//AÑADIDO 22.04.2021 HG
    var allPagesGc = _varTablaGestionConsumo.cells().nodes();
    //let all_filter = _varTablaGestionConsumo.cells({ order: 'index', search: 'applied' }).nodes();
    let all_filter_ = _varTablaGestionConsumo.cells({ order: 'index', search: 'applied' }).nodes();
    let all_filter = _varTablaGestionConsumo.cells({ order: 'index', search: 'applied' }).nodes().to$().find(':checkbox');

    console.log("Filas: " + _varTablaGestionConsumo.rows().count());

    if ($('#select_consumos_TODOS').is(':checked')) {
        $('#btn-atencion-masiva').attr('disabled', false);

        dataConsumoGlobal = [];
        all_filter.toArray().forEach(x => {
            let ival = $(x).attr('data_intId');
            dataConsumoGlobal.push({ intIdConsumo: ival })
        })

        $(all_filter_).find('input[type="checkbox"]').prop('checked', true);

        $('#lbl_cantChecksAtender').empty();
        $('#lbl_cantChecksAtender').append('<span>' + dataConsumoGlobal.length + '</span>');

    } else {
        dataConsumoGlobal = []; //Se limpia el array
        $('#btn-atencion-masiva').attr('disabled', true);
        $(allPagesGc).find('input[type="checkbox"]').prop('checked', false);
    }

    console.log(dataConsumoGlobal);
    let total = _varTablaGestionConsumo.rows().nodes().length
    let totalFilter = _varTablaGestionConsumo.rows({ order: 'index', search: 'applied' }).nodes().length
    let select = _varTablaGestionConsumo.rows().nodes().to$().find('input:checked').length
    $("#seleccionados").html(select)

});

//***************************** SELECCIONAR UNO X UNO *********************************************************************
function CheckedItemDeTablaConsumo(intIdConsumo_p, bitFlConsumido_p) {
    validarSession();//AÑADIDO 22.04.2021
    if (dataConsumoGlobal_tmp == null) {
        return false;
    }
    console.log("Filas: " + _varTablaGestionConsumo.rows().count());
    console.log(dataConsumoGlobal.length);

    //--------TABLAS--------------
    var allPagesGc = _varTablaGestionConsumo.cells().nodes();
    let all_filter = _varTablaGestionConsumo.cells({ order: 'index', search: 'applied' }).nodes();

    //---------- FILAS-----------------------------------------------------------------------------------------
    let total = _varTablaGestionConsumo.rows().count()
    let totalFilter = _varTablaGestionConsumo.rows({ order: 'index', search: 'applied' }).count()

    //---------------------------------------------------------------------------------------------------
    //let totalSolicitado = responseFiltrado.length;
    let totalSolicitado = allPagesGc.to$().find(':checkbox').length; //solo checkboxes
    //let chk_ = all_filter.rows().nodes().to$().find('input:checked').length
    //let totalSolicitadoFilter = all_filter.rows().nodes().to$().find(':checkbox').length;
    let totalSolicitadoFilter = all_filter.to$().find(':checkbox').length;//solo checkboxes filtrados
    //---------------------------------------------------------------------------------------------------

    if ($('#Chck' + intIdConsumo_p + '').is(':checked') == true) {
        if (dataConsumoGlobal_tmp.find(e => e.intIdConsumo == intIdConsumo_p)) {
            let position = dataConsumoGlobal_tmp.findIndex(e => e.intIdConsumo == intIdConsumo_p);
            if (!isNaN(position)) {
                dataConsumoGlobal.push(dataConsumoGlobal_tmp[position]);
            }
        }
    } else if ($('#Chck' + intIdConsumo_p + '').is(':checked') == false) {
        if (dataConsumoGlobal.find(e => e.intIdConsumo == intIdConsumo_p)) {
            let position = dataConsumoGlobal.findIndex(e => e.intIdConsumo == intIdConsumo_p);
            if (!isNaN(position)) {
                dataConsumoGlobal.splice(position, 1);
            }
        }
    }
    $('#lbl_cantChecksAtender').empty();
    $('#lbl_cantChecksAtender').append('<span>' + dataConsumoGlobal.length + '</span>');

    if (totalSolicitado === total) {
        //Validar que todos los registros de la tabla tienen checkbox
        if (total === totalFilter) {
            //evaluar check todos
            if (dataConsumoGlobal.length == total) {
                $('#select_consumos_TODOS').prop('checked', true);
            }
            if (dataConsumoGlobal.length == 0) {
                $('#select_consumos_TODOS').prop('checked', false);
            }
        }
        else {
            if (dataConsumoGlobal.length == totalFilter) {
                $('#select_consumos_TODOS').prop('checked', true);
            }
            if (dataConsumoGlobal.length == 0) {
                $('#select_consumos_TODOS').prop('checked', false);
            }
        }
    } else {
        //Si hay menos registros con checkbox contarlos.
        if (totalSolicitado === totalSolicitadoFilter) {
            //evaluar check todos
            if (dataConsumoGlobal.length == totalSolicitado) {
                $('#select_consumos_TODOS').prop('checked', true);
            }
            if (dataConsumoGlobal.length == 0) {
                $('#select_consumos_TODOS').prop('checked', false);
            }
        }
        else {
            if (dataConsumoGlobal.length == totalSolicitadoFilter) {
                $('#select_consumos_TODOS').prop('checked', true);
            }
            if (dataConsumoGlobal.length == 0) {
                $('#select_consumos_TODOS').prop('checked', false);
            }
        }

    }

    if (dataConsumoGlobal.length > 0) {
        $('#btn-atencion-masiva').attr('disabled', false);
    } else {
        $('#btn-atencion-masiva').attr('disabled', true);
    }
    //let selectFilter = _tableReporte.rows({ search: 'applied' }).nodes().to$().find('input:checked').length
    let select = _varTablaGestionConsumo.rows().nodes().to$().find('input:checked').length
    $("#seleccionados").html(select)
}

//=============================== BOTON ELIMINAR (Seleccionar Fila) =============================
$('#tabla-gestion-consumo  tbody').on('click', 'tr button.btn-atender', function () {
    validarSession();//AÑADIDO 22.04.2021
    let Id = $(this).attr("dataid")
    let StrDes = $(this).attr("des_data")
    if (!isNaN(Id)) {
        class GeneralGC {
            constructor(intIdConsumo, bitFlConsumido, intCantidad) {
                this.intIdConsumo = intIdConsumo //idConsumo
                this.bitFlConsumido = bitFlConsumido
                this.intCantidad = intCantidad //cantidad
            }
        }
        dataCheckGC.push({ intIdConsumo: Id, bitFlConsumido: 0, intCantidad: 0 })
        console.log(dataCheckGC);
        registrarAtencionIndividual(1, 0)//1:atender,0:viene de la pantalla principal
    }
});

//=============================== BOTON ELIMINAR (Seleccionar Fila) =============================
$('#tabla-gestion-consumo  tbody').on('click', 'tr button.btn-anular', function () {
    validarSession();//AÑADIDO 22.04.2021
    let Id = $(this).attr("dataid")
    let StrDes = $(this).attr("des_data")
    if (!isNaN(Id)) {
        class GeneralGC {
            constructor(intIdConsumo, bitFlConsumido, intCantidad) {
                this.intIdConsumo = intIdConsumo //idConsumo
                this.bitFlConsumido = bitFlConsumido
                this.intCantidad = intCantidad //cantidad
            }
        }
        dataCheckGC.push({ intIdConsumo: Id, bitFlConsumido: 0, intCantidad: 0 })
        console.log(dataCheckGC);
        registrarAtencionIndividual(0, 0)//1:atender,0:viene de la pantalla principal
    }
});

/************************************************************************************************
                                 REGION ACTUALIZACION MASIVA 
*************************************************************************************************/
let catidadCkecked = arrayCheckedConsumos.length; //jueves14.01/7Falta contar
$('#btn-atencion-masiva').on('click', function () {
    validarSession();//AÑADIDO 22.04.2021
    var cantidadActualizar = $('#lbl_cantChecksAtender').text();

    swal({
        title: "ATENCIÓN MASIVA DE CONSUMOS",
        text: "¿Está seguro que desea atender los  " + "<label style='color: #21dcb8; font-weight: bold;'> (" + cantidadActualizar + ") </label>" + " registros seleccionados?", //catidadCkecked 
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí, Atender",
        cancelButtonText: "No, cancelar",
    }).then(function (isConfirm) {
        if (isConfirm) {
            guardarAtencionMasivo();
            //swal("Atendido!", "Los registros fueron actualizados correctamente", "success");
            //AÑADIDO 09.04.2021 para refrescar la Lista principal
            //const date = getDateRangePickerConsumo();
            //TablaGestionConsumo(date.fInicio, date.fFin)
        } else {
            swal("Cancelado", "La operacion fue cancelada : )", "error");
        }
    });

});

function guardarAtencionMasivo() {
    validarSession();//AÑADIDO 22.04.2021
    arrayCheckedConsumos = [];
    arrayCheckedConsumos = dataCheckConsumos.slice();


    var listConsumos = [];   //var listConsumos = ["1081", "1078", "1082"]; //Prueba de datos en duro
    //arrayCheckedConsumos.forEach(element => {
    //    listConsumos.push(element.intIdConsumo)
    //});

    //AÑADIDO 09.04.2021
    dataConsumoGlobal.forEach(element => {
        listConsumos.push(element.intIdConsumo)
    });

    var SesionMovi = {
        IntIdMenu: 'M0315',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }

    $.post(
        '/Personal/ActualizarGestionMasivoConsumo',
        {
            //ObjConsumo: GestionConsumo 
            listPersonal: listConsumos
            , objSession: SesionMovi
            , intTipoOperacion: 2
        },

        (response) => {
            console.log(response);
            if (response.type !== '') {
                if (response.type === 'success') {

                    //ejecutarTablaConParamFechas(); //comentado 07.04.2021
                    //listado Principal
                    const date = getDateRangePickerConsumo();
                    TablaGestionConsumo(date.fInicio, date.fFin)

                    listConsumos = [];

                    while (listConsumos.length > 0)
                        listConsumos.pop();

                    //limpiar array gestion consumo
                    dataCheckConsumos = [];

                    $('#lblEstado').empty()
                    $('#lblEstado').append('<span style = " color:white; font-size:18px; background-color:#1abb9c;" >Consumido<span>');
                    $('#boton-atender-gestion-consumo-individual').hide()
                    $('#boton-deshacer-gestion-consumo').show();

                    swal({
                        title: "GESTIÓN DE CONSUMO",
                        text: response.message,
                        timer: 3500,
                    });

                }

                else {
                    if (response.type === 'error') {
                        var nomMantemiento = 'Empresa';
                        var campo = 'txt_cod_Empresa';
                        var msj = response.message;
                        var response = "info";
                        var deta = 'notifry_error';
                        document.getElementById("txt_cod_Empresa").style.borderColor = "#3498dbe0";

                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                        return;
                    }
                    else {

                        swal({
                            title: "GESTIÓN DE CONSUMO",
                            text: 'Consumo No Actualizado',
                            timer: 3500,
                        });
                    }
                }
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });

}

//===============================================================================================
//FUNCIÓN ENCARGADA DE LA IMPRESIÓN DE TICKETS
function ImprimirTicket_Comedor(SesionMovi, intId_, dataCheckGC, evento_, swal_) {
    //let rpta = false;
    validarSession();//AÑADIDO 22.04.2021
    $.post(//tipo = 0 : Atención Individual
        '/Personal/Imp_Consumos',
        { objSession: SesionMovi, intIdConsumo: intId_, tipo: evento_, listaConsumoSelects: dataCheckGC },
        (response) => {
            console.log(response.message);
            if (response.type === 'success') {
                //rpta = true;
                if (swal_ === 1) {
                    swal({
                        title: "Ticket de Consumos",
                        text: "No olvide recoger su ticket impreso",
                    });
                }
            }
        });
    //return rpta;
}


//===============================================================================================
//=================================== MODAL GESTION CONSUMO =====================================
//===============================================================================================
var cerrar = document.getElementById('CerrarX');
function mostrarDatosEnModal(this_, idConsumo_, imgFoto_) {
    validarSession();//AÑADIDO 22.04.2021
    var modal = document.getElementById("myModalGC");
    modal.style.display = "block";
    //// Get the button that opens the modal
    //var btn = document.getElementById("myBtn");

    // Get the <span> element that closes the modal
    var span = document.getElementsByClassName("close")[0];
    //var cerrar = document.getElementById('cerrarModal');
    //var cerrar = document.getElementById('CerrarX');

    //// When the user clicks the button, open the modal
    //btn.onclick = function () {
    //    modal.style.display = "block";
    //}

    // When the user clicks on <span> (x), close the modal
    cerrar.onclick = function () {
        modal.style.display = "none";
        $('#X').show();
        const date = getDateRangePickerConsumo();
        TablaGestionConsumo(date.fInicio, date.fFin)
    }

    // When the user clicks on <span> (x), close the modal
    span.onclick = function () {
        modal.style.display = "none";
    }

    // When the user clicks anywhere outside of the modal, close it
    window.onclick = function (event) {
        if (event.target == modal) {
            //modal.style.display = "none";
        }
    }

    var lblIdConsumo_ = idConsumo_
    $('#X').hide();
    //===============================================================================================
    //================================== SECCION IMAGEN EMPLEADO ====================================
    //===============================================================================================
    var imgImagenEmpleado = imgFoto_;
    var txtFechaCompleta = $(this_).parents('tr').find('td').eq(7).text();
    var fechaInvertir = txtFechaCompleta.slice(0, 10);////llega como: DD-MM-YY    //Resultado bota en formato YY/MM/DD. Se tiene que invertirlo
    var salidaFechaInvertida = formato(fechaInvertir);
    var salidaFechaInvertida2 = formato2(fechaInvertir.replace('-', '/').replace('-', '/'));

    /**
     * Convierte un texto de la forma 2017-01-10 a la forma 10/01/2017
     * @param {string} fechaInvertir Texto de la forma 2017-01-10
     * @return {string} fechaInvertir de la forma  10/01/2017
     */
    function formato(fechaInvertir) {
        return fechaInvertir.replace(/^(\d{4})-(\d{2})-(\d{2})$/g, '$2/$3/$1');//Convirtio de a 
    }

    function formato2(fechaInvertir) {
        return fechaInvertir.replace(/^(\d{4})-(\d{2})-(\d{2})$/g, '$3/$2/$1');//Convirtio de a 
    }


    //INVERTIR PARA LOS DIAS DE LA SEMANA(lun, mart, mierc)
    var fecha_en_DDMMYYYY = txtFechaCompleta.slice(0, 10);////llega como: DD-MM-YY //---- data.slice(0, 10); //llega como: '2017-01-10';
    var fecha_en_YYYYMMDD = convertDateFormatDias(fecha_en_DDMMYYYY); //se invierte a: '10-01-2017';
    function convertDateFormatDias(string) {
        var info = string.split('-');
        return info[2] + '/' + info[1] + '/' + info[0];//Se mantiene los guiones
    }

    var today = new Date(fecha_en_YYYYMMDD); //Debe estar llegar aquí con el formato: YYYY/MM/DD tipo: 2021/03/09
    //alert(fecha_en_YYYYMMDD);
    var hoy = today.getDay();
    var eldia;//lunes, martes;...
    if (hoy == 0) { eldia = 'Domingo'; }
    if (hoy == 1) { eldia = 'Lunes'; }
    if (hoy == 2) { eldia = 'Martes'; }
    if (hoy == 3) { eldia = 'Miércoles'; }
    if (hoy == 4) { eldia = 'Jueves'; }
    if (hoy == 5) { eldia = 'Viernes'; }
    if (hoy == 6) { eldia = 'Sábado'; }

    var txtHoraMarca = txtFechaCompleta.slice(11, 21);
    //var today = new Date(salidaFechaInvertida); //Debe estar llegar aquí con el formato: MM/DD/YY

    //
    var txtNombreApellido = $(this_).parents('tr').find('td').eq(2).text();
    var txtTipoMenu = 'Menú' + ' ' + $(this_).parents('tr').find('td').eq(5).text();//MENU ECONOMICO
    var txtTipoServicio = $(this_).parents('tr').find('td').eq(4).text();
    var txtEstado = $(this_).parents('tr').find('td').eq(6).text();
    var Hatencion = $(this_).parents('tr').find('td').eq(11).text();
    //alert(txtEstado);
    $('#lblNombreApellido').empty()
    $('#lblTipoMenu').empty()
    $('#lblTipoServicio').empty()
    $('#lblEstado').empty()
    $('#lblHatencion').empty()
    $('#lblDiaFecha').empty()
    $('#lblNombreApellido').append('<span>' + txtNombreApellido + '<span>')
    $('#lblTipoMenu').append('<span>' + ' ' + txtTipoMenu + '<span>')
    var txtTipoServicio_ = txtTipoServicio.toUpperCase();
    $('#lblTipoServicio').append('<span>' + txtTipoServicio_ + '<span>')
    $('#lblDiaFecha').append('<span>' + eldia + ' ' + salidaFechaInvertida2 + '<span>');
    $('#lblHora_spliced').empty();
    $('#lblHora_spliced').append('<span>' + txtHoraMarca + '<span>');
    $('#lblHatencion').append('<span style = "font-size:25px; font-weight: 900; color:#337AB7;">' + Hatencion.toUpperCase() + '<span>');

    if (txtEstado == 'SOLICITADO') {
        $('#lblEstado').append('<span style="font-size:25px; font-weight: 900; color:#990000;">' + txtEstado.toUpperCase() + '<span>')
        $('#boton-atender-gestion-consumo-individual').attr('disabled', false);
        $('#boton-deshacer-gestion-consumo').attr('disabled', false);
        $('#select_GC_TODOS').attr('disabled', false);
        $('#boton-atender-gestion-consumo-individual').show();
    }

    if (txtEstado == 'CONSUMIDO') {
        $('#lblEstado').append('<span style = "font-size:25px; font-weight: 900; color:#337AB7;">' + txtEstado.toUpperCase() + '<span>');
        $('#boton-atender-gestion-consumo-individual').attr('disabled', true);
        $('#boton-deshacer-gestion-consumo').attr('disabled', true);
        $('#select_GC_TODOS').attr('disabled', true);
        //$('#select_GC_TODOS').hide();
    }
    if (txtEstado == 'ANULADO') {
        $('#lblEstado').append('<span style = "font-size:25px; font-weight: 900; color:#3b567d;" >' + txtEstado.toUpperCase() + '<span>');
        $('#boton-atender-gestion-consumo-individual').attr('disabled', true);
        $('#boton-deshacer-gestion-consumo').attr('disabled', true);
        $('#select_GC_TODOS').attr('disabled', true);
        //$('#boton-atender-gestion-consumo-individual').hide()
    }

    $('#lblIdConsumo').empty()
    $('#lblIdConsumo').append('<span id="idConsumoSpan"style = "font-size:40px;" >' + lblIdConsumo_ + '<span>');

    //AÑADIDO 22.03.2021 - LISTAR CONSUMOS POR ASISTENCIA
    ListarConsumosXmodalGC(idConsumo_);
    Imagen_GC(imgFoto_, "GestionConsumo");//añadido 26.03.2021
}

//añadido 22.03.2021--------------------------------------------------------------------------
let dataCheckGC = [];
//let dataGC = [];
let dataCheckGC_tmp;
var _varTablaGC;
let chk_;
function ListarConsumosXmodalGC(intId) {
    validarSession();//AÑADIDO 22.04.2021
    var SesionMovi = {
        IntIdMenu: 'M0305',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }

    $.post(
        '/Personal/GetTablaGC',
        { objSession: SesionMovi, intId: intId },
        (response) => {
            console.log(response);
            //nuevo
            dataCheckGC_tmp = response;

            if (typeof _varTablaGC !== 'undefined') {
                _varTablaGC.destroy();
            }
            _varTablaGC = $('#DataTableConsumoDet').DataTable({
                data: response,
                columns: [
                    {
                        sortable: false,
                        "render": (data, type, item, meta) => {
                            let intIdConsumo = item.intIdConsumo;
                            let bitFlConsumido = item.bitFlConsumido;
                            let FlCancelado = item.FlCancelado;
                            let cant = item.intCantidad;
                            //No Anulado o Solicitado
                            if (bitFlConsumido == 0) {
                                if (FlCancelado == 0) {
                                    return `<input type="checkbox" 
                                           class="ClassChecksPendiente"  
                                           id="Chck${intIdConsumo}"
                                           data_intId="${intIdConsumo}" 
                                           onChange="CheckedItemDeTablaGC(${intIdConsumo}, ${bitFlConsumido}, ${cant}, ${intId})">`;//modificado 23.03.2021
                                }
                                else {
                                    return `<span> </span>`;//modificado 25.03.2021
                                }
                            }
                            if (bitFlConsumido == 1) {
                                return `<span> </span>`;//modificado 25.03.2021
                            }
                        }
                    },
                    { data: 'intIdConsumo' },
                    { data: 'intCantidad' },
                    { data: 'strDescripcion' },
                    { data: 'strClase' },
                    { data: 'strPrecio' },
                    {
                        sortable: false,
                        "render": (data, type, item, meta) => {
                            let IntIdC = item.intIdConsumo;
                            let IntCant = item.intCantidad;
                            let strDes = item.strDescripcion;
                            let bitFlConsumido = item.bitFlConsumido;
                            let FlCancelado = item.FlCancelado;
                            let clase = item.strClase;
                            if (FlCancelado == 1) {
                                return '<center><span class="badge bg-red"> ANULADO </span></center>';
                            } else {
                                if (bitFlConsumido == 0) {
                                    return '<center><span class="badge bg-orange" > SOLICITADO </span></center>';
                                }
                                if (bitFlConsumido == 1) {
                                    return '<center><span class="badge bg-green"> CONSUMIDO </span ></center>';
                                }
                            }

                        }
                    }
                ],
                lengthMenu: [10, 25, 50],
                order: [],
                responsive: true,
                language: _datatableLanguaje,
                columnDefs: [
                    {
                        targets: [1],
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [5],
                        visible: false,
                        searchable: false
                    }
                ],
                dom: 'lBfrtip',
            });

            //*****************************************
            //Linea necesaria para desckheckear cada vez que se carga la tabla
            $('#select_GC_TODOS').iCheck('uncheck');
            var allPagesTodasLasCeldasGC = _varTablaGC.cells().nodes(); //":contains('SOLICITADO')"
            //******************************************

            let all_filter = _varTablaGC.cells({ order: 'index', search: 'applied' }).nodes().to$().find(':checkbox');
            if (all_filter.length > 0) {
                $("#select_GC_TODOS").attr("disabled", false)
                $('#boton-atender-gestion-consumo-individual').attr('disabled', false);
                $('#boton-deshacer-gestion-consumo').attr('disabled', false);

            } else {
                $("#select_GC_TODOS").attr("disabled", true)
                $('#boton-atender-gestion-consumo-individual').attr('disabled', true);
                $('#boton-deshacer-gestion-consumo').attr('disabled', true);
            }

            dataCheckGC = [];
            console.log(response.length);
        });

}

//***************************** SELECCIONAR TODOS ******************************************************************
$('#select_GC_TODOS').on('change', function () {
    validarSession();//AÑADIDO 22.04.2021
    var allPagesGc = _varTablaGC.cells().nodes();
    //let all_filter = _varTablaGC.cells({ order: 'index', search: 'applied' }).nodes();
    let all_filter_ = _varTablaGC.cells({ order: 'index', search: 'applied' }).nodes();
    let all_filter = _varTablaGC.cells({ order: 'index', search: 'applied' }).nodes().to$().find(':checkbox');

    console.log("Filas: " + _varTablaGestionConsumo.rows().count());

    if ($('#select_GC_TODOS').is(':checked')) {
        //FILTRADO OPCION B
        dataCheckGC = [];
        all_filter.toArray().forEach(x => {
            let ival = $(x).attr('data_intId');
            dataCheckGC.push({ intIdConsumo: ival })
        })

        $(all_filter_).find('input[type="checkbox"]').prop('checked', true);

    } else {
        dataCheckGC = []; //Se limpia el array
        $(allPagesGc).find('input[type="checkbox"]').prop('checked', false);
    }

    console.log(dataCheckGC);
    let total = _varTablaGC.rows().nodes().length
    let totalFilter = _varTablaGC.rows({ order: 'index', search: 'applied' }).nodes().length
    let select = _varTablaGC.rows().nodes().to$().find('input:checked').length
    $("#seleccionadosGC").html(select)
});

//============================== SELECCIONAR UNO X UNO =============================================================
function CheckedItemDeTablaGC(intIdConsumo_p, _bitFlConsumido, _cant, intId) {
    validarSession();//AÑADIDO 22.04.2021
    class GeneralGC {
        constructor(intIdConsumo, bitFlConsumido, intCantidad) {
            this.intIdConsumo = intIdConsumo //idConsumo
            this.bitFlConsumido = bitFlConsumido
            this.intCantidad = intCantidad //cantidad
        }
    }
    //dataCheckGC.push({ intIdConsumo: _intIdConsumo, bitFlConsumido: _bitFlConsumido, intCantidad: _cant })//ENVIAR EL IDASISTENCIA EN LUGAR DE LA CANTIDAD

    //--------TABLAS--------------
    var allPagesGc = _varTablaGC.cells().nodes();
    let all_filter = _varTablaGC.cells({ order: 'index', search: 'applied' }).nodes();

    //---------- FILAS-----------------------------------------------------------------------------------------
    let total = _varTablaGC.rows().count()
    let totalFilter = _varTablaGC.rows({ order: 'index', search: 'applied' }).count()

    //---------------------------------------------------------------------------------------------------
    let totalSolicitado = allPagesGc.to$().find(':checkbox').length; //solo checkboxes
    let totalSolicitadoFilter = all_filter.to$().find(':checkbox').length;//solo checkboxes filtrados
    //---------------------------------------------------------------------------------------------------


    if ($('#Chck' + intIdConsumo_p + '').is(':checked') == true) {
        if (dataCheckGC_tmp.find(e => e.intIdConsumo == intIdConsumo_p)) {
            let position = dataCheckGC_tmp.findIndex(e => e.intIdConsumo == intIdConsumo_p);
            if (!isNaN(position)) {
                //dataCheckGC.push(dataCheckGC_tmp[position]);
                dataCheckGC.push({ intIdConsumo: intIdConsumo_p, bitFlConsumido: _bitFlConsumido, intCantidad: _cant })//ENVIAR EL IDASISTENCIA EN LUGAR DE LA CANTIDAD
            }
        }
    } else if ($('#Chck' + intIdConsumo_p + '').is(':checked') == false) {
        if (dataCheckGC.find(e => e.intIdConsumo == intIdConsumo_p)) {
            let position = dataCheckGC.findIndex(e => e.intIdConsumo == intIdConsumo_p);
            if (!isNaN(position)) {
                dataCheckGC.splice(position, 1);
            }
        }
    }

    console.log(dataCheckGC);

    if (totalSolicitado === total) {
        //Validar que todos los registros de la tabla tienen checkbox
        if (total === totalFilter) {
            //evaluar check todos
            if (dataCheckGC.length == total) {
                $('#select_GC_TODOS').prop('checked', true);
            }
            if (dataCheckGC.length == 0) {
                $('#select_GC_TODOS').prop('checked', false);
            }
        }
        else {
            if (dataCheckGC.length == totalFilter) {
                $('#select_GC_TODOS').prop('checked', true);
            }
            if (dataCheckGC.length == 0) {
                $('#select_GC_TODOS').prop('checked', false);
            }
        }
    } else {
        //Si hay menos registros con checkbox contarlos.
        if (totalSolicitado === totalSolicitadoFilter) {
            //evaluar check todos
            if (dataCheckGC.length == totalSolicitado) {
                $('#select_GC_TODOS').prop('checked', true);
            }
            if (dataCheckGC.length == 0) {
                $('#select_GC_TODOS').prop('checked', false);
            }
        }
        else {
            if (dataCheckGC.length == totalSolicitadoFilter) {
                $('#select_GC_TODOS').prop('checked', true);
            }
            if (dataCheckGC.length == 0) {
                $('#select_GC_TODOS').prop('checked', false);
            }
        }

    }

    //let selectFilter = _tableReporte.rows({ search: 'applied' }).nodes().to$().find('input:checked').length
    let select = _varTablaGC.rows().nodes().to$().find('input:checked').length
    $("#seleccionadosGC").html(select)

}

//=================================== ATENCION INDIVIDUAL ==================================== ATENCION
function registrarAtencionIndividual(bit_, evento_) {
    validarSession();//AÑADIDO 22.04.2021
    //Si evento_ = 0 viene de Lista principal, evento_=1 viene del modal
    var idConsumo_v = $('#lblIdConsumo').text();
    if (bit_ === 1) {
        var bitFlConsumido_ = 1;//ESTADO  atendido/consumido=1
        var strMsg_ = "Atender Consumo";
    }
    if (bit_ === 0) {
        var bitFlConsumido_ = 0;//Estado cancelado
        var strMsg_ = "Anular Consumo";
    }

    var GestionConsumo = {
        intIdConsumo: idConsumo_v,
        bitFlConsumido: bitFlConsumido_,
    }

    var SesionMovi = {
        IntIdMenu: 'M0315',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }

    if (dataCheckGC.length > 0) {
        if (bit_ === 0) {
            if (dataCheckGC.length > 1) {
                var Msge = "¿Está seguro de anular los Consumos seleccionados?";
            } else {
                var Msge = "¿Está seguro de anular el Consumo seleccionado?";
            }

            swal({
                title: "Anular Consumo",
                text: Msge,
                type: "warning",
                showCancelButton: true,
                confirmButtonText: "Sí, anular",
                cancelButtonText: "No, cancelar",
            }).then(function (isConfirm) {
                if (isConfirm) {
                    $.post(
                        '/Personal/UpConsumoGC',
                        { ObjConsumo: GestionConsumo, intTipoOperacion: 2, listaConsumoSelects: dataCheckGC, bitFlConsumido: bit_, evento: evento_ },
                        (response) => {
                            console.log(response);
                            if (response.type !== '') {
                                if (response.type === 'success') {
                                    swal({
                                        title: strMsg_,
                                        text: response.message,
                                        timer: 3500,
                                    });

                                    dataCheckGC.length = 0; //vaciando array luego de grabar. 23.03.2021
                                    if (evento_ == 1) {
                                        //listar detalle en Modal
                                        ListarConsumosXmodalGC(idConsumo_v);
                                    }
                                    if (evento_ == 0) {
                                        //listado Principal
                                        const date = getDateRangePickerConsumo();
                                        TablaGestionConsumo(date.fInicio, date.fFin)
                                    }
                                } else {
                                    new PNotify({
                                        title: strMsg_,
                                        text: response.message,
                                        type: 'info',
                                        delay: 3000,
                                        styling: 'bootstrap3'
                                    });
                                }

                            }
                        }
                    ).fail(function (result) {
                        alert('ERROR ' + result.status + ' ' + result.statusText);
                    });
                } else {
                    //swal("Cancelado", "La Operación fue cancelada", "error");
                }
            });
        } else {
            $.post(
                '/Personal/UpConsumoGC',
                { ObjConsumo: GestionConsumo, intTipoOperacion: 2, listaConsumoSelects: dataCheckGC, bitFlConsumido: bit_, evento: evento_ },
                (response) => {
                    console.log(response);
                    if (response.type !== '') {
                        if (response.type === 'success') {
                            swal({
                                title: strMsg_,
                                text: response.message,
                                timer: 3500,
                            });
                            //IMPRIMIR SI LA CONFIGURACION: Generar Ticket desde Atención de Concesionaria
                            console.log("Configuracion de Impresora:");
                            console.log(ConfiImpr);
                            if (ConfiImpr == 3) {
                                ImprimirTicket_Comedor(SesionMovi, 0, dataCheckGC, evento_, 1); //último 0: no debe mostrar mensaje
                            }

                            if (evento_ == 1) {
                                //listar detalle en Modal
                                ListarConsumosXmodalGC(idConsumo_v);
                            }
                            if (evento_ == 0) {
                                //listado Principal
                                const date = getDateRangePickerConsumo();
                                TablaGestionConsumo(date.fInicio, date.fFin)
                            }
                            dataCheckGC.length = 0; //vaciando array luego de grabar. 23.03.2021
                        } else {
                            new PNotify({
                                title: strMsg_,
                                text: response.message,
                                type: 'info',
                                delay: 3000,
                                styling: 'bootstrap3'
                            });
                        }
                    }
                }
            ).fail(function (result) {
                alert('ERROR ' + result.status + ' ' + result.statusText);
            });
        }
    } else {
        new PNotify({
            title: strMsg_,
            text: "Seleccione al menos un consumo",
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3'
        });
    }
}
//=============================================================================================

//=============================== otros =============================
$('#btnExportPDF').on('click', function () {
    $('.buttonsToHide_pdfHtml5').click();
});

$('#btnExportEXCEL').on('click', function () {
    $('.buttonsToHide_excel').click();
});
/************************************************************************************************
                                 GESTION DE CONSUMO - FIN
*************************************************************************************************/


//#endregion MANT. GESTION DE CONSMO

/************************************************************************************************
               MINI MANTENIMIENTO TIPOS - PARA EL MANTENIMIENTO SERVICIOS
*************************************************************************************************/

//===================================== TablaTipoGrupo() ========================================
//#region MINI MANTENIMIENTO TIPOS 
var _varTablaTipoGrupo;

$('#tabla-listar-tipo-grupo-icono, #tabla-listar-tipo-grupo-icono-palabra').on('click', function () {
    $('#myModal').hide();
    listarTablaTipoGrupo();

});

function listarTablaTipoGrupo() {
    validarSession();//AÑADIDO HG 22.04.2021
    var SesionMovi = {
        IntIdMenu: 'M0305',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }

    $.post(
        '/Asistencia/GetTablaTipo',
        { objSession: SesionMovi, strGrupo: 'COMEDOR', strSubGrupo: '', IntIdTipo: 0 },
        (response) => {

            if (typeof _varTablaTipoGrupo !== 'undefined') {
                _varTablaTipoGrupo.destroy();
            }
            _varTablaTipoGrupo = $('#DataTableTipoGrupo').DataTable({
                data: response,
                columns: [
                    { data: 'IntIdTipo' },
                    { data: 'strCoTipo' },
                    { data: 'strDeTipo' },//------DESCRIPCION
                    { data: 'strAbreviatura' },//---DESCIPCION
                    { data: 'DeSubGrupo' },
                    {
                        data: 'strDesEmp',
                        render: function (data, type, row) {

                            var dato = 0;

                            if (data === 'TIPOMENU') {

                                dato = 2
                            }
                            if (data === 'TIPOSERV') {

                                dato = 1
                            }
                            return '<span style="color:blue;">' + dato + '</span>';
                        }

                    },

                    {
                        sortable: false,
                        "render": (data, type, item, meta) => {
                            let IntIdTipoGrupo = item.IntIdTipo;
                            let strDesTipo = item.strDeTipo;
                            return `<button class="btn btn-success btn-xs btn-edit"   dataid="${IntIdTipoGrupo}" ><i class="fa fa-pencil"></i> Editar </button> 
                                    <button class="btn btn-primary btn-xs btn-delete" dataid="${IntIdTipoGrupo}" des_data="${strDesTipo}" data="${item}" ><i class="fa fa-trash-o"></i> Eliminar </button>`;
                        }
                    }


                ],
                lengthMenu: [10, 25, 50],
                order: [],
                responsive: true,
                language: _datatableLanguaje,
                columnDefs: [
                    {
                        targets: [0],
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [3],
                        visible: false,
                        searchable: false
                    },
                    {
                        targets: [5],
                        visible: false,
                        searchable: false
                    }
                ],
                dom: 'lBfrtip',
            });

            $('#myModal').show();
        });

}

//===============================================================================================
//=============================== BOTON ELIMINAR (Seleccionar Fila) =============================
$('#DataTableTipoGrupo  tbody').on('click', 'tr button.btn-delete', function () {
    validarSession();//AÑADIDO HG 22.04.2021
    let IdTipoGrupo = $(this).attr("dataid")
    let StrDesTipo = $(this).attr("des_data")
    if (!isNaN(IdTipoGrupo)) {

        intentEliminarTipoGrupo(IdTipoGrupo, StrDesTipo);
    }

});

//===============================================================================================
//=============================== FUNCION intentEliminarTipoGrupo() =============================
function intentEliminarTipoGrupo(IdTipoGrupo, StrDesTipo) {
    swal({
        title: "Eliminar Tipo",
        text: "¿Está seguro de eliminar el Tipo ''<strong>" + StrDesTipo + "</strong>''?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí, eliminar",
        cancelButtonText: "No, cancelar",
    }).then(function (isConfirm) {
        if (isConfirm) {
            yesEliminaTipoGrupo(IdTipoGrupo);
        } else {
            //swal("Cancelado", "La Operación fue cancelada", "error");
        }
    });
}


//=============================== FUNCION ELIMINAR TIPO GRUPO ===================================
function yesEliminaTipoGrupo(IdTipoGrupo) {
    validarSession();//AÑADIDO HG 22.04.2021 
    var SesionMovi = {
        IntIdMenu: 'M0305',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }

    $.post(
        '/Asistencia/EliminarTGTipo',
        { objSession: SesionMovi, intId: IdTipoGrupo },
        (response) => {
            console.log(response);
            if (response.type !== '') {
                var tipo = 'Eliminado!';
                if (response.type === 'error')
                    tipo = 'NO SE PUEDE ELIMINAR EL REGISTRO';
                swal(tipo, response.message, response.type);

                if (response.type === 'success')
                    swal(tipo, response.message, response.type);
                listarTablaTipoGrupo();
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
}


//================================ BOTON EDITAR (Seleccionar Fila) ==============================
$('#DataTableTipoGrupo  tbody').on('click', 'tr button.btn-edit', function () {
    validarSession();//AÑADIDO HG 22.04.2021 
    let intIdTipo_ed = $(this).attr("dataid")
    if (!isNaN(intIdTipo_ed)) {
        CargarDatosTipoGrupo(intIdTipo_ed)
    }

});


//====================== CARGAR DATOS A EDITAR (de la Fila Seleccionada) ========================
function CargarDatosTipoGrupo(intIdTipo_ed) {
    validarSession();//AÑADIDO HG 22.04.2021 
    //////CargarComboTipoSubGrupo();
    $('#x_title_nuevo').hide();
    $('#x_title_editar').show();
    $('.btn-nuevo').hide();
    $('.btn-actualizar').show()
    $('#cboSubGrupoTipo_ne').val(0);
    //
    $('#lblIntIdTipo').empty();
    $('#txtAbreviatura_ne').val('');
    $('#myModal_ne').modal('toggle');
    $('#notifry_error1').html('');
    $('#notifry_info_abreviatura').html('');
    $("txtDescripcion_ne").css("borderColor", "#CCCCCC");
    $("txtAbreviatura_ne").css("borderColor", "#CCCCCC");

    var SesionMovi = {
        IntIdMenu: 'M0305',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }




    //$.post(
    //    '/Organizacion/ListarCaracteresMax',//'/Proceso/MaestroMaxCaracteres',
    //    { strMaestro: 'TGTIPO' },
    //    (response) => {

    //        response.forEach(element => {

    //            if (element.strColumnName == 'strDeTipo') {

    //                $('#' + element.strColumnName + '').empty();
    //                $('#' + element.NombreColum + '').append('<label>Descripción (*)</label><input type = "text" class= "form-control" id = "txtDescripcion_ne" placeholder = "Código" maxlength="' + element.intMaxLength + '" onkeypress="validarDescripcionAll(event)" ><div id="notifry_error1" style="background-color:#4CA4DE;color:white;text-align:center;"></div>');
    //            }

    //            else if (element.strColumnName == 'strAbreviatura') {
    //                $('#' + element.strColumnName + '').empty();
    //                $('#' + element.strColumnName + '').append('<label>Abreviatura (*)</label><input type = "text" class= "form-control" id = "txtAbreviatura_ne" placeholder = "Descripción" maxlength="' + element.intMaxLength + '" onkeypress="validarCodigoAll(event)" ><div id="notifry_info_abreviatura" style="background-color:#4CA4DE;color:white;text-align:center;"></div>');
    //            }

    //            $("#txtDescripcion_ne").keyup(function () {

    //                $('#notifry_error1').html('');
    //                document.getElementById("txtDescripcion_ne").style.borderColor = "#CCCCCC";
    //            });

    //            $("#txtAbreviatura_ne").keyup(function () {
    //                $('#notifry_info_abreviatura').html('');
    //                document.getElementById("txtAbreviatura_ne").style.borderColor = "#CCCCCC";
    //            });

    //            //}

    //        });

            //////////////////////
            $.post(
                '/Asistencia/LlenarTipoUM',
                { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'COMEDOR', strSubGrupo: 'SERVICIOS' },
                (response) => {

                    $('#cboSubGrupoTipo_ne').empty();
                    $('#cboSubGrupoTipo_ne').append('<option value="0">Seleccione</option>');

                    response.forEach(element => {

                        $('#cboSubGrupoTipo_ne').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

                    });

                    $.post(
                        '/Asistencia/GetTablaTipo',
                        { objSession: SesionMovi, strGrupo: 'COMEDOR', strSubGrupo: '', IntIdTipo: intIdTipo_ed },
                        (response) => {
                            response.forEach(element => {
                                var element_strSubGrupo = element.strSubGrupo;
                                var elementStrSubGrupo = 0;
                                if (element_strSubGrupo === 'TIPOMENU') {
                                    elementStrSubGrupo = 2
                                }
                                if (element_strSubGrupo === 'TIPOSERV') {
                                    elementStrSubGrupo = 1
                                }

                                $('#cboSubGrupoTipo_ne').val(elementStrSubGrupo);
                                $('#txtDescripcion_ne').val('');
                                $('#txtDescripcion_ne').val(element.strDeTipo);
                                //alert(element.strDeTipo)

                                //alert($('#txtDescripcion_ne').val())

                                $('#txtAbreviatura_ne').val(element.strAbreviatura);
                                $('#lblIntIdTipo').append(element.IntIdTipo);

                            });

                        });


                //});


            //////////////////////

        });










}


//==================================== BOTON NUEVO ==============================================
$('#btn-nuevo-tipo-grupo').on('click', function () {
    validarSession();//AÑADIDO HG 22.04.2021
    CargarComboTipoSubGrupo();
    $('#cboSubGrupoTipo_ne').val(0);
    $('#txtDescripcion_ne').val('');
    $('#txtAbreviatura_ne').val('');
    $('#x_title_nuevo').show();
    $('#x_title_editar').hide();
    $('.btn-nuevo').show();
    $('.btn-actualizar').hide()
    $('#myModal_ne').modal('toggle');

    $('#notifry_error1').html('');
    $('#notifry_info_abreviatura').html('');
   $("txtDescripcion_ne").css("border-color", "#CCCCCC");
   $("txtAbreviatura_ne").css("border-color", "#CCCCCC");

});


//==================================== BOTON GUARDAR ============================================
$('#btn-guardar-tipo-grupo').on('click', function () {
    validarSession();//AÑADIDO HG 22.04.2021
    var _IntIdTipo = ''; //$('#cboSubGrupoTipo_ne option:selected').val();  
    var _strCoTipo = ''; //$('#').val();
    var _strDeTipo = $('#txtDescripcion_ne').val();
    var _strAbreviatura = $('#txtAbreviatura_ne').val();
    var _strGrupo = ''; //Tipo de Menú ó Tipo de Servicio, Lo que viene en el combo
    var _strSubGrupo = $('#cboSubGrupoTipo_ne option:selected').val(); //TIPOMENU ó TIPOSERV

    //alert('_strDeTipo--->' + _strDeTipo + '||_strAbreviatura--->' + _strAbreviatura)


    $('#notifry_error1').html('');
    $('#notifry_info_abreviatura').html('');
    $("txtDescripcion_ne").css("border-color", "#CCCCCC");
    $("txtAbreviatura_ne").css("border-color", "#CCCCCC");


    if (_strDeTipo === '' || _strAbreviatura === '' || _strSubGrupo == 0) {
        new PNotify({
            title: 'Nuevo Tipo',
            text: 'Complete los campos obligatorios',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });

        $('#notifry_error1').html('');
        $('#notifry_info_abreviatura').html('');

        return;
    }

    var ObjetoTGTipo = {
        IntIdTipo: _IntIdTipo
        , strCoTipo: _strCoTipo
        , strDeTipo: _strDeTipo
        , strAbreviatura: _strAbreviatura
        , strGrupo: _strGrupo
        , strSubGrupo: _strSubGrupo
    }

    var SesionMovi = {
        IntIdMenu: 'M0305',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }

    $.post(
        '/Asistencia/IUTGTipo',
        { Objeto: ObjetoTGTipo, intTipoOperacion: 1, objSession: SesionMovi },
        (response) => {
            console.log(response);
            if (response.type !== '') {

                if (response.type === 'success') {
                    new PNotify({
                        title: 'Nuevo Tipo',
                        text: response.message,
                        type: response.type,
                        delay: 3000,
                        styling: 'bootstrap3'
                    });

                    listarTablaTipoGrupo();
                    $('#myModal_ne').modal('toggle');

                }

                else {

                    if (response.type === 'info') { // ==============================Descripción (*) EXISTENTE

                        var nomMantemiento = 'Tipo';
                        var campo = 'txtDescripcion_ne';
                        var msj = (response.message).slice(-0, -14);
                        var response = "info";
                        var deta = 'notifry_error1';
                        //Pintar el borde del textbox del error en cuestion (del codigo)
                        document.getElementById("txtDescripcion_ne").style.borderColor = "#3498dbe0";
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                        return;

                    }

                    else if (response.type === 'info') {

                        var nomMantemiento = 'Tipo';

                        var campo = 'txtDescripcion_ne';
                        var msj = response.message;
                        var response = "info";
                        var deta = 'notifry_errordes';
                        //Pintar el borde del textbox del error en cuestion (la razon social)
                        document.getElementById("txtDescripcion_ne").style.borderColor = "#3498dbe0";

                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                        return;
                    }

                    else if (response.type === 'info') {

                        var nomMantemiento = 'Tipo';

                        var campo = 'txtAbreviatura_ne';
                        var msj = response.message;
                        var response = "info";
                        var deta = 'notifry_errordes';
                        //Pintar el borde del textbox del error en cuestion (la razon social)
                        document.getElementById("txtAbreviatura_ne").style.borderColor = "#3498dbe0";

                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                        return;
                    }



                    else { // ==============================Abreviatura (*) EXISTENTE
                        var nomMantemiento = 'Tipo';
                        var campo = 'txtAbreviatura_ne';
                        var msj = (response.message).slice(-0, -14);
                        var response = "info";
                        var deta = 'notifry_info_abreviatura';
                        //Pintar el borde del textbox del error en cuestion (la razon social)
                        document.getElementById("txtAbreviatura_ne").style.borderColor = "#3498dbe0";

                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                        return;
                    }
                }
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
});


//==================================== BOTON ACTUALIZAR =========================================
$('#btn-actualizar-tipo-grupo').on('click', function () {
    validarSession();//AÑADIDO HG 22.04.2021
    var _IntIdTipo = $('#lblIntIdTipo').text(); // ''; 
    var _strCoTipo = '';
    var _strDeTipo = $('#txtDescripcion_ne').val();
    var _strAbreviatura = $('#txtAbreviatura_ne').val();
    var _strGrupo = ''; //Tipo de Menú ó Tipo de Servicio, Lo que viene en el combo
    var _strSubGrupo = $('#cboSubGrupoTipo_ne option:selected').val(); //TIPOMENU ó TIPOSERV

    //alert('_strDeTipo--->' + _strDeTipo + '||_strAbreviatura--->' + _strAbreviatura)
    $('#notifry_error1').html('');
    $('#notifry_info_abreviatura').html('');
    $("txtDescripcion_ne").css("border-color", "#CCCCCC");
    $("txtAbreviatura_ne").css("border-color", "#CCCCCC");


    if (_strDeTipo === '' || _strAbreviatura === '' || _strSubGrupo == 0) {
        new PNotify({
            title: 'Actualizar Tipo',
            text: 'Complete los campos obligatorios',
            type: 'info',
            delay: 3000,
            styling: 'bootstrap3',
            addclass: 'dark'
        });

        $('#notifry_error1').html('');
        $('#notifry_info_abreviatura').html('');
        //$('#cboSubGrupoTipo_ne').focus(); //TIPOMENU ó TIPOSERV
        return;
    }


    var ObjetoTGTipo = {
        IntIdTipo: _IntIdTipo
        , strCoTipo: _strCoTipo
        , strDeTipo: _strDeTipo
        , strAbreviatura: _strAbreviatura
        , strGrupo: _strGrupo
        , strSubGrupo: _strSubGrupo
    }

    var SesionMovi = {
        IntIdMenu: 'M0305',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }

    $.post(
        '/Asistencia/IUTGTipo',
        { Objeto: ObjetoTGTipo, intTipoOperacion: 2, objSession: SesionMovi },
        (response) => {

            if (response.type !== '') {
                if (response.type === 'success') {
                    new PNotify({
                        title: 'Nuevo Tipo',
                        text: response.message,
                        type: response.type,
                        delay: 3000,
                        styling: 'bootstrap3'
                    });

                    listarTablaTipoGrupo();
                    $('#myModal_ne').modal('toggle');
                } else {
                    if (response.type === 'info') { // ==============================Descripción (*) EXISTENTE
                        var nomMantemiento = 'Tipo';
                        var campo = 'txtDescripcion_ne';
                        var msj = (response.message).slice(-0, -14);
                        var response = "info";
                        var deta = 'notifry_error1';
                        //Pintar el borde del textbox del error en cuestion (del codigo)
                        document.getElementById("txtDescripcion_ne").style.borderColor = "#3498dbe0";
                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                        return;

                    }

                    else if (response.type === 'info') {

                        var nomMantemiento = 'Tipo';

                        var campo = 'txtDescripcion_ne';
                        var msj = response.message;
                        var response = "info";
                        var deta = 'notifry_errordes';
                        //Pintar el borde del textbox del error en cuestion (la razon social)
                        document.getElementById("txtDescripcion_ne").style.borderColor = "#3498dbe0";

                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                        return;
                    }

                    else if (response.type === 'info') {

                        var nomMantemiento = 'Tipo';

                        var campo = 'txtAbreviatura_ne';
                        var msj = response.message;
                        var response = "info";
                        var deta = 'notifry_errordes';
                        //Pintar el borde del textbox del error en cuestion (la razon social)
                        document.getElementById("txtAbreviatura_ne").style.borderColor = "#3498dbe0";

                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                        return;
                    }



                    else { // ==============================Abreviatura (*) EXISTENTE
                        var nomMantemiento = 'Tipo';
                        var campo = 'txtAbreviatura_ne';
                        var msj = (response.message).slice(-0, -14);
                        var response = "info";
                        var deta = 'notifry_info_abreviatura';
                        //Pintar el borde del textbox del error en cuestion (la razon social)
                        document.getElementById("txtAbreviatura_ne").style.borderColor = "#3498dbe0";

                        INFO_MSJ(nomMantemiento, campo, response, msj, deta);
                        return;
                    }
                }
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
});


//================================== CARGAR COMBO TIPO ==========================================
function CargarComboTipoSubGrupo() {
    $.post(
        '/Asistencia/LlenarTipoUM',
        { strEntidad: 'TGTIPO', intIdFiltroGrupo: 0, strGrupo: 'COMEDOR', strSubGrupo: 'SERVICIOS' },
        (response) => {

            $('#cboSubGrupoTipo_ne').empty();
            $('#cboSubGrupoTipo_ne').append('<option value="0">Seleccione</option>');

            response.forEach(element => {

                $('#cboSubGrupoTipo_ne').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');

            });

        });
}

function triguer_menu_principal() {

    $("#Asistencia_Servicio").click();//Menu Principal

}

/************************************************************************************************
                            MINI MANTENIMIENTO TIPOS - FINAL
*************************************************************************************************/
//#endregion MINI MANTENIMIENTO TIPOS 



/*
    MANTENIMIENTO Empleado
    ===================
*/
//#region MANT. EMPLEADO - COMEDOR
var registros_CboRegla = 0;
var registros_CboHorario = 0;
var registros_CboMarcador = 0;
let ValRegla_ = 0;
let ValHorario_ = 0;
var activaUsuario = false;
var desactivaUsuario = false;
var activarAdmin = false;
let _vartableEmpleado = null
var Paso5_ = 0; //añadido 09.08.2021
var mailformatEmail = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/

function configEmpleadoInicial() {
    const intIdMenu = localStorage.getItem('idsubmenu') && !isNaN(localStorage.getItem('idsubmenu')) ? Number(localStorage.getItem('idsubmenu')) : 1
    const formatoFecha = 'DD/MM/YYYY'
    const dataTableId = 'TablaPersonal'
    const tituloNuevoRegistro = 'Registro Empleado'
    const tituloEliminarRegistro = 'Eliminar Empleado'
    const rangeDateInicial = {
        startDate: moment().subtract(10, 'year'),
        endDate: moment(),
    }

    return {
        intIdMenu,
        formatoFecha,
        dataTableId,
        tituloNuevoRegistro,
        tituloEliminarRegistro,
        rangeDateInicial,
    }
}
//añadido 26.08.2021
function configInputRango(startDate_, endDate_) {
    const intIdMenu = localStorage.getItem('idsubmenu') && !isNaN(localStorage.getItem('idsubmenu')) ? Number(localStorage.getItem('idsubmenu')) : 1
    const formatoFecha = 'DD/MM/YYYY'
    const dataTableId = 'Tabla'
    const tituloNuevoRegistro = 'Registro'
    const tituloEliminarRegistro = 'Eliminar'
    const rangeDateInicial = {
        startDate: moment(startDate_),
        endDate: moment(endDate_),
    }

    return {
        intIdMenu,
        formatoFecha,
        dataTableId,
        tituloNuevoRegistro,
        tituloEliminarRegistro,
        rangeDateInicial,
    }
}
function getDateRangePickerEmpleado() {
    const { formatoFecha } = configEmpleadoInicial()
    const idRange = '#filtroFechaRangeEmpleado'
    const fechaInicio = $(idRange)
        .data('daterangepicker')
        .startDate.format(formatoFecha)
    const fechaFin = $(idRange)
        .data('daterangepicker')
        .endDate.format(formatoFecha)
    return { fInicio: fechaInicio, fFin: fechaFin }
}

$('#filActiEmpleado').on('change', function () {
    validarSession()
    const date = getDateRangePickerEmpleado()
    traerDatosEmpleados(date.fInicio, date.fFin)
})

$('#filtroEmpleado').on('change', function () {
    validarSession()
    const date = getDateRangePickerEmpleado()
    traerDatosEmpleados(date.fInicio, date.fFin)
})

$('#filtroFechaRangeEmpleado').on('apply.daterangepicker', function (ev, picker) {
    validarSession()
    const { formatoFecha } = configEmpleadoInicial()
    const filtrojer_ini2 = picker.startDate.format(formatoFecha)
    const filtrojer_fin2 = picker.endDate.format(formatoFecha)
    traerDatosEmpleados(filtrojer_ini2, filtrojer_fin2)
})

async function cboResponsableInmediato(strEntidad, strGrupo) {
    const { intIdMenu } = configEmpleadoInicial()

    const dataResponsable = await $.post('/Personal/ListarComboGlobal', {
        intIdMenu: intIdMenu,
        strEntidad: strEntidad,
        intIdFiltroGrupo: 0,
        strGrupo: strGrupo,
        strSubGrupo: '',
    })
    if (dataResponsable.length) {
        $('#cboResponsableInmediato').empty()
        $('#cboResponsableInmediato').append('<option value="0">Seleccione</option>')
        $('#cboResponsableInmediato').attr('disabled', false)
        dataResponsable.forEach(element => {
            $('#cboResponsableInmediato').append('<option value="' + element.intId + '"   >' + element.strDescripcion + '</option>')
        })
        $('#cboResponsableInmediato').select2({
            language: {
                noResults: function () {
                    return "No hay resultado";
                },
                searching: function () {
                    return "Buscando...";
                }
            },
            placeholder: 'Seleccione',
            allowClear: true,
        })
    }
}

function validarEmpleadoControlesEmpleadop() {
    const { intIdMenu } = configEmpleadoInicial()
    //modificado 22.07.2021
    const soloLetrasinputFilter = /^[a-zA-ZñÑáéíóúÁÉÍÓÚÜü\s]*$/ //= /^[a-zA-Z\sáéíóú]*$/ 
    const soloLetrasNumerosInputFilter = /^[0-9a-zA-ZñÑáéíóúÁÉÍÓÚÜü]*$///= /^[A-Za-z0-9]*$/
    $('#celularEmpleado').inputFilter(function (value) {
        return /^-?\d*$/.test(value)
    })
    $('#txtNumDoc').inputFilter(function (value) {
        return /^\S*$/.test(value)
    })
    $('#fotocheckPersonal').inputFilter(function (value) {
        return soloLetrasNumerosInputFilter.test(value)
    })
    //$('#codigoExterno').inputFilter(function (value) {  //Comentado HGM 15.11.2021
    //    return soloLetrasNumerosInputFilter.test(value)   
    //})
    $('#txtApePat').inputFilter(function (value) {
        return soloLetrasinputFilter.test(value)
    })
    $('#txtApeMat').inputFilter(function (value) {
        return soloLetrasinputFilter.test(value)
    })
    $('#txtNombres').inputFilter(function (value) {
        return soloLetrasinputFilter.test(value)
    })

    //$("#codigoPensionista").inputFilter(function (value) { //Comentado HGM 15.11.2021
    //    return soloLetrasNumerosInputFilter.test(value)
    //})
    //$("#codigoDeSalud").inputFilter(function (value) { //Comentado HGM 15.11.2021
    //    return soloLetrasNumerosInputFilter.test(value)
    //})
}


//SOLUCION HGM AÑADIDO 15.12.2021
//////$('#inputSuccess2').change(function () {
//////    alert()
//////    date1 = $('#inputSuccess3').valueAsDate;
//////    date2 = $('#inputSuccess2').valueAsDate;


//////    var date = $(this).val();
//////    alert(date, 'change')

//////    //alert(date1 < date2 ? 'valid' : 'invalid');



//////    if (date1 < date2) {

//////        $('#inputSuccess2').val("10/10/2020");

//////        return;
//////    }

//////});

                     
function limpiarControlesEmpleado() {
    $('#txtNumDoc').attr('disabled', false)
    $('#txtNumDoc').val('')
    $('#fechaDeCeseValidar').val('')
    $('#fechaDefechaAdmision').val('')
    $('#DNI_PER').val(0)
    $('#txtApePat').val('')
    $('#txtApeMat').val('')
    $('#txtNombres').val('')
    $('#txtFechaNac').val('')
    $('#inputSuccess3').val('')//AÑADIDO 23.07.2021
    $('#TipVia').val(0)
    $('#TXTTIPVIA').val('')
    $('#txtFechaAdmi').val('')
    $('#inputSuccess2').val('')//añadido 23.07.2021
    $('#VistaPrevia').html(`<img id="imgCarga"  src="/DirEmpleadosRuta/descarga(1).jpg" class="img-rounded img-logo-empleado"/>`)
    $('#txtRutaEmple').val('')
    $('#txtUbigeo').val('')
    $('#txtUbigeo').attr('disabled', true)//añadido 22.02.2021ES
    $('#txtIntidUbigeo').val('')
    $('#chck_mas').iCheck('check')
    $('#Email_Emple').val('')
    $('#celularEmpleado').val('')
    $('#tagTelefonosContainer').html(`<input id="tagsTelefono" type="text" class="tags form-control tagsTelefonoGet" value=""  /><div id="suggestions-container" style="position: relative; float: left; width: 250px; margin: 10px;"></div>`)
    $('#TagEmailContainer').html(`<input id="tagsEmail" type="text" class="tags form-control tagsEmailGet" value="" /><div id="suggestions-container" style="position: relative; float: left; width: 250px; margin: 10px;"></div>`)
    //var mailformatEmail = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/

    $('#tagsEmail').tagsInput({
        width: 'auto',
        defaultText: 'Correos',
        placeholderColor: '#666666',
        pattern: mailformatEmail,
        interactive: true,
    })
    $('#tagsTelefono').tagsInput({
        width: 'auto',
        defaultText: 'Teléfonos',
        placeholderColor: '#666666',
        pattern: /^\d{9}$/,
        interactive: true,
    })
    $('#fotocheckPersonal').val('')
    $('#codigoExterno').val('')
    $('#comboFiscalizacion').val(0)
    $('#nivelDeResponsabilidad').val(0)
    $('#cargoEmpleado').val(0)
    $('#planillaEmpleado').val(0)
    $('#categoriaEmpleado').val(0)
    $('#tipoDePersonal').val(0)
    $('#tgGrupoRegistro').val(0)
    $('#centroDeCosto').val(0)
    $('#cboDependencia').val(0)
    $('#unidadOrganizacionalCbo').val(0)
    $('#contradoIndeterminado').iCheck('uncheck')
    $('#GestVac_').iCheck('uncheck')//añadido 16.08.2021
    $('#codigoPensionista').val('')
    $('#codigoDeSalud').val('')
    //$('#reglaDeNegocio').val(0)
    //$('#tgHorarioFijo').val(0)
    $('#activarUsuarioCbo').iCheck('uncheck')
    $('#fechaCeseChecbox').iCheck('uncheck')
    $('#txtFechaCese').val('')
    $('#inputSuccess1').val('')//añadido 23.07.2021
    $('#mativoDeCese').val(0)
    $('#tgTgGrupoliq').val(0)
    $('#strPersonalCampo1').val('')
    $('#strPersonalCampo2').val('')
    $('#strPersonalCampo3').val('')
    $('#strPersonalCampo4').val('')
    $('#strPersonalCampo5').val('')
    $('#marcadorMultiple option:selected').removeAttr('selected')
}

















function CombosEmpleado() {
    //alert(25684);
    const { intIdMenu } = configEmpleadoInicial()
    const soloLetrasinputFilter = /^[a-zA-Z\sáéíóú]*$/

    //añadido 01.10.2021--------------------------------------Inicio:
        //Listado de documentos ???
        $.post(
            '/Personal/ListarCombos', {
                strEntidad: 'TGPERSONAL',
                intIdFiltroGrupo: 0,
                strGrupo: 'EXISTE',
                strSubGrupo: ''
            },
            (response) => {
                $('#DNI_PER').empty();
                $('#DNI_PER').attr('disabled', false);
                $('#DNI_PER').append('<option value="0">Seleccione</option>');

                response.forEach(element => {
                    $('#DNI_PER').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
                });
            });
        $.post(
        '/Personal/ListarComboGlobal', {
            intIdMenu: 1,
            strEntidad: 'TGTIPO1REGISTRO',
            intIdFiltroGrupo: 0,
            strGrupo: 'PER',
            strSubGrupo: ''
        },
        (response) => {
            $('#nivelDeResponsabilidad').empty();
            $('#nivelDeResponsabilidad').append('<option value="0">Seleccione</option>');
            response.forEach(item => {
                $('#nivelDeResponsabilidad').append('<option value="' + item.intId + '">' + item.strDescripcion + '</option>');
            });
        });

    $.post(
        '/Personal/ListarComboGlobal', {
            intIdMenu: 1,
            strEntidad: 'TGTIPO1REGISTROTIPOREGIMEN',
            intIdFiltroGrupo: 0,
            strGrupo: 'PER',
            strSubGrupo: ''
        },
        (response) => {
            $('#nivelRegimen').empty();
            $('#nivelRegimen').append('<option value="0">Seleccione</option>');
            response.forEach(item => {
                $('#nivelRegimen').append('<option value="' + item.intId + '">' + item.strDescripcion + '</option>');
            });
        });

    $.post(
        '/Personal/ListarComboGlobal', {
            intIdMenu: 1,
            strEntidad: 'TGTIPO1REGISTROTIPOFISCALIZACION',
            intIdFiltroGrupo: 0,
            strGrupo: 'PER',
            strSubGrupo: ''
        },
        (response) => {
            $('#comboFiscalizacion').empty();
            $('#comboFiscalizacion').append('<option value="0">Seleccione</option>');
            response.forEach(item => {
                $('#comboFiscalizacion').append('<option value="' + item.intId + '">' + item.strDescripcion + '</option>');
            });
        });

    //--------------------------------------------------------------

    cboResponsableInmediato('TGPERSONALINMEDIATOOLIDERAZGO', 'TGPERSONAL')
    //LImpiar Combo Unidad Organizacional  - Nuevo
    $('#unidadOrganizacionalCbo').empty()
    $('#unidadOrganizacionalCbo').attr('disabled', false)
    $('#unidadOrganizacionalCbo').append('<option value="0">Seleccione</option>')

    validarEmpleadoControlesEmpleadop()

    $('#tagTelefonosContainer').html(`<input id="tagsTelefono" type="text" class="tags form-control tagsTelefonoGet" value=""  /><div id="suggestions-container" style="position: relative; float: left; width: 250px; margin: 10px;"></div>`)

    $('#TagEmailContainer').html(`<input id="tagsEmail" type="text" class="tags form-control tagsEmailGet" value="" /><div id="suggestions-container" style="position: relative; float: left; width: 250px; margin: 10px;"></div>`)

    //var mailformatEmail = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/
    $('#tagsEmail').tagsInput({
        width: 'auto',
        defaultText: 'Correos',
        placeholderColor: '#666666',
        pattern: mailformatEmail,
    })
    $('#tagsTelefono').tagsInput({
        width: 'auto',
        defaultText: 'Teléfonos',
        placeholderColor: '#666666',
        pattern: /^\d{9}$/,
    })

    $.post(
        '/Personal/ListarComboGlobal',
        {
            intIdMenu: intIdMenu,
            strEntidad: 'TGPERSONALCONTRACTUAL',
            intIdFiltroGrupo: 0,
            strGrupo: 'TGPERSONAL',
            strSubGrupo: '',
        },
        response => {
            $('#cboResponsableContractual').empty()
            $('#cboResponsableContractual').append('<option value="0">Seleccione</option>')
            $('#cboResponsableContractual').attr('disabled', false)
            response.forEach(element => {
                $('#cboResponsableContractual').append('<option value="' + element.intId + '"   >' + element.strDescripcion + '</option>')
            })
            $('#cboResponsableContractual').select2({
                language: {

                    noResults: function () {

                        return "No hay resultado";
                    },
                    searching: function () {

                        return "Buscando..";
                    }
                },
                placeholder: 'Seleccione',
                allowClear: true,
            })
        }
    )

    $('#nivelDeResponsabilidad').change(function () {
        let valinfo = $(this).val()
        if (valinfo == '0') {
            messageResponseMix({ type: 'info', message: 'Seleccione un Nivel de Responsabilidad' }, 'Registro Empleado')
            return false
            // 9 Inmediata o de Liderazgo
            // 10 Contractual
            // 11 Ambas (I+C)
            // 12 Ninguna
        }
    })

    $.post(
        '/Personal/ListarCombos',
        {
            intIdMenu: intIdMenu,
            strEntidad: 'TGTIPO_VIA',
            intIdFiltroGrupo: 0,
            strGrupo: '',
            strSubGrupo: '',
        },
        response => {
            $('#TipVia').empty()
            $('#TipVia').attr('disabled', false)
            $('#TipVia').append('<option value="0">--</option>')
            response.forEach(element => {
                $('#TipVia').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
            })
        })
    //Combo Tipo de Documento
    $.post(
        '/Personal/ListarComboGlobal',
        {
            intIdMenu: intIdMenu,
            strEntidad: 'TSTIPDOC02',
            intIdFiltroGrupo: 0,
            strGrupo: 'PER',
            strSubGrupo: '',
        },
        response => {
            $('#TipoDoc').empty()
            $('#TipoDoc').attr('disabled', false)
            response.forEach(element => {
                $('#TipoDoc').append('<option value="' + element.intId + '" maxdata="' + element.strCodigo + '"  >' + element.strDescripcion + '</option>')
            })
            //-------------------------------------------------------------------
            $("#TipoDoc").val(1);//añadido 21.05.2021 DNI por defecto.
            let maxdata = $('option:selected', "#TipoDoc").attr('maxdata')
            $('#txtNumDoc').attr('maxlength', maxdata)
            $('#txtNumDoc').attr('minlength', maxdata)
            //document.getElementById("txtNumDoc").focus();//añadido 21.05.2021
            //-------------------------------------------------------------------

        }
    )

    $('#TipoDoc').change(function () {
        const valorDoc = $(this).val()
        $('#txtNumDoc').val('')
        let maxdata = $('option:selected', this).attr('maxdata')

        if (valorDoc == '' || valorDoc == '0') {
            messageResponseMix({ type: 'info', message: 'Seleccione un Tipo de Documento' }, 'Registro Empleado')
            $('#txtNumDoc').prop('disabled', true)
            $('#txtNumDoc').removeAttr('maxlength')
            $('#txtNumDoc').removeAttr('minlength')
        } else {
            $('#txtNumDoc').prop('disabled', false)
            if (maxdata == '0') {
                $('#txtNumDoc').removeAttr('maxlength')
                $('#txtNumDoc').removeAttr('minlength')
            } else {
                $('#txtNumDoc').attr('maxlength', maxdata)
                $('#txtNumDoc').attr('minlength', maxdata)
            }
        }
    })

    $.post(
        '/Personal/ListarCombos',
        {
            intIdMenu: intIdMenu,
            strEntidad: 'TGPAIS',
            intIdFiltroGrupo: 0,
            strGrupo: 'EXISTE',
            strSubGrupo: '',
        },
        response => {
            $('#CboPais').empty()
            $('#CboPais').attr('disabled', false)
            if (response.length > 1) {
                $('#CboPais').append('<option value="">Seleccione</option>')
            }
            response.forEach(element => {
                $('#CboPais').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')

                //if (element.intidTipo == intIdPaisMostrar) {
                //    $('#CboPais').val(element.intidTipo)
                //}
            })
            var Valxpais_ = $('#CboPais').val()
            $.post(
                '/Personal/ListarCombos',
                {
                    intIdMenu: intIdMenu,
                    strEntidad: 'TGUBIGEO',
                    intIdFiltroGrupo: Valxpais_,
                    strGrupo: 'DIST',
                    strSubGrupo: '',
                },
                (response) => {
                    $('#CboDistrito').empty()
                    $('#CboDistrito').attr('disabled', false)
                    $('#CboDistrito').append('<option value="">Seleccione</option>')
                    response.forEach((element) => {
                        $('#CboDistrito').append('<option value="' + element.intidTipo + '" >' + element.strDeTipo + '</option>')
                    })
                }
            )

            $.post(
                '/Personal/ListarCombos',
                {
                    intIdMenu: intIdMenu,
                    strEntidad: 'TGUBIGEO',
                    intIdFiltroGrupo: Valxpais_,
                    strGrupo: 'REG',
                    strSubGrupo: '',
                },
                (response) => {
                    $('#CboProvincia').empty()
                    $('#CboProvincia').attr('disabled', false)
                    $('#CboProvincia').append('<option value="">Seleccione</option>')
                    response.forEach((element) => {
                        $('#CboProvincia').append('<option value="' + element.intidTipo + '" >' + element.strDeTipo + '</option>')
                    })
                }
            )

            $.post(
                '/Personal/ListarCombos',
                {
                    intIdMenu: intIdMenu,
                    strEntidad: 'TGUBIGEO',
                    intIdFiltroGrupo: Valxpais_,
                    strGrupo: 'DEPART',
                    strSubGrupo: '',
                },
                (response) => {
                    $('#CboRegion').empty()
                    $('#CboRegion').attr('disabled', false)
                    $('#CboRegion').append('<option value="">Seleccione</option>')
                    response.forEach((element) => {
                        $('#CboRegion').append('<option value="' + element.intidTipo + '" >' + element.strDeTipo + '</option>')
                    })
                }
            )

        }
    )

    $('#CboPais').on('change', function () {//nuevo
        var Valxpais = $('#CboPais').val()

        if (Valxpais > 0) {

            $.post(
                '/Personal/ListarCombos',
                {
                    intIdMenu: intIdMenu,
                    strEntidad: 'TGUBIGEO',
                    intIdFiltroGrupo: Valxpais,
                    strGrupo: 'DEPART',
                    strSubGrupo: '',
                },
                response => {
                    if (response.length > 0) {
                        $('#CboRegion').empty()
                        $('#CboRegion').attr('disabled', false)
                        if (response.length > 1) {
                            $('#CboRegion').append('<option value="">Seleccione</option>')
                        }
                        response.forEach(element => {
                            $('#CboRegion').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
                        })
                    } else {
                        $('#CboRegion').empty()
                        $('#CboRegion').attr('disabled', true)
                        $('#CboRegion').append('<option value="">No hay Departamentos</option>')
                    }
                    //añadido 05/08/2021
                    $('#CboProvincia').empty()
                    $('#CboProvincia').attr('disabled', true)
                    $('#CboProvincia').append('<option value="">Selec. un Departamento</option>')
                    $('#CboDistrito').empty()
                    $('#CboDistrito').attr('disabled', true)
                    $('#CboDistrito').append('<option value="">Selec. una Provincia</option>')
                }
            )

        } else {
            //añadido 05/08/2021
            $('#CboRegion').empty()
            $('#CboRegion').attr('disabled', true)
            $('#CboRegion').append('<option value="">Selec. un País</option>')
            $('#CboProvincia').empty()
            $('#CboProvincia').attr('disabled', true)
            $('#CboProvincia').append('<option value="">Selec. un Departamento</option>')
            $('#CboDistrito').empty()
            $('#CboDistrito').attr('disabled', true)
            $('#CboDistrito').append('<option value="">Selec. una Provincia</option>')
        }
    })

    $('#CboRegion').on('change', function () { //NUEVO
        var ValDpto = $('#CboRegion').val()

        if (ValDpto > 0) {
            $.post(
                '/Personal/ListarCombos',
                {
                    intIdMenu: intIdMenu,
                    strEntidad: 'TGUBIGEO',
                    intIdFiltroGrupo: ValDpto,
                    strGrupo: 'REG',
                    strSubGrupo: '',
                },
                response => {
                    if (response.length > 0) {
                        $('#CboProvincia').empty()
                        $('#CboProvincia').attr('disabled', false)
                        //$('#CboProvincia').append('<option value="">Seleccione</option>')
                        if (response.length > 1) {
                            $('#CboProvincia').append('<option value="">Seleccione</option>')
                        }

                        response.forEach(element => {
                            $('#CboProvincia').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
                        })
                        var ValProv = $('#CboProvincia').val()
                        if (ValProv > 0) {
                            $.post(
                                '/Personal/ListarCombos',
                                {
                                    intIdMenu: intIdMenu,
                                    strEntidad: 'TGUBIGEO',
                                    intIdFiltroGrupo: ValProv,
                                    strGrupo: 'DIST',
                                    strSubGrupo: '',
                                },
                                response => {
                                    if (response.length > 0) {
                                        $('#CboDistrito').empty()
                                        $('#CboDistrito').attr('disabled', false)
                                        //$('#CboDistrito').append('<option value="">Seleccione</option>')
                                        if (response.length > 1) {
                                            $('#CboDistrito').append('<option value="">Seleccione</option>')
                                        }
                                        response.forEach(element => {
                                            $('#CboDistrito').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
                                        })
                                    }
                                    else {
                                        //añadido 05/08/2021
                                        $('#CboDistrito').empty()
                                        $('#CboDistrito').attr('disabled', true)
                                        $('#CboDistrito').append('<option value="">No hay Distritos</option>')
                                    }
                                }
                            )
                        } else {
                            $('#CboDistrito').empty()
                            $('#CboDistrito').attr('disabled', true)
                            $('#CboDistrito').append('<option value="">Selec. una Provincia</option>')
                        }
                    }
                    else {
                        //añadido 05/08/2021
                        $('#CboProvincia').empty()
                        $('#CboProvincia').attr('disabled', true)
                        $('#CboProvincia').append('<option value="">No hay Provincias</option>')
                        $('#CboDistrito').empty()
                        $('#CboDistrito').attr('disabled', true)
                        $('#CboDistrito').append('<option value="">No hay Distritos</option>')
                    }
                    //$('#CboDistrito').empty()
                    //$('#CboDistrito').attr('disabled', true)
                    //$('#CboDistrito').append('<option value="">Selec. una Provincia</option>')

                }
            )

        }
        else {
            //añadido 05/08/2021
            $('#CboProvincia').empty()
            $('#CboProvincia').attr('disabled', true)
            $('#CboProvincia').append('<option value="">Selec. un Departamento</option>')
            $('#CboDistrito').empty()
            $('#CboDistrito').attr('disabled', true)
            $('#CboDistrito').append('<option value="">Selec. una Provincia</option>')
        }


    })

    $('#CboProvincia').on('change', function () {//nuevo
        var ValProv = $('#CboProvincia').val()
        if (ValProv > 0) {
            $.post(
                '/Personal/ListarCombos',
                {
                    intIdMenu: intIdMenu,
                    strEntidad: 'TGUBIGEO',
                    intIdFiltroGrupo: ValProv,
                    strGrupo: 'DIST',
                    strSubGrupo: '',
                },
                response => {
                    if (response.length > 0) {
                        $('#CboDistrito').empty()
                        $('#CboDistrito').attr('disabled', false)
                        //$('#CboDistrito').append('<option value="">Seleccione</option>')
                        if (response.length > 1) {
                            $('#CboDistrito').append('<option value="">Seleccione</option>')
                        }
                        response.forEach(element => {
                            $('#CboDistrito').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
                        })
                    }
                    else {
                        //añadido 05/08/2021
                        $('#CboDistrito').empty()
                        $('#CboDistrito').attr('disabled', true)
                        $('#CboDistrito').append('<option value="">No hay Distritos</option>')
                    }
                }
            )
        } else {
            $('#CboDistrito').empty()
            $('#CboDistrito').attr('disabled', true)
            $('#CboDistrito').append('<option value="">Selec. una Provincia</option>')
        }
    })

    $.post(
        '/Personal/ListarCombos',
        {
            intIdMenu: intIdMenu,
            strEntidad: 'TGPERFIL',
            intIdFiltroGrupo: 0,
            strGrupo: 'PERFILEMPLEADO',
            strSubGrupo: '',
        },
        response => {
            $('#cboPerfilAdmin').empty()
            $('#cboPerfilAdmin').append('<option value="0">Seleccione</option>')
            response.forEach(item => {
                $('#cboPerfilAdmin').append('<option value="' + item.intidTipo + '">' + item.strDeTipo + '</option>')
            })
        }
    )

    $.post(
        '/Personal/ListarCombos',
        {
            intIdMenu: intIdMenu,
            strEntidad: 'TGJERARQORG',
            intIdFiltroGrupo: 0,
            strGrupo: 'DEPEN',
            strSubGrupo: 'EMPRESADEPEN',
        },
        response => {
            $('#cboDependencia').empty()
            $('#cboDependencia').attr('disabled', false)
            $('#cboDependencia').append('<option value="0">Seleccione</option>')
            response.forEach(element => {
                $('#cboDependencia').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
            })
        }
    )

    $('#cboDependencia').change(function () {
        let idDependencia = $(this).val()
        if (idDependencia == '0') {
            $('#unidadOrganizacionalCbo').empty()
            $('#unidadOrganizacionalCbo').attr('disabled', true)
            messageResponseMix({ type: 'info', message: 'Seleccione una Dependencia ' }, 'Registro Empleado')
            return false
        }
        $.post('/Personal/ListarCombos', {
            strEntidad: 'TGPERFIL',
            intIdFiltroGrupo: idDependencia,
            strGrupo: 'UNIORG',
            strSubGrupo: ''
        }, response => {
            $('#unidadOrganizacionalCbo').empty()
            $('#unidadOrganizacionalCbo').attr('disabled', false)
            $('#unidadOrganizacionalCbo').append('<option value="0">Seleccione</option>')
            response.forEach(element => {
                $('#unidadOrganizacionalCbo').append('<option value="' + element.intidTipo + '" >' + element.strDeTipo + '</option>')
            })
        })
    })

    $('#fechaCeseChecbox').on('ifChanged', function () {
        if ($('#fechaCeseChecbox').is(':checked') == true) {
            $('#tgTgGrupoliq').attr('disabled', false)
            $('#txtFechaCese').attr('disabled', false)
            $('#inputSuccess1').attr('disabled', false)//añadido 23.07.2021
            $('#mativoDeCese').attr('disabled', false)

            //Cargar Combo Motivo
            $.post(
                '/Personal/ListarComboGlobal',
                {
                    intIdMenu: 1,
                    strEntidad: 'TGMOTIVOREGISTRO',
                    intIdFiltroGrupo: 0,
                    strGrupo: 'TGMOTIVO',
                    strSubGrupo: '',
                },
                response => {
                    $('#mativoDeCese').empty()
                    $('#mativoDeCese').append('<option value="0">Seleccione</option>')
                    response.forEach(item => {
                        $('#mativoDeCese').append('<option value="' + item.intId + '">' + item.strDescripcion + '</option>')
                    })
                }
            )
        } else if ($('#fechaCeseChecbox').is(':checked') == false) {
            $('#tgTgGrupoliq').attr('disabled', true)
            $('#tgTgGrupoliq').val(0)
            $('#txtFechaCese').attr('disabled', true)
            $('#inputSuccess1').attr('disabled', true)//añadido 23.07.2021
            $('#inputSuccess1').val("")//añadido 23.07.2021
            $('#txtFechaCese').val("")
            $('#mativoDeCese').attr('disabled', true)
            $('#mativoDeCese').val("")
        }
    })
    //Añadiendo un Nuevo Objeto MARCADNI HG 19.02.21  --MOVIDO DESDE EL HTML
    $('#CheckboxVigenciaMarcaConDni').on('ifChanged', function () {
        if ($('#CheckboxVigenciaMarcaConDni').is(':checked') == true) {

            $('#txtFechaInicioVegencia').attr('disabled', false);
            $('#txtFechaFinVegencia').attr('disabled', false);

        } else if ($('#fechaCeseChecbox').is(':checked') == false) {

            $('#txtFechaInicioVegencia').attr('disabled', true);
            $('#txtFechaFinVegencia').attr('disabled', true);
            $('#txtFechaInicioVegencia').val('');
            $('#txtFechaFinVegencia').val('');

        }
    })

    $("#planillaEmpleado").change(function () {
        let id = $(this).val()
        $.post('/Personal/ListarComboGlobal', {
            intIdMenu: 1,
            strEntidad: 'TGGRUPOLIQREGISTRO',
            intIdFiltroGrupo: id,
            strGrupo: 'TGGRUPOLIQ',
            strSubGrupo: 'U',
        },
            (response) => {
                $('#tgTgGrupoliq').empty()
                $('#tgTgGrupoliq').append('<option value="0">Seleccione</option>')
                response.forEach(item => {
                    $('#tgTgGrupoliq').append('<option value="' + item.intId + '">' + item.strDescripcion + '</option>')
                })
            }
        )
    })

    $('#activarUsuarioCbo').on('ifChanged', function () {
        if ($('#activarUsuarioCbo').is(':checked') == true) {
            $('#activarUsuarioAdmin').attr('disabled', false)
        } else if ($('#activarUsuarioCbo').is(':checked') == false) {
            $('#activarUsuarioAdmin').iCheck('uncheck')
            $('#activarUsuarioAdmin').attr('disabled', true)
        }
        $('#cboPerfilAdmin').attr('disabled', true)
        $('#cboPerfilAdmin').val(0)
    })

    $('#activarUsuarioAdmin').on('ifChanged', function () {
        if ($('#activarUsuarioAdmin').is(':checked') == true) {
            $('#cboPerfilAdmin').attr('disabled', false)
        } else if ($('#activarUsuarioAdmin').is(':checked') == false) {
            $('#cboPerfilAdmin').attr('disabled', true)
            $('#cboPerfilAdmin').attr('disabled', true)
            $('#cboPerfilAdmin').val(0)
        }
    })

    //busqueda validacion

    $('#txtNumDoc').keypress(function (e) {
        $('#intIdPersonalReg').val('0')
        $('#fechaDeCeseValidar').val('')
        $('#fechaDefechaAdmision').val('')
        $('#txtUbigeo').attr('disabled', true);
        var ValidaDocum = $('#DNI_PER').val()

        if (e.which == 13) {
            validarSession()
            $('#intIdPersonalReg').val('0')
            $('#fechaDeCeseValidar').val('')
            $('#fechaDefechaAdmision').val('')
            if ($('#TipoDoc').val() == '0') {
                messageResponseMix({ type: 'info', message: 'Seleccione un tipo de documento' }, 'Registro Empleado')
                $('#TipoDoc').focus()
                return false
            }

            let fechaMostrarPorDefecto = moment().format('DD/MM/YYYY')
            $('#txtFechaAdmi').val(fechaMostrarPorDefecto)
            //----------------------------------------------------------
            //AÑADIDO 23.07.2021
            if (fechaMostrarPorDefecto != null) {
                var x = fechaMostrarPorDefecto.substr(6, 4) + '-' + fechaMostrarPorDefecto.substr(3, 2) + '-' + fechaMostrarPorDefecto.substr(0, 2);
                $('#inputSuccess2').val(x);
            } else {
                $('#inputSuccess2').val("");
            }
            //----------------------------------------------------------
            var NumDoc = $('#txtNumDoc').val()

            if (NumDoc == '') {
            } else if (NumDoc !== '') {
                var IntIdPersonaleValida = null
                var codPersonalHideen = null
                var numRegistroPersonalHideen = null
                var intIdTipDocConsulta = 1
                var fechaDeCeseValidar = null

                if ($('#TipoDoc').val() != '0') {
                    intIdTipDocConsulta = $('#TipoDoc').val()
                }
                $.post(
                    '/Personal/ValidarDocIdentidad',
                    {
                        intIdTipDoc: Number(intIdTipDocConsulta),
                        strNumDoc: NumDoc,
                    },
                    response => {
                        if (response.length) {
                            let data = response[0]
                            if (data.hasOwnProperty('intIdPersonal')) {
                                IntIdPersonaleValida = data.intIdPersonal

                                codPersonalHideen = data.strCodPersonal

                                messageResponseMix({ type: 'info', message: data.strObservacion }, 'Valida Empleado')

                                $('#intIdPersonalReg').val(IntIdPersonaleValida)
                                $('#intTipoOperacion').val('1')
                                $('#codPersonalHideen').val(codPersonalHideen)
                                $('#numRegistroPersonalHideen').val(data.strNumRegist.trim())
                                numRegistroPersonalHideen = data.strNumRegist.trim()
                                $('#codigoDeRegistro').val(data.strCodPersonal.trim() + '-' + data.strNumRegist.trim())
                                // validando documento inicio
                                if (data.intExiste == 1) {
                                    return false
                                }
                                $('#DNI_PER option')
                                    .filter(function () {
                                        return this.text == String(NumDoc)
                                    })
                                    .attr('selected', true)

                                ValidaDocum = $('#DNI_PER').val()

                                if (ValidaDocum !== '0') {
                                    const valorDocumento = $('#txtNumDoc').val()

                                    $('#txtNumDoc').attr('disabled', true)
                                    $('#Mensaje_Info').html(`${data.strObservacion}`)

                                    $('#msgVerifDoc').html('&nbsp;&nbsp;&nbsp;<i class="fa fa-lock" style="color:green;font-size:25px;" id="HabNumDoc"></i>')
                                    $(".disabled_Doc").attr("disabled", false)
                                    // alert(IntIdPersonaleValida);

                                    $.post(
                                        '/Personal/ObtenerRegistroEmpleado',
                                        {
                                            intIdPersonal: IntIdPersonaleValida,
                                        },
                                        response => {
                                            response.forEach(element => {
                                                $('#fechaDeCeseValidar').val(element.dttFecCese)
                                                $('#fechaDefechaAdmision').val(element.dttFecAdmin)

                                                fechaDeCeseValidar = element.dttFecCese
                                                $('#txtApePat').val(element.strApePaterno)
                                                $('#txtApeMat').val(element.strApeMaterno)
                                                $('#txtNombres').val(element.strNombres)
                                                $('#txtFechaNac').val(element.dttFecNacim)
                                                //----------------------------------------------------------
                                                //AÑADIDO 23.07.2021
                                                if (element.dttFecNacim != null) {
                                                    var x = element.dttFecNacim.substr(6, 4) + '-' + element.dttFecNacim.substr(3, 2) + '-' + element.dttFecNacim.substr(0, 2);
                                                    $('#inputSuccess3').val(x);
                                                } else {
                                                    $('#inputSuccess3').val("");
                                                }
                                                //----------------------------------------------------------
                                                $('#TipVia').val(element.intIdTipoVia)
                                                $('#TXTTIPVIA').val(element.strDireccion)
                                                //$('#txtFechaAdmi').val(element.dttFecAdmin)

                                                if (element.bitflSexo == true) {
                                                    $('#chck_mas').iCheck('check')
                                                    //$('#chck_fem').iCheck('uncheck');
                                                } else if (element.bitflSexo == false) {
                                                    $('#chck_fem').iCheck('check')
                                                    // $('#chck_mas').iCheck('uncheck');
                                                }

                                                $('#CboPais').val(element.intIdUbiSupPais)

                                                $('#fotocheckPersonal').val(element.strFotocheck)

                                                $('#txtIntidUbigeo').val(element.intIdUbigeo)

                                                $('#Mensaje_Info').css('color', 'green')

                                                if (element.imgFoto != null) {
                                                    //$('#VistaPrevia').html(`<img id="imgCarga"  src="/DirEmpleadosRuta/${element.imgFoto}" class="img-rounded img-logo-empleado"/>`)
                                                    Imagen_GC(element.imgFoto, "Empleado");//añadido 26.03.2021
                                                    $('#txtRutaEmple').val(element.imgFoto)

                                                } else {
                                                    $('#VistaPrevia').html(`<img id="imgCarga" src="/images/descarga(1).jpg" class="img-rounded img-logo-empleado"/>`)
                                                    $('#txtRutaEmple').val('')
                                                }

                                                var INTIDTPEVAL = $('#txtIntidUbigeo').val()
                                                var INTIDSUPUBI = element.intIdUbigSup
                                                var INTIDSUPUBIREGION = element.intIdUbiSupReg
                                                var intIdProvinciaMostrar = element.intIdUbiReg
                                                var intIdRegionMostrar = element.intIdUbiPais

                                                $.post(
                                                    '/Personal/ListarCombos',
                                                    {
                                                        strEntidad: 'TGUBIGEO',
                                                        intIdFiltroGrupo: element.intIdUbiSupPais,
                                                        strGrupo: 'DEPART',
                                                        strSubGrupo: '',
                                                    },
                                                    response => {
                                                        console.log(response)
                                                        $('#CboRegion').empty()
                                                        $('#CboRegion').attr('disabled', false)
                                                        $('#CboRegion').append('<option value="">Seleccione</option>')
                                                        response.forEach(element => {
                                                            $('#CboRegion').append('<option value="' + element.intidTipo + '" >' + element.strDeTipo + '</option>')
                                                            if (element.intidTipo == intIdRegionMostrar) {
                                                                $('#CboRegion').val(element.intidTipo)
                                                            }
                                                        })
                                                    }
                                                )

                                                $.post(
                                                    '/Personal/ListarCombos',
                                                    {
                                                        strEntidad: 'TGUBIGEO',
                                                        intIdFiltroGrupo: INTIDSUPUBI,
                                                        strGrupo: 'DIST',
                                                        strSubGrupo: '',
                                                    },
                                                    response => {
                                                        $('#CboDistrito').empty()
                                                        $('#CboDistrito').attr('disabled', false)
                                                        $('#CboDistrito').append('<option value="">Seleccione</option>')
                                                        response.forEach(element => {
                                                            $('#CboDistrito').append('<option value="' + element.intidTipo + '" >' + element.strDeTipo + '</option>')
                                                            if (element.intidTipo == INTIDTPEVAL) {
                                                                $('#CboDistrito').val(element.intidTipo)
                                                                $('#txtUbigeo').val(element.strDeTipo)
                                                                $('#txtUbigeo').attr('disabled', true)
                                                            }
                                                        })
                                                    }
                                                )

                                                $.post(
                                                    '/Personal/ListarCombos',
                                                    {
                                                        strEntidad: 'TGUBIGEO',
                                                        intIdFiltroGrupo: INTIDSUPUBIREGION,
                                                        strGrupo: 'REG',
                                                        strSubGrupo: '',
                                                    },
                                                    response => {
                                                        $('#CboProvincia').empty()
                                                        $('#CboProvincia').attr('disabled', false)
                                                        $('#CboProvincia').append('<option value="">Seleccione</option>')
                                                        response.forEach(element => {
                                                            $('#CboProvincia').append('<option value="' + element.intidTipo + '" >' + element.strDeTipo + '</option>')
                                                            if (element.intidTipo == intIdProvinciaMostrar) {
                                                                $('#CboProvincia').val(element.intidTipo)
                                                            }
                                                        })
                                                    }
                                                )

                                                var NumeroAleatorio = Math.floor(Math.random() * (999 - 99)) + 99
                                                var PrimeraLetraNombre = element.strNombres.substring(0, 1)
                                                var TresPrimerasLetrasApePater = element.strApeMaterno.substring(0, 3)
                                                var TresPrimerosNumerosDI = element.strNumDoc.substring(0, 3)

                                                let codPersonalUsuario = PrimeraLetraNombre + '' + TresPrimerasLetrasApePater + '' + NumeroAleatorio + '' + TresPrimerosNumerosDI
                                                //$('#codigoDeRegistro').val(codPersonalUsuario.toUpperCase() + '-' + numRegistroPersonalHideen)
                                            })
                                        }
                                    )

                                    $('#HabNumDoc').on('click', function () {
                                        swal({
                                            title: 'Cambiar Doc. Identidad',
                                            text: 'Se perderá toda la información ingresada',
                                            type: 'warning',
                                            showCancelButton: true,
                                            confirmButtonText: 'Sí, cambiar',
                                            cancelButtonText: 'No, cancelar',
                                        }).then(function (isConfirm) {
                                            $("#Mensaje_Info").html("")
                                            $('#txtNumDoc').attr('disabled', false)
                                            $('#txtNumDoc').val('')
                                            $('#fechaDeCeseValidar').val('')
                                            $('#fechaDefechaAdmision').val('')
                                            $('#DNI_PER').val(0)
                                            $('#msgVerifDoc').html('&nbsp;&nbsp;&nbsp;<i class="fa fa-unlock" style="color:red;font-size:25px;"></i>')
                                            $('#leyenda_').show();//añadido 09.08.2021
                                            limpiarControlesEmpleado()
                                            $(".disabled_Doc").attr("disabled", true)
                                        }, function (dismiss) {
                                            if (dismiss == 'cancel') {
                                                //swal("Cancelado", "La Operación fue cancelada", "error");
                                            }
                                        });
                                    })
                                } else if (ValidaDocum == '0') {
                                    $('#DNI_PER').val(0)
                                    $('#txtNumDoc').attr('disabled', true)
                                    $('#msgVerifDoc').html('&nbsp;&nbsp;&nbsp;<i class="fa fa-lock" style="color:green;font-size:25px;" id="HabNumDoc"></i>')
                                    $('#Mensaje_Info').html('Complete sus Datos (*)')
                                    $('#leyenda_').hide();//añadido 09.08.2021
                                    $('#HabNumDoc').on('click', function () {
                                        swal({
                                            title: 'Cambiar Doc. Identidad',
                                            text: 'Se perderá toda la información ingresada',
                                            type: 'warning',
                                            showCancelButton: true,
                                            confirmButtonText: 'Sí, cambiar',
                                            cancelButtonText: 'No, cancelar',
                                        }).then(function (isConfirm) {
                                            $("#Mensaje_Info").html("")
                                            $('#leyenda_').show();//añadido 09.08.2021
                                            $('#txtNumDoc').attr('disabled', false)
                                            $('#txtNumDoc').val('')
                                            $('#fechaDeCeseValidar').val('')
                                            $('#fechaDefechaAdmision').val('')
                                            $('#DNI_PER').val(0)
                                            $('#msgVerifDoc').html('&nbsp;&nbsp;&nbsp;<i class="fa fa-unlock" style="color:red;font-size:25px;"></i>')
                                            limpiarControlesEmpleado()
                                            $(".disabled_Doc").attr("disabled", true)
                                        }, function (dismiss) {
                                            if (dismiss == 'cancel') {
                                                //swal("Cancelado", "La Operación fue cancelada", "error");
                                            }
                                        });
                                    })
                                }
                                // validando documento fin
                            } else {
                                $('#intTipoOperacion').val('1')
                                $('#fechaDeCeseValidar').val('')
                                $('#fechaDefechaAdmision').val('')
                                $('#txtNumDoc').attr('disabled', false)
                                $('#txtNumDoc').val('')
                                $('#DNI_PER').val(0)
                                $('#msgVerifDoc').html('&nbsp;&nbsp;&nbsp;<i class="fa fa-unlock" style="color:red;font-size:25px;"></i>')
                                limpiarControlesEmpleado()
                            }
                        } else if (response.type == 'success') {
                            let dataObjet = response.objeto
                            let fechaMostrarPorDefecto = moment().format('DD/MM/YYYY')
                            $('#txtFechaAdmi').val(fechaMostrarPorDefecto)
                            //----------------------------------------------------------
                            //AÑADIDO 23.07.2021
                            if (fechaMostrarPorDefecto != null) {
                                var x = fechaMostrarPorDefecto.substr(6, 4) + '-' + fechaMostrarPorDefecto.substr(3, 2) + '-' + fechaMostrarPorDefecto.substr(0, 2);
                                $('#inputSuccess2').val(x);
                            } else {
                                $('#inputSuccess2').val("");
                            }
                            //----------------------------------------------------------
                            $('#intTipoOperacion').val('1')
                            $('#fechaDeCeseValidar').val('')
                            $('#fechaDefechaAdmision').val('')
                            $('#txtNumDoc').attr('disabled', true)
                            $('#TipoDoc').attr('disabled', true)
                            $('#msgVerifDoc').html('&nbsp;&nbsp;&nbsp;<i class="fa fa-lock" style="color:green;font-size:25px;" id="HabNumDoc"></i>')
                            //messageResponseMix({ type: 'error', message: response.message }, 'Registro Empleado')
                            $('#codPersonalHideen').val(dataObjet.strCodPersonal.trim())
                            $('#numRegistroPersonalHideen').val(dataObjet.strNumRegist.trim())
                            $('#codigoDeRegistro').val(dataObjet.strCodPersonal.trim() + '-' + dataObjet.strNumRegist.trim())
                            $('#DNI_PER').val(0)
                            $('#Mensaje_Info').html(`${response.message}`)
                            $('#Mensaje_Info').css('color', 'red')
                            $('#leyenda_').hide();//añadido 09.08.2021
                            $('#txtApePat').val('')
                            $('#txtApeMat').val('')
                            $('#txtNombres').val('')
                            $('#txtFechaNac').val('')
                            //----------------------------------------------------------
                            //AÑADIDO 23.07.2021
                            $('#inputSuccess3').val('');
                            //----------------------------------------------------------

                            $('#TipVia').val(0)
                            $('#TXTTIPVIA').val('')
                            $('#chck_mas').iCheck('check')
                            $('#chck_fem').iCheck('uncheck')
                            $('#VistaPrevia').html(`<img id="imgCarga"  src="/DirEmpleadosRuta/descarga(1).jpg" class="img-rounded img-logo-empleado"/>`)
                            $('#txtRutaEmple').val('')
                            $(".disabled_Doc").attr("disabled", false)

                            $('#HabNumDoc').on('click', function () {
                                swal({
                                    title: 'Cambiar Doc. Identidad',
                                    text: 'Se perdera toda la información ingresada',
                                    type: 'warning',
                                    showCancelButton: true,
                                    confirmButtonText: 'Sí, cambiar',
                                    cancelButtonText: 'No, cancelar',
                                }).then(function (isConfirm) {
                                    $("#Mensaje_Info").html("")
                                    $('#TipoDoc').attr('disabled', false)
                                    $('#txtNumDoc').attr('disabled', false)
                                    $('#txtNumDoc').val('')
                                    $('#fechaDeCeseValidar').val('')
                                    $('#fechaDefechaAdmision').val('')
                                    $('#DNI_PER').val(0)
                                    $('#msgVerifDoc').html('&nbsp;&nbsp;&nbsp;<i class="fa fa-unlock" style="color:red;font-size:25px;"></i>')

                                    limpiarControlesEmpleado()
                                    $(".disabled_Doc").attr("disabled", true)
                                }, function (dismiss) {
                                    if (dismiss == 'cancel') {
                                        //swal("Cancelado", "La Operación fue cancelada", "error");
                                    }
                                });
                            })
                        }
                    }
                )
            }
        }

        valor = $('#txtNumDoc').val()
        $('#txtUbigeo').attr('disabled', true);
    })
}

function wizarEmpleadosValidacion(tipoOperacionPass) {
    const { intIdMenu, formatoFecha } = configEmpleadoInicial()
    let titleToast = 'Nuevo Empleado'
    if (tipoOperacionPass == 2) {
        titleToast = 'Editar Empleado'
    }
    // validacion de pasos
    var pasoUnoValidate = false
    var pasoDosValidate = false
    var pasoTresValidate = false
    var pasoCuatroValidate = false

    $('#wizarpaso2').click(function () {
        if (pasoUnoValidate) {
        } else {
            $('#wizard').smartWizard('goToStep', 1)
        }
    })

    $('#wizarpaso3').click(function () {
        if (pasoUnoValidate && pasoDosValidate) {
        } else {
            $('#wizard').smartWizard('goToStep', 2)
        }
    })

    $('#wizarpaso4').click(function () {
        if (pasoUnoValidate && pasoDosValidate && pasoTresValidate) {
        } else {
            $('#wizard').smartWizard('goToStep', 3)
        }
    })

    return pasoUnoValidate && pasoDosValidate && pasoTresValidate && pasoCuatroValidate
}

$('#chk_fecha').on('ifChanged', function () {
    if ($('#chk_fecha').is(':checked') == true) {
        $('#salto').hide();//22.07.2021
        $('#filtroFechaRangeEmpleado').show();//22.07.2021
    } else {
        $('#salto').show();//22.07.2021
        $('#filtroFechaRangeEmpleado').hide();//22.07.2021
    }
    validarSession()
    const date = getDateRangePickerEmpleado()
    traerDatosEmpleados(date.fInicio, date.fFin)
})

function traerDatosEmpleados(filtrojer_ini_var = null, filtrojer_fin_var = null) {
    const datePicker = getDateRangePickerEmpleado()
    const { dataTableId, intIdMenu, formatoFecha } = configEmpleadoInicial()

    let filtrosActivo = $('#filActiEmpleado').val() != '' ? $('#filActiEmpleado').val() : 2
    let strfiltro = $('#filtroEmpleado').val()
    let filtrojer_ini = filtrojer_ini_var ? filtrojer_ini_var : datePicker.fInicio
    let filtrojer_fin = filtrojer_fin_var ? filtrojer_fin_var : datePicker.fFin
    let intIdUniOrg = $("#intIdUniOrg").val()

    const { loaderHtml } = APPCONFIG
    var BitFecha = 0
    if ($('#chk_fecha').is(":checked")) {
        BitFecha = 1
    }

    $(`#${dataTableId} tbody`).html(`<tr><td colspan="100%" ><div class="min-height-300">${loaderHtml}</div></td></tr>`)

    $.ajax({
        url: '/Personal/GetTablaPersonal',
        type: 'POST',
        data: {
            intIdMenu: intIdMenu,
            IntActivoFilter: filtrosActivo,
            strfilter: strfiltro,
            dttfiltrofch1: filtrojer_ini,
            dttfiltrofch2: filtrojer_fin,
            intIdUniOrg: intIdUniOrg
            , BitFecha: BitFecha //añadido 22.07.2021
        },
        beforeSend: function () {
            $.blockUI({
                css: {
                    border: 'none',
                    padding: '15px',
                    backgroundColor: '#000',
                    '-webkit-border-radius': '10px',
                    '-moz-border-radius': '10px',
                    opacity: .5,
                    color: '#fff'
                },
                message: 'Procesando...'
            });
        },
        success: function (response) {
            let dataJson = response

            $(`#${dataTableId} tbody`).empty()

            if (dataJson.length == 0) {
                dataJson = []
            }

            if (_vartableEmpleado !== null) {
                _vartableEmpleado.destroy()
            }

            _vartableEmpleado = $(`#${dataTableId}`).DataTable({
                data: dataJson,
                columns: [
                    { data: 'strCoPersonal' },
                    { data: 'strNombres' },
                    { data: 'strNumDoc' },
                    { data: 'dttFecAdmin' },
                    { data: 'bitEspecifica_DESC' },
                    {
                        sortable: false,
                        render: (data, type, item, meta) => {
                            return `<button class="btn btn-success btn-xs btn-edit" dataid="${item.intIdPersonal}" ><i class="fa fa-pencil"></i> Editar </button>
                                    <button class="btn btn-primary btn-xs btn-delete" dataid="${item.intIdPersonal}" des_data="${item.strNombres}"  ><i class="fa fa-trash-o"></i> Eliminar </button>
                                    <button class="btn btn-dark btn-xs btn-resend" dataid="${item.intIdPersonal}"><i style="cursor: pointer;" class="fa fa-paper-plane" aria-hidden="true"></i></button>
                                    `
                        },
                    },
                    { data: 'intIdPersonal' },
                ],
                lengthMenu: [10, 25, 50],
                responsive: true,
                language: _datatableLanguaje,
                columnDefs: [
                    {
                        targets: [6], //IntIdJerOrg
                        visible: false,
                        searchable: false,
                    },
                ],
                order: [],
                dom: 'lBfrtip',
            })
        },
        complete: function () {
            $.unblockUI();
        },
        error: (xhr, status, error) => {
            $(`#${dataTableId} tbody`).empty()
            $(`#${dataTableId}_info`).empty()
            $(`#${dataTableId}_paginate`).empty()
            $(`#${dataTableId} tbody`).html(`<tr><td colspan="100%" ><div class="min-height-300 flex-error"><div class="alert alert-danger">Hubo un error al listar. ${error.statusText}. Código de error: ${error.status}</div></div></td></tr>`)
        }
    })
}

function setMaxLengthInput(id, maxLength) {
    $(`#${id}`).attr('maxlength', `${maxLength}`)
}

async function NuevoEmpleadoVista(editar) {
    const dataVista = await $.post('/Personal/NuevoEmpleado', {})
    if (dataVista !== '') {
        $('.form-hide-empleado .x_content').empty()
        $('.form-hide-empleado .x_content').html(dataVista)
        switcheryLoad()
        init_checkBox_styles()
        cargarDaterangePicker()
        init_daterangepicker()


        $.post('/Personal/GetHabGeo', {},
            (response) => {
                if (response) {
                    $("#wizarpaso5").show()
                    Paso5_ = 1;
                } else {
                    Paso5_ = 0;
                    $("#wizarpaso5").hide();
                    $('.wizard_steps').find('li:eq(4)').remove();
                    $(".p-3").hide();
                    $("#step-5").hide();
                }
            }
        )

        const dataCboEmpresa = await $.post('/Personal/ListarCombos', {
            intIdMenu: 0,
            strEntidad: 'TGPERSONAL',
            intIdFiltroGrupo: 0,
            strGrupo: 'EMPRESA',
            strSubGrupo: '',
        })
        if (dataCboEmpresa.length) {
            $('#cboEmpresa').empty()
            $('#cboEmpresa').attr('disabled', false)
            $('#cboEmpresa').append('<option value="0">Seleccione</option>')
            dataCboEmpresa.forEach(element => {
                $('#cboEmpresa').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
            })
        }

        //no modificar esto porque es para nuevo empleado (#02)
        $("#cboLocal").change(function () {
            let id = $(this).val()
            $.post('/Personal/ListarComboGlobal', {
                intIdMenu: 1,
                strEntidad: 'TGMARCADORREGISTRO',
                intIdFiltroGrupo: id,
                strGrupo: 'TGMARCADOR',
                strSubGrupo: '', //se retira porque en registro nuevo no debe listar inactivos strSubGrupo: 'U',
            }, response => {
                if (response.length == 0) {
                    $('#marcadorMultiple').empty()
                    $('#marcadorMultiple').append('<option value="0"> -Local seleccionado no tiene Marcadores (Ver Paso 2)- </option>')
                    messageResponseMix({ type: 'info', message: 'Local seleccionado no tiene Marcadores' }, 'Registro Empleado')
                } else {
                    $('#marcadorMultiple').empty()
                    response.forEach(item => {
                        $('#marcadorMultiple').append('<option value="' + item.intId + '">' + item.strDescripcion + '</option>')
                    })
                }
                registros_CboMarcador = response.length;
            })
        })

        $("#cboEmpresa").change(function () {
            var intidUniOrg = $(this).val()

            $.post(
                '/Personal/ListarCombos',
                {
                    intIdMenu: 1,
                    strEntidad: 'TGPERSONAL',
                    intIdFiltroGrupo: intidUniOrg,
                    strGrupo: 'LOCAL',
                    strSubGrupo: ''
                },
                response => {
                    $('#cboLocal').empty()
                    $('#cboLocal').attr('disabled', false)
                    $('#cboLocal').append('<option value="0">Seleccione</option>')
                    response.forEach(element => {
                        $('#cboLocal').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
                    })
                })

            $.post(
                '/Personal/ListarComboGlobal',
                {
                    intIdMenu: 1,
                    strEntidad: 'TGCARGOREGISTRO',
                    intIdFiltroGrupo: intidUniOrg,
                    strGrupo: 'TGCARGO',
                    strSubGrupo: ''
                },
                response => {
                    $('#cargoEmpleado').empty()
                    $('#cargoEmpleado').append('<option value="0">Seleccione</option>')
                    response.forEach(element => {
                        $('#cargoEmpleado').append('<option value="' + element.intId + '" >' + element.strDescripcion + '</option>')
                    })
                })

            $.post(
                '/Personal/ListarComboGlobal',
                {
                    intIdMenu: 1,
                    strEntidad: 'TGPLANILLAREGISTRO',
                    intIdFiltroGrupo: intidUniOrg,
                    strGrupo: 'TGPLANILLA',
                    strSubGrupo: ''
                },
                response => {
                    $('#planillaEmpleado').empty()
                    $('#planillaEmpleado').append('<option value="0">Seleccione</option>')
                    response.forEach(element => {
                        $('#planillaEmpleado').append('<option value="' + element.intId + '" >' + element.strDescripcion + '</option>')
                    })
                })

            $.post(
                '/Personal/ListarComboGlobal',
                {
                    intIdMenu: 1,
                    strEntidad: 'TGCATEGORIAREGISTROEMPLEADO',
                    intIdFiltroGrupo: intidUniOrg,
                    strGrupo: 'TGCATEGORIAEMPLEADO',
                    strSubGrupo: ''
                },
                response => {
                    $('#categoriaEmpleado').empty()
                    $('#categoriaEmpleado').append('<option value="0">Seleccione</option>')
                    response.forEach(element => {
                        $('#categoriaEmpleado').append('<option value="' + element.intId + '" >' + element.strDescripcion + '</option>')
                    })
                })

            $.post(
                '/Personal/ListarComboGlobal',
                {
                    intIdMenu: 1,
                    strEntidad: 'TGTIPOPERSONREGISTRO',
                    intIdFiltroGrupo: intidUniOrg,
                    strGrupo: 'TGTIPOPERSON',
                    strSubGrupo: ''
                },
                response => {
                    $('#tipoDePersonal').empty()
                    $('#tipoDePersonal').append('<option value="0">Seleccione</option>')
                    response.forEach(element => {
                        $('#tipoDePersonal').append('<option value="' + element.intId + '" >' + element.strDescripcion + '</option>')
                    })
                })

            $.post(
                '/Personal/ListarComboGlobal',
                {
                    intIdMenu: 1,
                    strEntidad: 'TGGRUPOREGISTRO',
                    intIdFiltroGrupo: intidUniOrg,
                    strGrupo: 'TGGRUPO',
                    strSubGrupo: ''
                },
                response => {
                    $('#tgGrupoRegistro').empty()
                    $('#tgGrupoRegistro').append('<option value="0">Seleccione</option>')
                    response.forEach(element => {
                        $('#tgGrupoRegistro').append('<option value="' + element.intId + '" >' + element.strDescripcion + '</option>')
                    })
                })

            $.post(
                '/Personal/ListarComboGlobal',
                {
                    intIdMenu: 1,
                    strEntidad: 'TGCCOSTOREGISTRO',
                    intIdFiltroGrupo: intidUniOrg,
                    strGrupo: 'TGCCOSTO',
                    strSubGrupo: ''
                },
                response => {
                    $('#centroDeCosto').empty()
                    $('#centroDeCosto').append('<option value="0">Seleccione</option>')
                    response.forEach(element => {
                        $('#centroDeCosto').append('<option value="' + element.intId + '" >' + element.strDescripcion + '</option>')
                    })
                })

            $.post(
                '/Personal/ListarComboGlobal', {
                    intIdMenu: 1,
                    strEntidad: 'TGREGLANEGREGISTRO',
                    intIdFiltroGrupo: intidUniOrg,
                    strGrupo: 'TGREGLANEG',
                    strSubGrupo: ''
                },
                (response) => {
                    if (response.length == 0) {
                        //Indicar que cambie de empresa
                        $('#reglaDeNegocio').empty();
                        $('#reglaDeNegocio').append('<option value="0"> -Empresa seleccionada no tiene Reglas (Ver Paso 2)- </option>');
                    } else if (response.length == 1) {
                        //seleccionar automáticamente la única
                        $('#reglaDeNegocio').empty();
                        response.forEach(element => {
                            $('#reglaDeNegocio').append('<option value="' + element.intId + '">' + element.strDescripcion + '</option>');
                        })
                    }
                    else {
                        $('#reglaDeNegocio').empty();
                        $('#reglaDeNegocio').append('<option value="0">Seleccione</option>');
                        response.forEach(element => {
                            $('#reglaDeNegocio').append('<option value="' + element.intId + '">' + element.strDescripcion + '</option>');
                        })
                    }
                    registros_CboRegla = response.length;
                });


            $.post(
                '/Personal/ListarComboGlobal', {
                    intIdMenu: 1,
                    strEntidad: 'TGHORARIOREGISTRO',
                    intIdFiltroGrupo: intidUniOrg,
                    strGrupo: 'TGHORARIO',
                    strSubGrupo: ''
                },
                (response) => {
                    if (response.length == 0) {
                        //Indicar que cambie de empresa
                        $('#tgHorarioFijo').empty()
                        $('#tgHorarioFijo').append('<option value="0"> -Empresa seleccionada no tiene Horarios (Ver Paso 2)- </option>')
                    } else if (response.length == 1) {
                        //seleccionar automáticamente la única
                        $('#tgHorarioFijo').empty()
                        response.forEach(element => {
                            $('#tgHorarioFijo').append('<option value="' + element.intId + '">' + element.strDescripcion + '</option>');
                        });
                    }
                    else {
                        $('#tgHorarioFijo').empty()
                        $('#tgHorarioFijo').append('<option value="0">Seleccione</option>')
                        response.forEach(element => {
                            $('#tgHorarioFijo').append('<option value="' + element.intId + '">' + element.strDescripcion + '</option>');
                        });
                    }
                    registros_CboHorario = response.length;
                });

            $('#marcadorMultiple').empty()
        })

        CombosEmpleado()

        $('#btn-save-change-empleado').prop('disabled', true)
        if (typeof $.fn.smartWizard != 'undefined') {
            $('#wizardEmpleado').smartWizard({
                selected: 0,
                enableFinishButton: true,
                enableAllSteps: true,
                onLeaveStep: leaveAStepCallbackEmpleadoRegistro,
                onFinish: onFinishCallbackEmpleado,
            })
            $('#wizard_verticle').smartWizard({
                transitionEffect: 'slide',
            })

            $('.buttonNext').hide() //.addClass('btn btn-success');
            $('.buttonPrevious').hide() //.addClass('btn btn-primary');
            $('.buttonFinish').hide() //.addClass('btn btn-default');
        }

        $('#CargarImagen').change(function (e) {
            const o = document.getElementById('CargarImagen')
            let foto = o.files[0]
            if (o.files.length == 0 || !/\.(jpeg|jpg|png|svg)$/i.test(foto.name)) {
                messageResponseMix({ type: 'infoc', message: 'Ingrese una imagen con alguno de los siguientes formatos: .jpeg/.jpg/.png.' }, 'Nuevo Empleado')
            } else {
                const img = new Image()
                img.onload = function () {
                    let widthImg = Number(this.width.toFixed(0))
                    let heightImg = Number(this.height.toFixed(0))
                    if (widthImg <= 200 && heightImg <= 200) {
                        messageResponseMix({ type: 'infoc', message: 'Las medidas deben ser mínimo: 200 x 200 px' }, 'Nuevo Empleado')
                    } else {
                        CargoImagenEmpleado()
                    }
                }

                img.src = URL.createObjectURL(foto)
            }
        })
        document.getElementById('delete').onclick = function () {
            $('#VistaPrevia').html('<img src = "/DirLogosRuta/descarga(1).jpg" class="img-rounded img-logo-empleado"/>')//modificado 01.09.2021 class
            $('#txtRutaEmple').val('')
            return false
        }
    }
}


//Modificado 01.10.2021
$('#btn-new-empleado').on('click', function () {
    validarSession()
    activaUsuario = false;
    desactivaUsuario = false;
    activarAdmin = false;
    Editable = false;//añadido 29.09.2021
    $('#btn-save-change-empleado').show()
    $('#btn-editar-empleado').hide()
    mostrarFormNuevoEmpleado(false)
    $('#txtNumDoc').focus();
})
async function mostrarFormNuevoEmpleado(estad) {
    const { loaderHtml } = APPCONFIG
    $(`#loaderEditPersonal`).show()
    $(`#loaderEditPersonal`).html(`<div class="loaderContenedor"><div class="min-height-300">${loaderHtml}</div></div>`)
    const { intIdMenu } = configEmpleadoInicial()
    const dataVista = await NuevoEmpleadoVista(false)

    const camposAdicionales = await $.post('/Personal/ListarCamposAdicionales', { intIdMenu: intIdMenu, strNoEntidad: 'TGPERSONAL' })

    if (camposAdicionales.length) {
        $('#contendorCamposPersonal').empty()
        camposAdicionales.forEach(element => {
            let columHtml = `<div class="col-md-6 col-sm-6 col-xs-6">
                                <div class="form-group">
                                    <label> ${element.strTitulo}</label>
                                    <input id="${element.strNomCampo}" type="text" class="form-control " placeholder="${element.strTitulo}" maxlength="255"/>
                                </div>
                            </div>`
            $('#contendorCamposPersonal').append(columHtml)
        })
    }

    const dataCaracter = await $.post('/Personal/ListarCaracteresMax', {
        strMaestro: 'TGPERSONAL',
    })
    //Aquí traer la configuración de Gestión de Vacaciones añadido 16.08.2021
    var SesionMovi = {
        IntIdMenu: 'M0701',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }
    var bitChkGestVac_ = 0; //Configuración de SISCOPWEB
    const Confi_ = await $.post('/Configuracion/GetTablaConfiguracion', { objSesion: SesionMovi, strCoConfi: 'HAB_GESTION_VACACIONES' }, (response) => { });
    if (Confi_.length > 1) {
        if (parseInt(Confi_[0].strValorConfi, 10) == null) { bitChkGestVac_ = 0 } else {
            bitChkGestVac_ = parseInt(Confi_[0].strValorConfi, 10);
    };
    } else {
        bitChkGestVac_ = 0; //Si no encuentra la configuración entonces asume 0 = Deshabilitado.
    }
    if (bitChkGestVac_ == 0) {
        $('#GestVac_Div').hide();
    } else {
        $('#GestVac_Div').show();
    }
    //------------------------------------------------------------------------------
    if (dataCaracter.length) {
        dataCaracter.forEach(item => {
            if (item.strColumnName == 'strFotocheck') {
                setMaxLengthInput('fotocheckPersonal', item.intMaxLength)
            } else if (item.strColumnName == 'strNombres') {
                setMaxLengthInput('txtNombres', item.intMaxLength)
            } else if (item.strColumnName == 'strApePaterno') {
                setMaxLengthInput('txtApePat', item.intMaxLength)
            } else if (item.strColumnName == 'strApeMaterno') {
                setMaxLengthInput('txtApeMat', item.intMaxLength)
            } else if (item.strColumnName == 'strDireccion') {
                setMaxLengthInput('TXTTIPVIA', item.intMaxLength)
            } else if (item.strColumnName == 'strPersoCampo1') {
                setMaxLengthInput('strPersonalCampo1', item.intMaxLength)
            } else if (item.strColumnName == 'strPersoCampo2') {
                setMaxLengthInput('strPersonalCampo2', item.intMaxLength)
            } else if (item.strColumnName == 'strPersoCampo3') {
                setMaxLengthInput('strPersonalCampo3', item.intMaxLength)
            } else if (item.strColumnName == 'strPersoCampo4') {
                setMaxLengthInput('strPersonalCampo4', item.intMaxLength)
            } else if (item.strColumnName == 'strPersoCampo5') {
                setMaxLengthInput('strPersonalCampo5', item.intMaxLength)
            } else if (item.strColumnName == 'strCodExterior') {
                setMaxLengthInput('codigoExterno', item.intMaxLength)
            } else if (item.strColumnName == 'strCodPensionista') {
                setMaxLengthInput('codigoPensionista', item.intMaxLength)
            } else if (item.strColumnName == 'strCodSalud') {
                setMaxLengthInput('codigoDeSalud', item.intMaxLength)
            }
        })
    }

    $(".disabled_Doc").attr("disabled", true)
    //---------------------------------------------
    if (typeof _vartablaGeo !== 'undefined') {
        _vartablaGeo.destroy();
    }

    _vartablaGeo = $('#tableGeo').DataTable({
        searching: false,
        paging: false,
        info: false,
        ordering: true,
        responsive: true,
        lengthMenu: [5, 25, 50],
        language: _datatableLanguaje,
        columnDefs: [
            {
                targets: [4],
                visible: false,
                searchable: false,
            },
        ],
        order: [],
        dom: 'lBfrtip',
    });

    $("#txtNumGeo").val(1)

    $("#tableGeoBody").empty();

    $('#cboGeoArea').on('ifChanged', function () {
        if ($("#cboGeoArea").is(':checked')) {
            //$("#txtNumGeo").attr("disabled", false)
            $("#btnNuevaGeoArea").attr("disabled", false)
            getIndexGeo()
        } else {
            //$("#txtNumGeo").attr("disabled", true)
            $("#btnNuevaGeoArea").attr("disabled", true)
        }
    })

    $("#btn-limpiar-Intrevalos").on("click", function () {
        $("#txtCoor").val("")
        $("#txtNumGeo").val(1)
        $("#txtDireccionCoor").val("")
        $("#cboGeoArea").iCheck('unCheck')
    })

    $("#btn-clear-Geo").on("click", function () {
        $("#tableGeoBody").empty();
    })

    $("#btnNuevaGeoArea").on("click", function () {
        getIndexGeo()
    })

    function getIndexGeo() {
        $("#txtCoor").val("")
        $("#txtDireccionCoor").val("")
        if ($("#tableGeoBody tr").length == 0) {
            $("#txtNumGeo").val(1)
        } else {
            var index = 0
            $("#tableGeoBody tr").each(x => {
                var dato = $($("#tableGeoBody tr")[x]).find(".intGeoArea").html()
                if (dato != "") {
                    index = parseInt(dato)
                }
            })
            $("#txtNumGeo").val(index + 1)
        }
    }

    $("#btn-add-Geo").on("click", function () {
        var Geo = $("#txtCoor").val()
        var geoArea = false;
        var dir = $("#txtDireccionCoor").val()

        if (Geo === "" || Geo === null) {
            messageResponseMix({ type: 'info', message: 'Ingrese una Coordenada' }, 'Geolocalización')//añadido 06.09.2021
            return;
        }
        if (dir == "" || dir === null) {
            messageResponseMix({ type: 'info', message: 'Ingrese una Dirección' }, 'Geolocalización')//añadido 06.09.2021
            return;
        }

        $("#txtCoor").val("")
        $("#txtDireccionCoor").val("")
        var index = ""
        var btnCoord = ""
        if ($("#cboGeoArea").is(':checked')) {
            geoArea = true;
            index = $("#txtNumGeo").val()
            btnCoord = `<span class="btn btn-success btn-xs btnAgregarCoor"> Usar Geoarea </span>`
        }

        $("#tableGeoBody").append(`
            <tr class="GeoDetalle">
            <td class="intGeoArea">${index}</td>
            <td class="geo">${Geo}</td>
            <td class="geoDir">${dir}</td>
            <td><span class="btn btn-danger btn-xs btnQuitarCoor"> Quitar </span>${btnCoord}</td>
            <td class="geoArea" hidden>${geoArea}</td>
            </tr>
        `)
    })
    //---------------------------------------------
    $('#activarUsuarioAdmin').attr('disabled', true);
    $(`#loaderEditPersonal`).hide()
    $('.form-hide-empleado').show()
}

function leaveAStepCallbackEmpleado(obj, context) {

    //se añadió condición de Paso 5 09.08.2021
    //METODO VENTANA EDITAR
    if (Paso5_ = 0) {
        if (context.toStep == 4) {//Identificar ultimo paso
            if ($('#txtNumDoc').val() != "") {
                $('#btn-editar-empleado').prop('disabled', false)
                //$('#btn-editar-empleado').prop('disabled', false)
            }
        }
    } else {
        if (context.toStep == 5) {//Identificar ultimo paso
            if ($('#txtNumDoc').val() != "") {
                $('#btn-editar-empleado').prop('disabled', false)
                //$('#btn-editar-empleado').prop('disabled', false)
            }
        }
    }
    //fin >> se añadió condición de Paso 5 09.08.2021

    return validateStepsEmpleado(context.fromStep, 'Editar Empleado') // return validateSteps(context.fromStep) // return false to stay on step and true to continue navigation//comentado 09.08.2021
}
function leaveAStepCallbackEmpleadoRegistro(obj, context) {
    //se añadió condición de Paso 5 09.08.2021
    //METODO VENTANA NUEVO
    if (Paso5_ = 0) {
        if (context.toStep == 4) {//Identificar ultimo paso
            if ($('#txtNumDoc').val() != "") {
                $('#btn-save-change-empleado').prop('disabled', false)
                //$('#btn-editar-empleado').prop('disabled', false)
            }
        }
    } else {
        if (context.toStep == 5) {//Identificar ultimo paso
            if ($('#txtNumDoc').val() != "") {
                $('#btn-save-change-empleado').prop('disabled', false)
                //$('#btn-editar-empleado').prop('disabled', false)
            }
        }
    }
    return validateStepsEmpleado(context.fromStep, 'Nuevo Empleado') // return false to stay on step and true to continue navigation
}
function onFinishCallbackEmpleado(objs, context) {
    if (validateAllSteps()) {
        if ($('#txtNumDoc').val() != "") {
            $('#btn-save-change-empleado').prop('disabled', false)
            //$('#btn-editar-empleado').prop('disabled', false)
        }
    }
}

function validateStepsEmpleado(stepnumber, titleToast) {//modificado 09.08.2021 añadiendo input titleToast
    const { intIdMenu, formatoFecha } = configEmpleadoInicial()
    var Msj_ = '';
    var isStepValid = true
    var ValidaMayorEdad = true;

    let truefalsecontrat = FechaContratSeleccionado(0); // Añadido HGM 17.11.2021

    //alert(truefalsecontrat);

    if ($('#inputSuccess3').val().length > 1) {
        var x_ = $('#inputSuccess3').val();
        var x = x_.substr(8, 2) + '/' + x_.substr(5, 2) + '/' + x_.substr(0, 4);
        //añadido 10.09.2021 Calcular Si es o no Mayor de Edad) - Inicio
        var SplitFNac = x.split("/");
        const Hoy = Date.now();
        const fhoy = new Date(Hoy);
        var Dhoy = parseInt(fhoy.getDate(), 10);
        var Mhoy = parseInt(fhoy.getMonth(), 10) + 1; //Enero = 0
        var Ahoy = parseInt(fhoy.getFullYear(), 10);
        var DNac = parseInt(SplitFNac[0], 10);
        var MNac = parseInt(SplitFNac[1], 10);
        var ANac = parseInt(SplitFNac[2], 10);
        ValidaMayorEdad = false;
        if ((Ahoy - ANac) < 18) {
            ValidaMayorEdad = false;
        } else if ((Ahoy - ANac) == 18) {
            //Validar Meses
            if (Mhoy < MNac) {
                ValidaMayorEdad = false;
            } else if (Mhoy == MNac) {
                //Validar Día
                if (Dhoy >= DNac) {
                    ValidaMayorEdad = true;
                } else {
                    ValidaMayorEdad = false;
                }
            } else {
                ValidaMayorEdad = true;
            }
        } else {
            ValidaMayorEdad = true;
        }
        //añadido 10.09.2021 Calcular Si es o no Mayor de Edad) - Fin
    }

    // validate PASO 1
    if (stepnumber == 1) {
        if (
            $('#TipoDoc').val() != 0 &&
            $('#txtNumDoc').val().length > 1 &&
            $('#txtApePat').val().length > 1 &&
            $('#txtApeMat').val().length > 1 &&
            $('#txtNombres').val().length > 1 &&
            //$('#txtFechaNac').val().length > 1 &&
            $('#inputSuccess3').val().length > 1 &&//AÑADIDO 23.07.2021
            ValidaMayorEdad == true &&//AÑADIDO 15.09.2021
            $("input[name='generoEmpleado']:radio").is(':checked') &&
            $('#Email_Emple').val().length > 4 &&
            ValidateEmail(getValueControl('#Email_Emple'))
            //&& $('#celularEmpleado').val().length > 8//comentado 19.08.2021 - No debe ser Obligatorio H.Enriquez-E.Reyes
        ) {
            isStepValid = true
        } else {

            if ($('#TipoDoc').val() == 0) {
                Msj_ = 'Seleccione un Tipo de Documento';
            } else if ($('#txtNumDoc').val().length < 1 || $('#txtNumDoc').val() == '') {
                Msj_ = 'Ingrese y Valide el N° de Documento';
            } else if ($('#txtApePat').val().length < 1 || $('#txtApePat').val() == '') {
                Msj_ = 'Ingrese Apellido Paterno';
            } else if ($('#txtApeMat').val().length < 1 || $('#txtApeMat').val() == '') {
                Msj_ = 'Ingrese Apellido Materno';
            } else if ($('#txtNombres').val().length < 1 || $('#txtNombres').val() == '') {
                Msj_ = 'Ingrese Nombres';
            } else if ($('#inputSuccess3').val().length < 1) {
                Msj_ = 'Ingrese Fecha de Nacimiento';
            } else if (ValidaMayorEdad == false) {
                Msj_ = 'El Empleado debe ser mayor de edad.';
            } else if (!$("input[name='generoEmpleado']:radio").is(':checked')) {
                Msj_ = 'Marque el Sexo del Empleado';
            } else if ($('#Email_Emple').val().length < 1) {
                Msj_ = 'Ingrese el Email Principal';
            } else if (!ValidateEmail(getValueControl('#Email_Emple'))) {
                Msj_ = 'El Email principal es incorrecto';
            } else if ($('#celularEmpleado').val().length > 0 || $('#celularEmpleado').val() != '') { //modificado 19.08.2021 para no ser obligatorio
                if ($('#celularEmpleado').val().length < 9) {
                    Msj_ = 'el N° de Celular Principal es incorrecto';
                }
            }
            //else if ($('#celularEmpleado').val().length < 1) {
            //    Msj_ = 'Ingrese el N° de Celular Principal';
            //} else if ($('#celularEmpleado').val().length < 9) {
            //    Msj_ = 'el N° de Celular Principal es incorrecto';
            //} 
            messageResponseMix({ type: 'info', message: Msj_ }, titleToast)
            isStepValid = false
        }
    } else if (stepnumber == 2) {
        if (
            $('#fotocheckPersonal').val().length > 3 &&
            //$('#txtFechaAdmi').val().length > 4 &&
            $('#inputSuccess2').val().length > 4 && //añadido 23.07.2021
            $('#comboFiscalizacion').val() != 0 &&
            $('#nivelDeResponsabilidad').val() != 0 &&
            $('#cargoEmpleado').val() != 0 &&
            $('#planillaEmpleado').val() != 0 &&
            $('#cboDependencia').val() != 0 &&
            $('#unidadOrganizacionalCbo').val() != 0 &&
            $('#cboEmpresa').val() != 0 &&
            $('#cboLocal').val() != 0 &&
            truefalsecontrat == 0 //Aadido HGM 17.11.2021
        ) {
            isStepValid = true
        } else {



            if ($('#fotocheckPersonal').val().length < 1 || $('#fotocheckPersonal').val() == '') {
                Msj_ = 'Ingrese un N° de Fotocheck';
            } else if ($('#inputSuccess2').val().length < 1) {
                Msj_ = 'Ingrese Fecha de Admisión';
            } else if ($('#comboFiscalizacion').val() == 0) {
                Msj_ = 'Seleccione Tipo de Fiscalización';
            } else if ($('#nivelDeResponsabilidad').val() == 0) {
                Msj_ = 'Seleccione Nivel de Responsabilidad a ejercer';
            } else if ($('#cboEmpresa').val() == 0) {
                Msj_ = 'Seleccione Empresa';
            } else if ($('#cboLocal').val() == 0) {
                Msj_ = 'Seleccione un Local';
            } else if ($('#cboDependencia').val() == 0) {
                Msj_ = 'Seleccione Dependencia y Unidad Organizacional';
            } else if ($('#unidadOrganizacionalCbo').val() == 0) {
                Msj_ = 'Seleccione Unidad Organizacional';
            } else if ($('#cargoEmpleado').val() == 0) {
                Msj_ = 'Seleccione Cargo';
            } else if ($('#planillaEmpleado').val() == 0) {
                Msj_ = 'Seleccione Planilla';
            } else if (truefalsecontrat == 1) { //Añadido HGM 17.11.2021 Para e lcontrol de fechas Paso 2
                Msj_ = 'Verifique el Año de Admisión.';
            } else if (truefalsecontrat == 2) { //Añadido HGM 17.11.2021 Para e lcontrol de fechas Paso 2
                Msj_ = 'Verifique el Mes de Admisión.';
            } else if (truefalsecontrat == 3) { //Añadido HGM 17.11.2021 Para e lcontrol de fechas Paso 2
                Msj_ = 'Verifique el Día de Admisión.';
            }

            messageResponseMix({ type: 'info', message: Msj_ }, titleToast)
            isStepValid = false
        }
    } else if (stepnumber == 3) {
        if (($("#cboResponsableInmediato option").length = 1 || $('#cboResponsableInmediato').val() != 0) && ($("#cboResponsableContractual option").length = 1 || $('#cboResponsableContractual').val() != 0)) {
            isStepValid = true
            $('#btn-save-change-empleado').prop('disabled', false)
        } else {
            messageResponseMix({ type: 'info', message: 'Complete los campos obligatorios (Responsables)' }, titleToast)
            isStepValid = false
        }
    } else if (stepnumber == 4) {
        //Se cambio " <= 1 " por " < 1 "
        if (registros_CboRegla < 1 && registros_CboHorario < 1 && registros_CboMarcador < 1) {
            messageResponseMix({ type: 'info', message: 'Seleccione una Empresa que tenga Reglas, Horarios y un Local que tenga Marcadores (Ver Paso 2)' }, titleToast)
            isStepValid = true
        } else if (registros_CboRegla < 1 && registros_CboHorario < 1) {
            messageResponseMix({ type: 'info', message: 'Seleccione una Empresa que tenga también Reglas y Horarios (Ver Paso 2)' }, titleToast)
            isStepValid = true
        } else if (registros_CboRegla < 1 && registros_CboMarcador < 1) {
            messageResponseMix({ type: 'info', message: 'Seleccione una Empresa que tenga Reglas y un Local que tenga Marcadores (Ver Paso 2)' }, titleToast)
            isStepValid = true
        } else if (registros_CboMarcador < 1 && registros_CboHorario < 1) {
            messageResponseMix({ type: 'info', message: 'Seleccione una Empresa que tenga Horarios y un Local que tenga Marcadores (Ver Paso 2)' }, titleToast)
            isStepValid = true
        } else if (registros_CboRegla < 1) {
            messageResponseMix({ type: 'info', message: 'Seleccione una Empresa que tenga Reglas (Ver Paso 2)' }, titleToast)
            isStepValid = true
        } else if (registros_CboHorario < 1) {
            messageResponseMix({ type: 'info', message: 'Seleccione una Empresa que tenga Horarios (Ver Paso 2)' }, titleToast)
            isStepValid = true
        } else if (registros_CboMarcador < 1) {
            messageResponseMix({ type: 'info', message: 'Seleccione un Local que tenga Marcadores (Ver Paso 2)' }, titleToast)
            isStepValid = true
        }
        else {
            if (registros_CboRegla >= 1) {
                if ($('#reglaDeNegocio option:selected').length = 1 || $('#reglaDeNegocio').val() != 0) {
                    isStepValid = true
                }
                else {
                    messageResponseMix({ type: 'info', message: 'Seleccione una Regla de Negocio (obligatorio).' }, titleToast)
                    isStepValid = false
                }
            }

            if (registros_CboHorario >= 1) {
                if ($('#tgHorarioFijo option:selected').length = 1 || $('#tgHorarioFijo').val() != 0) {
                    isStepValid = true
                }
                else {
                    messageResponseMix({ type: 'info', message: 'Seleccione un Horario (obligatorio).' }, titleToast)
                    isStepValid = false
                }
            }

            if (registros_CboMarcador >= 1) {
                if (getValueControl('#marcadorMultiple').length >= 1) {
                    isStepValid = true
                }
                else {
                    messageResponseMix({ type: 'info', message: 'Seleccione al menos un Marcador (obligatorio).' }, titleToast)
                    isStepValid = false
                }
            }

        }
    }
    return isStepValid
}
// Your Step validation logic
function validateSteps(stepnumber) {
    const { intIdMenu, formatoFecha } = configEmpleadoInicial()
    const titleToast = 'Editar Empleado'
    var ValidaMayorEdad = true;
    var isStepValid = true
    if ($('#inputSuccess3').val().length > 1) {
        var x_ = $('#inputSuccess3').val();
        var x = x_.substr(8, 2) + '/' + x_.substr(5, 2) + '/' + x_.substr(0, 4);
        //añadido 10.09.2021 Calcular Si es o no Mayor de Edad) - Inicio
        var SplitFNac = x.split("/");
        const Hoy = Date.now();
        const fhoy = new Date(Hoy);
        var Dhoy = parseInt(fhoy.getDate(), 10);
        var Mhoy = parseInt(fhoy.getMonth(), 10) + 1; //Enero = 0
        var Ahoy = parseInt(fhoy.getFullYear(), 10);
        var DNac = parseInt(SplitFNac[0], 10);
        var MNac = parseInt(SplitFNac[1], 10);
        var ANac = parseInt(SplitFNac[2], 10);
        ValidaMayorEdad = false;
        if ((Ahoy - ANac) < 18) {
            ValidaMayorEdad = false;
        } else if ((Ahoy - ANac) == 18) {
            //Validar Meses
            if (Mhoy < MNac) {
                ValidaMayorEdad = false;
            } else if (Mhoy == MNac) {
                //Validar Día
                if (Dhoy >= DNac) {
                    ValidaMayorEdad = true;
                } else {
                    ValidaMayorEdad = false;
                }
            } else {
                ValidaMayorEdad = true;
            }
        } else {
            ValidaMayorEdad = true;
        }
        //añadido 10.09.2021 Calcular Si es o no Mayor de Edad) - Fin
    }

    // validate step 1
    if (stepnumber == 1) {
        if (
            $('#txtApePat').val().length > 1 &&
            $('#txtApeMat').val().length > 1 &&
            $('#txtNombres').val().length > 1 &&
            //$('#txtFechaNac').val().length > 1 &&
            $('#inputSuccess3').val().length > 1 && //AÑADIDO 23.07.2021
            ValidaMayorEdad == true &&//AÑADIDO 15.09.2021
            $("input[name='generoEmpleado']:radio").is(':checked') &&
            $('#Email_Emple').val().length > 4 &&
            ValidateEmail(getValueControl('#Email_Emple'))
            //&& $('#celularEmpleado').val().length > 8 //modificado 19.08.2021 para no ser obligatorio
        ) {
            isStepValid = true
        } else {
            if ($('#inputSuccess3').val().length > 1) {
                var x_ = $('#inputSuccess3').val();
                var x = x_.substr(8, 2) + '/' + x_.substr(5, 2) + '/' + x_.substr(0, 4);
                //añadido 10.09.2021 Calcular Si es o no Mayor de Edad) - Inicio
                var SplitFNac = x.split("/");
                const Hoy = Date.now();
                const fhoy = new Date(Hoy);
                var Dhoy = parseInt(fhoy.getDate(), 10);
                var Mhoy = parseInt(fhoy.getMonth(), 10) + 1; //Enero = 0
                var Ahoy = parseInt(fhoy.getFullYear(), 10);
                var DNac = parseInt(SplitFNac[0], 10);
                var MNac = parseInt(SplitFNac[1], 10);
                var ANac = parseInt(SplitFNac[2], 10);
                var ValidaMayorEdad = false;
                if ((Ahoy - ANac) < 18) {
                    ValidaMayorEdad = false;
                } else if ((Ahoy - ANac) == 18) {
                    //Validar Meses
                    if (Mhoy < MNac) {
                        ValidaMayorEdad = false;
                    } else if (Mhoy == MNac) {
                        //Validar Día
                        if (Dhoy >= DNac) {
                            ValidaMayorEdad = true;
                        } else {
                            ValidaMayorEdad = false;
                        }
                    } else {
                        ValidaMayorEdad = true;
                    }
                } else {
                    ValidaMayorEdad = true;
                }
                //añadido 10.09.2021 Calcular Si es o no Mayor de Edad) - Fin
            }

            if ($('#txtApePat').val().length < 1 || $('#txtApePat').val() == '') {
                Msj_ = 'Ingrese Apellido Paterno';
            } else if ($('#txtApeMat').val().length < 1 || $('#txtApeMat').val() == '') {
                Msj_ = 'Ingrese Apellido Materno';
            } else if ($('#txtNombres').val().length < 1 || $('#txtNombres').val() == '') {
                Msj_ = 'Ingrese Nombres';
            } else if ($('#inputSuccess3').val().length < 1) {
                Msj_ = 'Ingrese Fecha de Nacimiento';
            } else if (ValidaMayorEdad == false) {
                Msj_ = 'El Empleado debe ser mayor de edad.';
            } else if (!$("input[name='generoEmpleado']:radio").is(':checked')) {
                Msj_ = 'Marque el Sexo del Empleado';
            } else if ($('#Email_Emple').val().length < 1) {
                Msj_ = 'Ingrese el Email Principal';
            } else if (!ValidateEmail(getValueControl('#Email_Emple'))) {
                Msj_ = 'El Email principal es incorrecto';
            } else if ($('#celularEmpleado').val().length > 0 || $('#celularEmpleado').val() != '') { //modificado 19.08.2021 para no ser obligatorio
                if ($('#celularEmpleado').val().length < 9) {
                    Msj_ = 'el N° de Celular Principal es incorrecto';
                }
            }





            //else if ($('#celularEmpleado').val().length < 1) {
            //    Msj_ = 'Ingrese el N° de Celular Principal';
            //} else if ($('#celularEmpleado').val().length < 9) {
            //    Msj_ = 'el N° de Celular Principal es incorrecto';
            //} 

            messageResponseMix({ type: 'info', message: Msj_ }, titleToast)
            isStepValid = false
        }
    } else if (stepnumber == 2) {
        if (
            $('#fotocheckPersonal').val().length > 3 &&
            //$('#txtFechaAdmi').val().length > 4 &&
            $('#inputSuccess2').val().length > 4 && //añadido 23.07.2021
            $('#comboFiscalizacion').val() != 0 &&
            $('#nivelDeResponsabilidad').val() != 0 &&
            $('#cargoEmpleado').val() != 0 &&
            $('#planillaEmpleado').val() != 0 &&
            $('#cboDependencia').val() != 0 &&
            $('#unidadOrganizacionalCbo').val() != 0
        ) {
            isStepValid = true
        } else {
            messageResponseMix({ type: 'info', message: 'Complete los campos obligatorios' }, titleToast)
            isStepValid = false
        }
    } else if (stepnumber == 3) {
        if (($("#cboResponsableInmediato option").length = 1 || $('#cboResponsableInmediato').val() != 0) && ($("#cboResponsableContractual option").length = 1 || $('#cboResponsableContractual').val() != 0)) {
            isStepValid = true
        } else {
            messageResponseMix({ type: 'info', message: 'Complete los campos obligatorios (Responsables)' }, titleToast)
            isStepValid = false
        }
    } else if (stepnumber == 4) {
      


        if (registros_CboRegla <= 1 && registros_CboHorario <= 1 && registros_CboMarcador <= 1) {
            messageResponseMix({ type: 'info', message: 'Seleccione una Empresa que tenga Reglas, Horarios y un Local que tenga Marcadores (Ver Paso 2)' }, titleToast)
            isStepValid = true
        } else if (registros_CboRegla <= 1 && registros_CboHorario <= 1) {
            messageResponseMix({ type: 'info', message: 'Seleccione una Empresa que tenga también Reglas y Horarios (Ver Paso 2)' }, titleToast)
            isStepValid = true
        } else if (registros_CboRegla <= 1 && registros_CboMarcador <= 1) {
            messageResponseMix({ type: 'info', message: 'Seleccione una Empresa que tenga Reglas y un Local que tenga Marcadores (Ver Paso 2)' }, titleToast)
            isStepValid = true
        } else if (registros_CboMarcador <= 1 && registros_CboHorario <= 1) {
            messageResponseMix({ type: 'info', message: 'Seleccione una Empresa que tenga Horarios y un Local que tenga Marcadores (Ver Paso 2)' }, titleToast)
            isStepValid = true
        } else if (registros_CboRegla <= 1) {
            messageResponseMix({ type: 'info', message: 'Seleccione una Empresa que tenga Reglas (Ver Paso 2)' }, titleToast)
            isStepValid = true
        } else if (registros_CboHorario <= 1) {
            messageResponseMix({ type: 'info', message: 'Seleccione una Empresa que tenga Horarios (Ver Paso 2)' }, titleToast)
            isStepValid = true
        } else if (registros_CboMarcador <= 1) {
            messageResponseMix({ type: 'info', message: 'Seleccione un Local que tenga Marcadores (Ver Paso 2)' }, titleToast)
            isStepValid = true
        }
 


        else {

            if (registros_CboRegla > 1) {
                if ($('#reglaDeNegocio option:selected').length = 1 || $('#reglaDeNegocio').val() != 0) {
                    isStepValid = true
                }
                else {
                    messageResponseMix({ type: 'info', message: 'Seleccione una Regla de Negocio (obligatorio).' }, titleToast)
                    isStepValid = false
                }
            }

            if (registros_CboHorario > 1) {
                if ($('#tgHorarioFijo option:selected').length = 1 || $('#tgHorarioFijo').val() != 0) {
                    isStepValid = true
                }
                else {
                    messageResponseMix({ type: 'info', message: 'Seleccione un Horario (obligatorio).' }, titleToast)
                    isStepValid = false
                }
            }

            if (registros_CboMarcador > 1) {
                if (getValueControl('#marcadorMultiple').length >= 1) {
                    isStepValid = true
                }
                else {
                    messageResponseMix({ type: 'info', message: 'Seleccione al menos un Marcador (obligatorio).' }, titleToast)
                    isStepValid = false
                }
            }

        }
    }
    return isStepValid
}
function validateAllSteps() {
    var isStepValid = true
    // all step validation logic
    return isStepValid
}

function CargoImagenEmpleado() {
    const formdata = new FormData()
    const fileInput = document.getElementById('CargarImagen')
    formdata.append(fileInput.files[0].name, fileInput.files[0])
    const nameFile = fileInput.files[0].name
    var xhr = new XMLHttpRequest()

    xhr.open('POST', '/Personal/Upload')
    xhr.send(formdata)
    xhr.onreadystatechange = function () {
        if (xhr.readyState == 4 && xhr.status == 200) {
            DirLocal = xhr.responseText
            $('#VistaPrevia').html('<img id="imgCarga"  src=' + DirLocal + ' class="img-rounded img-logo-empleado" />')
            $('#txtRutaEmple').val(nameFile)
        }
    }

    return false
}
// mostrar--
async function EditarEmpleadoVista(idItemPersonalEdit, intIdUniOrg, intidPlanilla, intIdLocal) {
    const { intIdMenu } = configEmpleadoInicial()
    $('.form-hide-empleado .x_content').empty()
    $('.form-hide-empleado .x_content').html('')
    try {
        const resultForm = await $.ajax({ url: '/Personal/EditarEmpleado', type: 'POST', data: {} })
        if (resultForm !== '') {
            $('.form-hide-empleado .x_content').empty()
            $('.form-hide-empleado .x_content').html(resultForm)
            $('#wizard .form-hide-empleado').hide()
            $('#btn-editar-empleado').hide()
            $('.form-hide-empleado').hide()
            switcheryLoad()
            init_checkBox_styles()
            cargarDaterangePicker()
            init_daterangepicker()

            $.post('/Personal/GetHabGeo', {},
                (response) => {
                    if (response) {
                        $("#wizarpaso5").show()
                    } else {
                        $("#wizarpaso5").hide();
                        $('.wizard_steps').find('li:eq(4)').remove();
                        $(".p-3").hide();
                        $("#step-5").hide();
                    }
                }
            )

            //$('#btn-editar-empleado').prop('disabled', true)
            if (typeof $.fn.smartWizard != 'undefined') {
                $('#wizardEmpleado').smartWizard({
                    selected: 0,
                    keyNavigation: false,
                    enableFinishButton: true,
                    enableAllSteps: true,
                    onLeaveStep: leaveAStepCallbackEmpleado,
                    onFinish: onFinishCallbackEmpleado,
                })
                $('#wizard_verticle').smartWizard({
                    transitionEffect: 'slide',
                })

                $('.buttonNext').hide() //.addClass('btn btn-success');
                $('.buttonPrevious').hide() //.addClass('btn btn-primary');
                $('.buttonFinish').hide() //.addClass('btn btn-default');
            }
        }

        $('#CargarImagen').change(function (e) {
            const o = document.getElementById('CargarImagen')
            let foto = o.files[0]
            if (o.files.length == 0 || !/\.(jpeg|jpg|png|svg)$/i.test(foto.name)) {
                messageResponseMix({ type: 'infoc', message: 'Ingrese una imagen con alguno de los siguientes formatos: .jpeg/.jpg/.png.' }, 'Editar Empleado')
            } else {
                const img = new Image()
                img.onload = function () {
                    let widthImg = Number(this.width.toFixed(0))
                    let heightImg = Number(this.height.toFixed(0))
                    if (widthImg <= 200 && heightImg <= 200) {
                        messageResponseMix({ type: 'infoc', message: 'Las medidas deben ser mínimo: 200 x 200 px' }, 'Editar Empleado')
                    } else {
                        CargoImagenEmpleado()
                    }
                }

                img.src = URL.createObjectURL(foto)
            }
        })

        document.getElementById('delete').onclick = function () {
            $('#VistaPrevia').html('<img src = "/DirLogosRuta/descarga(1).jpg" class="img-rounded img-logo-empleado"/>')//modificado 01.09.2021 class
            $('#txtRutaEmple').val('')
            return false
        }

        // $('#tagsEmail').importTags('')
        // $('#tagsTelefono').importTags('')

        const camposAdicionales = await $.post('/Personal/ListarCamposAdicionales', { intIdMenu: intIdMenu, strNoEntidad: 'TGPERSONAL' })

        if (camposAdicionales.length) {
            $('#contendorCamposPersonal').empty()
            camposAdicionales.forEach(element => {
                let columHtml = `<div class="col-md-6 col-sm-6 col-xs-6">
                                    <div class="form-group">
                                        <label> ${element.strTitulo}</label>
                                        <input id="${element.strNomCampo}" type="text" class="form-control " placeholder="${element.strTitulo}" maxlength="255"/>
                                    </div>
                                </div>`
                $('#contendorCamposPersonal').append(columHtml)
            })
        }

        const caracteresMax = await $.post('/Personal/ListarCaracteresMax', {
            intIdMenu: intIdMenu,
            strMaestro: 'TGPERSONAL',
        })
        if (caracteresMax.length > 0) {
            caracteresMax.forEach(item => {
                if (item.strColumnName == 'strFotocheck') {
                    setMaxLengthInput('fotocheckPersonal', item.intMaxLength)
                } else if (item.strColumnName == 'strNombres') {
                    setMaxLengthInput('txtNombres', item.intMaxLength)
                } else if (item.strColumnName == 'strApePaterno') {
                    setMaxLengthInput('txtApePat', item.intMaxLength)
                } else if (item.strColumnName == 'strApeMaterno') {
                    setMaxLengthInput('txtApeMat', item.intMaxLength)
                } else if (item.strColumnName == 'strDireccion') {
                    setMaxLengthInput('TXTTIPVIA', item.intMaxLength)
                } else if (item.strColumnName == 'strPersoCampo1') {
                    setMaxLengthInput('strPersonalCampo1', item.intMaxLength)
                } else if (item.strColumnName == 'strPersoCampo2') {
                    setMaxLengthInput('strPersonalCampo2', item.intMaxLength)
                } else if (item.strColumnName == 'strPersoCampo3') {
                    setMaxLengthInput('strPersonalCampo3', item.intMaxLength)
                } else if (item.strColumnName == 'strPersoCampo4') {
                    setMaxLengthInput('strPersonalCampo4', item.intMaxLength)
                } else if (item.strColumnName == 'strPersoCampo5') {
                    setMaxLengthInput('strPersonalCampo5', item.intMaxLength)
                } else if (item.strColumnName == 'strCodExterior') {
                    setMaxLengthInput('codigoExterno', item.intMaxLength)
                } else if (item.strColumnName == 'strCodPensionista') {
                    setMaxLengthInput('codigoPensionista', item.intMaxLength)
                } else if (item.strColumnName == 'strCodSalud') {
                    setMaxLengthInput('codigoDeSalud', item.intMaxLength)
                }
            })
        }

        const tipoDocData = await $.post('/Personal/ListarComboGlobal', {
            intIdMenu: intIdMenu,
            strEntidad: 'TSTIPDOC02',
            intIdFiltroGrupo: 0,
            strGrupo: 'PER',
            strSubGrupo: '',
        })
        if (tipoDocData !== '') {
            $('#TipoDoc').empty()
            $('#TipoDoc').attr('disabled', false)
            tipoDocData.forEach(element => {
                $('#TipoDoc').append('<option value="' + element.intId + '" maxdata="' + element.strCodigo + '"  >' + element.strDescripcion + '</option>')
            })
        }

        const dataTipVia = await $.post('/Personal/ListarCombos', {
            intIdMenu: intIdMenu,
            strEntidad: 'TGTIPO_VIA',
            intIdFiltroGrupo: 0,
            strGrupo: '',
            strSubGrupo: '',
        })
        if (dataTipVia.length) {
            $('#TipVia').empty()
            $('#TipVia').attr('disabled', false)
            $('#TipVia').append('<option value="0">--</option>')
            dataTipVia.forEach(element => {
                $('#TipVia').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
            })
            $('#TipVia').val(0);//añadido 09.08.2021
        }

        const dataCboPais = await $.post('/Personal/ListarCombos', {
            intIdMenu: intIdMenu,
            strEntidad: 'TGPAIS',
            intIdFiltroGrupo: 0,
            strGrupo: 'EXISTE',
            strSubGrupo: '',
        })
        if (dataCboPais.length) {
            $('#CboPais').empty()
            $('#CboPais').attr('disabled', false)
            if (dataCboPais.length > 1) {
                $('#CboPais').append('<option value="">Seleccione</option>')
            }

            dataCboPais.forEach(element => {
                $('#CboPais').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
            })
        }

        const dataCorreosPersonal = await $.post('/Personal/GetCorreosPersonal', {
            intIdMenu: 1,
            intIdPersonal: idItemPersonalEdit,
        })
        if (dataCorreosPersonal.length) {
            let dataCorreosInsert = ''
            dataCorreosPersonal.forEach(element => {
                if (element.bitFlPrincipal) {
                    $('#Email_Emple').val(element.strCorreo)
                } else {
                    dataCorreosInsert += element.strCorreo + ','
                }
            })
            if (dataCorreosInsert != '') {
                let cadenaEmail = dataCorreosInsert.slice(0, -1)
                $('#TagEmailContainer').html(`<input id="tagsEmail" type="text" class="tags form-control tagsEmailGet" value="${cadenaEmail}" /><div id="suggestions-container" style="position: relative; float: left; width: 250px; margin: 10px;"></div>`)
                //$('#tagsEmail').importTags(cadenaEmail)
            } else {
                $('#TagEmailContainer').html(`<input id="tagsEmail" type="text" class="tags form-control tagsEmailGet" value="" /><div id="suggestions-container" style="position: relative; float: left; width: 250px; margin: 10px;"></div>`)
            }
        } else {
            $('#TagEmailContainer').html(`<input id="tagsEmail" type="text" class="tags form-control tagsEmailGet" value="" /><div id="suggestions-container" style="position: relative; float: left; width: 250px; margin: 10px;"></div>`)
        }

        const dataTelefonosPersonal = await $.post('/Personal/GetTelefonosPersonal', {
            intIdMenu: 1,
            intIdPersonal: idItemPersonalEdit,
        })
        if (dataTelefonosPersonal.length) {
            let dataTelefonosInsert = ''
            dataTelefonosPersonal.forEach(element => {
                if (element.bitFlPrincipal) {
                    $('#celularEmpleado').val(element.strNumero)
                } else {
                    dataTelefonosInsert += element.strNumero + ','
                }
            })
            if (dataTelefonosInsert != '') {
                let cadenaTekl = dataTelefonosInsert.slice(0, -1)
                $('#tagTelefonosContainer').html(`<input id="tagsTelefono" type="text" class="tags form-control tagsTelefonoGet" value="${cadenaTekl}"  /><div id="suggestions-container" style="position: relative; float: left; width: 250px; margin: 10px;"></div>`)
                //$('#tagsTelefono').importTags(cadenaTekl)
            } else {
                $('#tagTelefonosContainer').html(`<input id="tagsTelefono" type="text" class="tags form-control tagsTelefonoGet" value=""  /><div id="suggestions-container" style="position: relative; float: left; width: 250px; margin: 10px;"></div>`)
            }
        } else {
            $('#tagTelefonosContainer').html(`<input id="tagsTelefono" type="text" class="tags form-control tagsTelefonoGet" value=""  /><div id="suggestions-container" style="position: relative; float: left; width: 250px; margin: 10px;"></div>`)
        }

        //var mailformatEmail = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/

        $('#tagsEmail').tagsInput({
            width: 'auto',
            defaultText: 'Correos',
            placeholderColor: '#666666',
            pattern: mailformatEmail,
            interactive: true,
        })
        $('#tagsTelefono').tagsInput({
            width: 'auto',
            defaultText: 'Teléfonos',
            placeholderColor: '#666666',
            pattern: /^\d{9}$/,
            interactive: true,
        })

        const dataFiscalizacion = await $.post('/Personal/ListarComboGlobal', {
            intIdMenu: 1,
            strEntidad: 'TGTIPO1REGISTROTIPOFISCALIZACION',
            intIdFiltroGrupo: 0,
            strGrupo: 'PER',
            strSubGrupo: '',
        })
        if (dataFiscalizacion.length) {
            $('#comboFiscalizacion').empty()
            //$('#comboFiscalizacion').append('<option value="0">Seleccione</option>')//comentado a solicitud de EReyes 09.08.2021
            dataFiscalizacion.forEach(item => {
                $('#comboFiscalizacion').append('<option value="' + item.intId + '">' + item.strDescripcion + '</option>')
            })
        }

        const dataResponsabilidad = await $.post('/Personal/ListarComboGlobal', {
            intIdMenu: 1,
            strEntidad: 'TGTIPO1REGISTRO',
            intIdFiltroGrupo: 0,
            strGrupo: 'PER',
            strSubGrupo: '',
        })
        if (dataResponsabilidad.length) {
            $('#nivelDeResponsabilidad').empty()
            //$('#nivelDeResponsabilidad').append('<option value="0">Seleccione</option>')//comentado a solicitud de EReyes 09.08.2021
            dataResponsabilidad.forEach(item => {
                $('#nivelDeResponsabilidad').append('<option value="' + item.intId + '">' + item.strDescripcion + '</option>')
            })
        }

        const dataCargoEmpleado = await $.post('/Personal/ListarComboGlobal', {
            intIdMenu: 1,
            strEntidad: 'TGCARGOREGISTRO',
            intIdFiltroGrupo: intIdUniOrg,
            strGrupo: 'TGCARGO',
            strSubGrupo: 'U',
        })
        if (dataCargoEmpleado.length) {
            $('#cargoEmpleado').empty()
            //$('#cargoEmpleado').append('<option value="0">Seleccione</option>')//comentado a solicitud de EReyes 09.08.2021
            dataCargoEmpleado.forEach(item => {
                $('#cargoEmpleado').append('<option value="' + item.intId + '">' + item.strDescripcion + '</option>')
            })
        }

        const dataPlanillaEmpleado = await $.post('/Personal/ListarComboGlobal', {
            intIdMenu: 1,
            strEntidad: 'TGPLANILLAREGISTRO',
            intIdFiltroGrupo: intIdUniOrg,
            strGrupo: 'TGPLANILLA',
            strSubGrupo: 'U',
        })
        if (dataPlanillaEmpleado.length) {
            $('#planillaEmpleado').empty()
            //$('#planillaEmpleado').append('<option value="0">Seleccione</option>')//comentado a solicitud de EReyes 09.08.2021
            dataPlanillaEmpleado.forEach(item => {
                $('#planillaEmpleado').append('<option value="' + item.intId + '">' + item.strDescripcion + '</option>')
            })
        }

        const dataCategoriaEmpleado = await $.post('/Personal/ListarComboGlobal', {
            intIdMenu: 1,
            strEntidad: 'TGCATEGORIAREGISTROEMPLEADO',
            intIdFiltroGrupo: intIdUniOrg,
            strGrupo: 'TGCATEGORIAEMPLEADO',
            strSubGrupo: 'U',
        })
        if (dataCategoriaEmpleado.length) {
            $('#categoriaEmpleado').empty()
            //$('#categoriaEmpleado').append('<option value="0">Seleccione</option>')//comentado a solicitud de EReyes 09.08.2021
            dataCategoriaEmpleado.forEach(item => {
                $('#categoriaEmpleado').append('<option value="' + item.intId + '">' + item.strDescripcion + '</option>')
            })
        }

        const dataTipoDePersonal = await $.post('/Personal/ListarComboGlobal', {
            intIdMenu: 1,
            strEntidad: 'TGTIPOPERSONREGISTRO',
            intIdFiltroGrupo: intIdUniOrg,
            strGrupo: 'TGTIPOPERSON',
            strSubGrupo: 'U',
        })
        if (dataTipoDePersonal.length) {
            $('#tipoDePersonal').empty()
            //$('#tipoDePersonal').append('<option value="0">Seleccione</option>')//comentado a solicitud de EReyes 09.08.2021
            dataTipoDePersonal.forEach(item => {
                $('#tipoDePersonal').append('<option value="' + item.intId + '">' + item.strDescripcion + '</option>')
            })
        }

        const dataTgGrupoRegistro = await $.post('/Personal/ListarComboGlobal', {
            intIdMenu: 1,
            strEntidad: 'TGGRUPOREGISTRO',
            intIdFiltroGrupo: intIdUniOrg,
            strGrupo: 'TGGRUPO',
            strSubGrupo: 'U',
        })
        if (dataTgGrupoRegistro.length) {
            $('#tgGrupoRegistro').empty()
            //$('#tgGrupoRegistro').append('<option value="0">Seleccione</option>')//comentado a solicitud de EReyes 09.08.2021
            dataTgGrupoRegistro.forEach(item => {
                $('#tgGrupoRegistro').append('<option value="' + item.intId + '">' + item.strDescripcion + '</option>')
            })
        }

        const dataCentroDeCosto = await $.post('/Personal/ListarComboGlobal', {
            intIdMenu: 1,
            strEntidad: 'TGCCOSTOREGISTRO',
            intIdFiltroGrupo: intIdUniOrg,
            strGrupo: 'TGCCOSTO',
            strSubGrupo: 'U',
        })
        if (dataCentroDeCosto.length) {
            $('#centroDeCosto').empty()
            //$('#centroDeCosto').append('<option value="0">Seleccione</option>')//comentado a solicitud de EReyes 09.08.2021
            dataCentroDeCosto.forEach(item => {
                $('#centroDeCosto').append('<option value="' + item.intId + '">' + item.strDescripcion + '</option>')
            })
        }

        const dataCboEmpresa = await $.post('/Personal/ListarCombos', {
            intIdMenu: intIdMenu,
            strEntidad: 'TGPERSONAL',
            intIdFiltroGrupo: 0,
            strGrupo: 'EMPRESA',
            strSubGrupo: 'U',
        })
        if (dataCboEmpresa.length) {
            $('#cboEmpresa').empty()
            $('#cboEmpresa').attr('disabled', false)
            //$('#cboEmpresa').append('<option value="0">Seleccione</option>')//comentado a solicitud de EReyes 09.08.2021
            dataCboEmpresa.forEach(element => {
                $('#cboEmpresa').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
            })
        }

        const dataCboDependencia = await $.post('/Personal/ListarCombos', {
            intIdMenu: intIdMenu,
            strEntidad: 'TGJERARQORG',
            intIdFiltroGrupo: 0,
            strGrupo: 'DEPEN',
            strSubGrupo: 'EMPRESADEPEN',
        })

        if (dataCboDependencia.length) {
            $('#cboDependencia').empty()
            $('#cboDependencia').attr('disabled', false)
            $('#cboDependencia').append('<option value="0">Seleccione</option>')
            dataCboDependencia.forEach(element => {
                $('#cboDependencia').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
            })
        }

        const dataRespoDetalle = await $.post('/Personal/GetResponsablesPersonal', {
            intIdMenu: 1,
            intIdPersonal: idItemPersonalEdit,
        })
        let intIdTipoRespInmediato = null
        let intIdTipoRespContractual = null
        if (dataRespoDetalle.length) {
            dataRespoDetalle.forEach(item => {
                if (item.intIdTipoResp == 10) {
                    intIdTipoRespContractual = item.intIdPerResp
                } else {
                    intIdTipoRespInmediato = item.intIdPerResp
                }
            })
        }

        const datacboResponsableInmediato = await $.post('/Personal/ListarComboGlobal', {
            intIdMenu: intIdMenu,
            strEntidad: 'TGPERSONALINMEDIATOOLIDERAZGO',
            intIdFiltroGrupo: intIdUniOrg,
            strGrupo: 'TGPERSONAL',
            strSubGrupo: 'U',
        })
        if (datacboResponsableInmediato.length) {
            $('#cboResponsableInmediato').empty()
            $('#cboResponsableInmediato').append('<option value="0">Seleccione</option>')
            $('#cboResponsableInmediato').attr('disabled', false)
            datacboResponsableInmediato.forEach(element => {
                $('#cboResponsableInmediato').append('<option value="' + element.intId + '"   >' + element.strDescripcion + '</option>')
                if (intIdTipoRespInmediato == element.intId) {
                    $('#cboResponsableInmediato').val(intIdTipoRespInmediato)
                    console.log("test")
                }
            })
            $('#cboResponsableInmediato').select2({
                language: {
                    noResults: function () {
                        return "No hay resultado";
                    },
                    searching: function () {
                        return "Buscando...";
                    }
                },
                placeholder: 'Seleccione',
                allowClear: true,
            })
        }

        const dataCboResponsableContractual = await $.post('/Personal/ListarComboGlobal', {
            intIdMenu: intIdMenu,
            strEntidad: 'TGPERSONALCONTRACTUAL',
            intIdFiltroGrupo: intIdUniOrg,
            strGrupo: 'TGPERSONAL',
            strSubGrupo: 'U',
        })
        if (dataCboResponsableContractual.length) {
            $('#cboResponsableContractual').empty()
            $('#cboResponsableContractual').append('<option value="0">Seleccione</option>')
            $('#cboResponsableContractual').attr('disabled', false)
            dataCboResponsableContractual.forEach(element => {
                $('#cboResponsableContractual').append('<option value="' + element.intId + '"   >' + element.strDescripcion + '</option>')
                if (intIdTipoRespContractual == element.intId) {
                    $('#cboResponsableContractual').val(intIdTipoRespContractual)
                }
            })
            $('#cboResponsableContractual').select2({
                language: {

                    noResults: function () {

                        return "No hay resultado";
                    },
                    searching: function () {

                        return "Buscando..";
                    }
                },
                placeholder: 'Seleccione',
                allowClear: true,
            })
        }

        const dataReglaDeNegocio = await $.post('/Personal/ListarComboGlobal', {
            intIdMenu: 1,
            strEntidad: 'TGREGLANEGREGISTRO',
            intIdFiltroGrupo: intIdUniOrg,
            strGrupo: 'TGREGLANEG',
            strSubGrupo: 'U',
        })
        registros_CboRegla = dataReglaDeNegocio.length;
        if (dataReglaDeNegocio.length == 0) {
            //Indicar que cambie de empresa
            $('#reglaDeNegocio').empty()
            $('#reglaDeNegocio').append('<option value="0"> -Empresa seleccionada no tiene Reglas (Ver Paso 2)- </option>')
        } else if (dataReglaDeNegocio.length == 1) {
            //seleccionar automáticamente la única
            $('#reglaDeNegocio').empty()
            dataReglaDeNegocio.forEach(item => {
                $('#reglaDeNegocio').append('<option value="' + item.intId + '">' + item.strDescripcion + '</option>')
            });

        }
        else {
            $('#reglaDeNegocio').empty()
            $('#reglaDeNegocio').append('<option value="0">Seleccione</option>')
            dataReglaDeNegocio.forEach(item => {
                $('#reglaDeNegocio').append('<option value="' + item.intId + '">' + item.strDescripcion + '</option>')
            });
        }

        const dataTgHorarioFijo = await $.post('/Personal/ListarComboGlobal', {
            intIdMenu: 1,
            strEntidad: 'TGHORARIOREGISTRO',
            intIdFiltroGrupo: intIdUniOrg,
            strGrupo: 'TGHORARIO',
            strSubGrupo: 'U',
        })
        registros_CboHorario = dataTgHorarioFijo.length;
        if (dataTgHorarioFijo.length == 0) {
            //Indicar que cambie de empresa
            $('#tgHorarioFijo').empty()
            $('#tgHorarioFijo').append('<option value="0"> -Empresa seleccionada no tiene Horarios (Ver Paso 2)- </option>')
        } else if (dataTgHorarioFijo.length == 1) {
            //seleccionar automáticamente la única
            $('#tgHorarioFijo').empty()
            dataTgHorarioFijo.forEach(item => {
                $('#tgHorarioFijo').append('<option value="' + item.intId + '">' + item.strDescripcion + '</option>')
            });
        }
        else {
            $('#tgHorarioFijo').empty()
            $('#tgHorarioFijo').append('<option value="0">Seleccione</option>')
            dataTgHorarioFijo.forEach(item => {
                $('#tgHorarioFijo').append('<option value="' + item.intId + '">' + item.strDescripcion + '</option>')
            });
        }


        //modificar el Listar Marcadores en una Edición (#01)
        const dataMarcadorMultiple = await $.post('/Personal/ListarComboGeneral_FiltroPerson', {
            //const dataMarcadorMultiple = await $.post('/Personal/ListarComboGlobal', {
            intIdMenu: 1,
            strEntidad: 'TGMARCADORREGISTRO',
            intIdFiltroGrupo: intIdLocal,
            intIdFiltroPerson: idItemPersonalEdit,//parámetro añadido por Persona Editable
            strGrupo: 'TGMARCADOR',
            strSubGrupo: 'U',
        })
        registros_CboMarcador = dataMarcadorMultiple.length;
        if (dataMarcadorMultiple.length == 0) {
            //Indicar que cambie de empresa
            $('#marcadorMultiple').empty()
            $('#marcadorMultiple').append('<option value="0"> -Local seleccionado no tiene Marcadores (Ver Paso 2)- </option>')
        }
        else {
            $('#marcadorMultiple').empty()
            dataMarcadorMultiple.forEach(item => {
                $('#marcadorMultiple').append('<option value="' + item.intId + '">' + item.strDescripcion + '</option>')
            });
        }


        const dataMotivoDeCese = await $.post('/Personal/ListarComboGlobal', {
            intIdMenu: 1,
            strEntidad: 'TGMOTIVOREGISTRO',
            intIdFiltroGrupo: 0,
            strGrupo: 'TGMOTIVO',
            strSubGrupo: '',
        })

        if (dataMotivoDeCese.length) {
            $('#mativoDeCese').empty()
            $('#mativoDeCese').append('<option value="0">Seleccione</option>')
            dataMotivoDeCese.forEach(item => {
                $('#mativoDeCese').append('<option value="' + item.intId + '">' + item.strDescripcion + '</option>')
            })
        }

        const dataTgTgGrupoliq = await $.post('/Personal/ListarComboGlobal', {
            intIdMenu: 1,
            strEntidad: 'TGGRUPOLIQREGISTRO',
            intIdFiltroGrupo: intidPlanilla,
            strGrupo: 'TGGRUPOLIQ',
            strSubGrupo: 'U',
        })
        if (dataTgTgGrupoliq.length) {
            $('#tgTgGrupoliq').empty()
            $('#tgTgGrupoliq').append('<option value="0">Seleccione</option>')
            dataTgTgGrupoliq.forEach(item => {
                $('#tgTgGrupoliq').append('<option value="' + item.intId + '">' + item.strDescripcion + '</option>')
            })
        }
        //Aquí asigna los marcadores después de llenar Combo.
        const dataMarcadoresLista = await $.post('/Personal/GetMarcadoresPersonal', {
            intIdMenu: 1,
            intIdPersonal: idItemPersonalEdit,
        })
        if (dataMarcadoresLista.length) {
            const newArr = dataMarcadoresLista.map(function (val, index) {
                return val.intIdMarcador
            })
            $('#marcadorMultiple').val(newArr)
        }

    } catch (error) {
        console.error(error)
    }
}

async function editarEmpleado(idItemEdit) {
    const { intIdMenu } = configEmpleadoInicial()
    const { loaderHtml } = APPCONFIG
    $(`#loaderEditPersonal`).show()
    $(`#loaderEditPersonal`).html(`<div class="loaderContenedor"><div class="min-height-300">${loaderHtml}</div></div>`)


    //Aquí traer la configuración de Gestión de Vacaciones añadido 16.08.2021
    var SesionMovi = {
        IntIdMenu: 'M0701',
        intIdUsuario: idUsuar,
        intIdSoft: idSoftw,
        intIdSesion: intIdSe
    }
    var bitChkGestVac_ = 0;
    const Confi_ = await $.post('/Configuracion/GetTablaConfiguracion', { objSesion: SesionMovi, strCoConfi: 'HAB_GESTION_VACACIONES' }, (response) => { });
    if (Confi_.length > 1) {
        if (parseInt(Confi_[0].strValorConfi, 10) == null) { bitChkGestVac_ = 0 } else {
            bitChkGestVac_ = parseInt(Confi_[0].strValorConfi, 10);
        };
    } else {
        bitChkGestVac_ = 0; //Si no encuentra la configuración entonces asume 0 = Deshabilitado.
    }

    //------------------------------------------------------------------------------

    const dataEmpleado = await $.post('/Personal/ObtenerRegistroEmpleado', { intIdPersonal: idItemEdit }, response => { })
    const estadoDeCargaVista = await EditarEmpleadoVista(idItemEdit, dataEmpleado[0].intIdUniOrgSup, dataEmpleado[0].intIdPlanilla, dataEmpleado[0].intIdLocal)
    validarEmpleadoControlesEmpleadop()
    console.log(dataEmpleado)
    if (dataEmpleado.length) {
        const data = dataEmpleado[0]

        const INTIDTPEVAL = data.intIdUbigeo
        const INTIDSUPUBI = data.intIdUbigSup
        const INTIDSUPUBIREGION = data.intIdUbiSupReg
        const intIdProvinciaMostrar = data.intIdUbiReg
        const intIdRegionMostrar = data.intIdUbiPais
        const intIdJerOrgLista = data.intIdJerOrg
        const intIdUniOrgLista = data.intIdUniOrg
        const intIdUniOrgSupLista = data.intIdUniOrgSup
        const intIdLocalLista = data.intIdLocal


        $("#cboEmpresa").val(intIdUniOrgSupLista)
        $('#cboDependencia').val(intIdJerOrgLista)
        $('#CboPais').val(data.intIdUbiSupPais)
        $('#intTipoOperacion').val('2')
        $('#intIdPersonalReg').val(data.intIdPersonal)
        $('#codigoDeRegistro').val(data.strCoPersonal.trim() + '-' + data.strNumRegis.trim())
        $('#codPersonalHideen').val(data.strCoPersonal)
        $('#numRegistroPersonalHideen').val(data.strNumRegis.trim())
        $('#fechaDeCeseValidar').val(data.dttFecCese)
        $('#fechaDefechaAdmision').val(data.dttFecAdmin)
        $('#TipoDoc').val(data.intIdTipDoc)
        $('#TipoDoc').prop('disabled', true)
        $('#txtNumDoc').val(data.strNumDoc)
        $('#txtNumDoc').prop('disabled', true)
        $('#txtApePat').val(data.strApePaterno)
        $('#txtApeMat').val(data.strApeMaterno)
        $('#txtNombres').val(data.strNombres)
        $('#txtFechaNac').val(data.dttFecNacim)
        //----------------------------------------------------------
        //AÑADIDO 23.07.2021
        if (data.dttFecNacim != null) {
            var x = data.dttFecNacim.substr(6, 4) + '-' + data.dttFecNacim.substr(3, 2) + '-' + data.dttFecNacim.substr(0, 2);
            $('#inputSuccess3').val(x);
        } else {
            $('#inputSuccess3').val("");
        }
        //----------------------------------------------------------
        $('#TipVia').val(data.intIdTipoVia)
        $('#TXTTIPVIA').val(data.strDireccion)
        $('#txtFechaAdmi').val(data.dttFecAdmin)
        //----------------------------------------------------------
        //AÑADIDO 23.07.2021
        if (data.dttFecAdmin != null) {
            var x = data.dttFecAdmin.substr(6, 4) + '-' + data.dttFecAdmin.substr(3, 2) + '-' + data.dttFecAdmin.substr(0, 2);
            $('#inputSuccess2').val(x);
        } else {
            $('#inputSuccess2').val("");
        }
        //----------------------------------------------------------
        $('#fotocheckPersonal').val(data.strFotocheck)
        $('#strPersonalCampo1').val(data.strPersoCampo1)
        $('#strPersonalCampo2').val(data.strPersoCampo2)
        $('#strPersonalCampo3').val(data.strPersoCampo3)
        $('#strPersonalCampo4').val(data.strPersoCampo4)
        $('#strPersonalCampo5').val(data.strPersoCampo5)
        if (data.bitflSexo == true) {
            $('#chck_mas').iCheck('check')
        } else if (data.bitflSexo == false) {
            $('#chck_fem').iCheck('check')
        }
        if (data.bitFlActivo == false) {
            $('#11').html('<br /><label id="_lbl_">Inactivo</label> <input type = "checkbox" id = "estadoEmpleadoActivo" class= "js-switch" /><br /><script>switcheryLoad();</script >');
        } else if (data.bitFlActivo == true) {
            $('#11').html('<br /><label id="_lbl_">Activo</label> <input type = "checkbox" id = "estadoEmpleadoActivo" class= "js-switch" checked /><br /><script>switcheryLoad();</script >');
        }

        $('#CboPais').val(data.intIdUbiSupPais)
        $('#fotocheckPersonal').val(data.strFotocheck)
        $('#txtIntidUbigeo').val(data.intIdUbigeo)
        $('#Mensaje_Info').css('color', 'green')
        if (data.imgFoto != null) {
            Imagen_GC(data.imgFoto, "Empleado");//añadido 26.03.2021
            //$('#VistaPrevia').html(`<img id="imgCarga"  src="/DirEmpleadosRuta/${data.imgFoto}" class="img-rounded img-logo-empleado"/>`)
            $('#txtRutaEmple').val(data.imgFoto)
        } else {
            $('#VistaPrevia').html(`<img id="imgCarga"  src="/images/descarga(1).jpg" class="img-rounded img-logo-empleado"/>`)
            $('#txtRutaEmple').val('')
        }
        $('#nivelDeResponsabilidad').val(data.intIdTipoResp)
        $('#comboFiscalizacion').val(data.intIdTipFisc)
        $('#planillaEmpleado').val(data.intIdPlanilla)
        $('#cargoEmpleado').val(data.intIdCargo)
        $('#categoriaEmpleado').val(data.intIdCateg)
        $('#tipoDePersonal').val(data.intIdTiPers)
        $('#centroDeCosto').val(data.intIdCCosto)
        $('#codigoExterno').val(data.strCodExterior)
        $('#codigoDeSalud').val(data.strCodSalud)
        $('#codigoPensionista').val(data.strCodPensionista)
        $('#tgGrupoRegistro').val(data.intIdGrupo)

        if (data.bitContratoInd) {
            $('#contradoIndeterminado').iCheck('check')
        }
        //añadido 16.08.2021
        if (data.bitGestionVac) {
            $('#GestVac_').iCheck('check')
        }
        if (bitChkGestVac_ == 0) {
            $('#GestVac_Div').hide();
        } else {
            $('#GestVac_Div').show();
        }

        if (data.bitFlfotomovil) {
            $('#cboTomarFoto').iCheck('check')
        }
        if (data.dttFecCese != '') {
            $('#fechaCeseChecbox').iCheck('check')
            $('#txtFechaCese').val(data.dttFecCese)
            //----------------------------------------------------------
            //AÑADIDO 23.07.2021
            if (data.dttFecCese != null) {
                var x = data.dttFecCese.substr(6, 4) + '-' + data.dttFecCese.substr(3, 2) + '-' + data.dttFecCese.substr(0, 2);
                $('#inputSuccess1').val(x);
            } else {
                $('#inputSuccess1').val("");
            }
            //----------------------------------------------------------
            //Cargar Grupo y Motivo 01.10.2021
            //$.post('/Personal/ListarComboGlobal', {
            //    intIdMenu: 1,
            //    strEntidad: 'TGGRUPOLIQREGISTRO',
            //    intIdFiltroGrupo: data.intIdPlanilla,
            //    strGrupo: 'TGGRUPOLIQ',
            //    strSubGrupo: 'U',
            //},
            //    (response) => {
            //        $('#tgTgGrupoliq').empty()
            //        $('#tgTgGrupoliq').append('<option value="0">Seleccione</option>')
            //        response.forEach(item => {
            //            $('#tgTgGrupoliq').append('<option value="' + item.intId + '">' + item.strDescripcion + '</option>')
            //        })
            //    }
            //)

            $('#mativoDeCese').val(data.intIdMotiCese)
            $('#tgTgGrupoliq').val(data.intIdGrupoLiq)

            $('#tgTgGrupoliq').attr('disabled', false)
            $('#txtFechaCese').attr('disabled', false)
            $('#inputSuccess1').attr('disabled', false)//añadido 23.07.2021
            $('#mativoDeCese').attr('disabled', false)
        }
        $('#reglaDeNegocio').val(data.intIdReglaNeg)
        ValRegla_ = 0;
        ValRegla_ = data.intIdReglaNeg;
        if ($('#reglaDeNegocio').val() == null) {
            $('#reglaDeNegocio').val(0);
        }

        $('#tgHorarioFijo').val(data.intIdHorario)
        ValHorario_ = 0;
        ValHorario_ = data.intIdHorario;
        if ($('#tgHorarioFijo').val() == null) {
            $('#tgHorarioFijo').val(0);
        }

        if (data.bitActivarUsuario === true) {
            $('#activarUsuarioCbo').iCheck('check')
            $('#activarUsuarioAdmin').attr('disabled', false);
        } else {
            $('#activarUsuarioAdmin').attr('disabled', true);
            $('#cboPerfilAdmin').attr('disabled', true);
        }
        activaUsuario = data.bitActivarUsuario
        desactivaUsuario = data.bitActivarUsuario
        activarAdmin = data.bitPerfilAdmin

        if (data.bitPerfilAdmin === true) {
            $('#activarUsuarioAdmin').iCheck('check')
            $('#cboPerfilAdmin').attr('disabled', false);
        } else {
            $('#cboPerfilAdmin').attr('disabled', true);
        }

        $.post(
            '/Personal/ListarCombos',
            {
                intIdMenu: intIdMenu,
                strEntidad: 'TGPERFIL',
                intIdFiltroGrupo: 0,
                strGrupo: 'PERFILEMPLEADO',
                strSubGrupo: 'U',
            },
            response => {
                $('#cboPerfilAdmin').empty()
                $('#cboPerfilAdmin').append('<option value="0">Seleccione</option>')
                response.forEach(item => {
                    $('#cboPerfilAdmin').append('<option value="' + item.intidTipo + '">' + item.strDeTipo + '</option>')
                    if (item.intidTipo == data.intIdPerfil) {
                        $('#cboPerfilAdmin').val(item.intidTipo)
                    }
                })
            }
        )

        //Valores Globales para no perder el dato al Cancelar
        Editable = true;
        UbiDi = INTIDTPEVAL; //Distrito
        UbiPr = intIdProvinciaMostrar; //Provincia
        UbiDe = intIdRegionMostrar; //Departamento
        UbiPa = data.intIdUbiSupPais; //Pais
        $.post(
            '/Personal/ListarCombos',
            {
                strEntidad: 'TGUBIGEO',
                intIdFiltroGrupo: INTIDSUPUBI,
                strGrupo: 'DIST',
                strSubGrupo: '',
            },
            response => {
                $('#CboDistrito').empty()
                $('#CboDistrito').attr('disabled', false)
                $('#CboDistrito').append('<option value="">Seleccione</option>')
                response.forEach(element => {
                    $('#CboDistrito').append('<option value="' + element.intidTipo + '" >' + element.strDeTipo + '</option>')
                    if (element.intidTipo == INTIDTPEVAL) {
                        $('#CboDistrito').val(element.intidTipo)
                        $('#txtUbigeo').val(element.strDeTipo)
                        $('#txtUbigeo').attr('disabled', true)
                    }
                })
            }
        )

        $.post(
            '/Personal/ListarCombos',
            {
                strEntidad: 'TGUBIGEO',
                intIdFiltroGrupo: INTIDSUPUBIREGION,
                strGrupo: 'REG',
                strSubGrupo: '',
            },
            response => {
                $('#CboProvincia').empty()
                $('#CboProvincia').attr('disabled', false)
                $('#CboProvincia').append('<option value="">Seleccione</option>')
                response.forEach(element => {
                    $('#CboProvincia').append('<option value="' + element.intidTipo + '" >' + element.strDeTipo + '</option>')
                    if (element.intidTipo == intIdProvinciaMostrar) {
                        $('#CboProvincia').val(element.intidTipo)
                    }
                })
            }
        )

        $.post(
            '/Personal/ListarCombos',
            {
                strEntidad: 'TGUBIGEO',
                intIdFiltroGrupo: data.intIdUbiSupPais,
                strGrupo: 'DEPART',
                strSubGrupo: '',
            },
            response => {
                $('#CboRegion').empty()
                $('#CboRegion').attr('disabled', false)
                $('#CboRegion').append('<option value="">Seleccione</option>')
                response.forEach(element => {
                    $('#CboRegion').append('<option value="' + element.intidTipo + '" >' + element.strDeTipo + '</option>')
                    if (element.intidTipo == intIdRegionMostrar) {
                        $('#CboRegion').val(element.intidTipo)
                    }
                })
            }
        )

        const dataCboEmpresa = await $.post('/Personal/ListarCombos', {
            intIdMenu: intIdMenu,
            strEntidad: 'TGPERSONAL',
            intIdFiltroGrupo: intIdUniOrgSupLista,
            strGrupo: 'LOCAL',
            strSubGrupo: 'U',
        })
        if (dataCboEmpresa.length) {
            $('#cboLocal').empty()
            $('#cboLocal').attr('disabled', false)
            $('#cboLocal').append('<option value="0">Seleccione</option>')
            dataCboEmpresa.forEach(element => {
                $('#cboLocal').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
                if (intIdLocalLista == element.intidTipo) {
                    $("#cboLocal").val(element.intidTipo)
                }
            })
        }

        $.post('/Personal/ListarCombos', {
            strEntidad: 'TGPERFIL',
            intIdFiltroGrupo: intIdUniOrgLista,
            strGrupo: 'UNIORG2',
            strSubGrupo: 'U'
        }, response => {
            $('#unidadOrganizacionalCbo').empty()
            $('#unidadOrganizacionalCbo').attr('disabled', false)
            $('#unidadOrganizacionalCbo').append('<option value="0">Seleccione</option>')
            response.forEach(element => {
                $('#unidadOrganizacionalCbo').append('<option value="' + element.intidTipo + '" >' + element.strDeTipo + '</option>')
                if (intIdUniOrgLista == element.intidTipo) {
                    $('#unidadOrganizacionalCbo').val(element.intidTipo)
                }
            })
        })
    }
    //MARCA CON DNI lunes22 //HG 23.03.21 Marcación con DNI POST Carga los controles //<!-- AÑADIDO HG 23.03.21 HEBERT23--> 30.09.2021
    const dataEmpleadoMarcaDni = await $.post('/Personal/ObtenerRegistroEmpleadoMarcaDni', { intIdPersonal: idItemEdit }, response => { })
    console.log(dataEmpleadoMarcaDni);
    if (dataEmpleado.length) {
        const data = dataEmpleadoMarcaDni[0]

        if (data.bitHabilitarMarcaDNI) {
            $('#CheckboxVigenciaMarcaConDni').iCheck('check');
            $('#txtFechaFinVegencia').val(data.dttFechaFinVegencia);
            $('#txtFechaInicioVegencia').val(data.dttFechaInicioVegencia);
            $('#txtFechaInicioVegencia').attr('disabled', false);
            $('#txtFechaFinVegencia').attr('disabled', false);
        }

        if (data.bitHabilitarSupervisorCom) {
            $('#CheckboxHabilitarSupervisorDeCom').iCheck('check');
        }
    };
    //modificar el Listar Marcadores en una Edición (#03) >> idItemEdit
    $("#cboLocal").change(function () {
        let id = $(this).val()
        $.post('/Personal/ListarComboGeneral_FiltroPerson', {
            //$.post('/Personal/ListarComboGlobal', {
            intIdMenu: 1,
            strEntidad: 'TGMARCADORREGISTRO',
            intIdFiltroGrupo: id,
            intIdFiltroPerson: idItemEdit, //parámetro añadido
            strGrupo: 'TGMARCADOR',
            strSubGrupo: 'U',
        }, response => {
            registros_CboMarcador = response.length;
            if (response.length == 0) {
                $('#marcadorMultiple').empty()
                $('#marcadorMultiple').append('<option value="0"> -Local seleccionado no tiene Marcadores (Ver Paso 2)- </option>')
                messageResponseMix({ type: 'info', message: 'Local seleccionado no tiene Marcador' }, 'Local (*)')
            } else {
                $('#marcadorMultiple').empty()
                response.forEach(item => {
                    $('#marcadorMultiple').append('<option value="' + item.intId + '">' + item.strDescripcion + '</option>')
                })
                //-------------------------------------------------------------------------------------------------
                //copiado 26.05.2021
                //Aquí asigna los marcadores después de llenar Combo.
                $.post('/Personal/GetMarcadoresPersonal', {
                    intIdMenu: 1,
                    intIdPersonal: idItemEdit,
                }, response => {
                    console.log(response);
                    if (response.length > 0) {
                        const newArr = response.map(function (val, index) {
                            return val.intIdMarcador
                        })
                        $('#marcadorMultiple').val(newArr);
                    }
                })
                //-------------------------------------------------------------------------------------------------
            }


        })
    })

    $("#cboEmpresa").change(function () {

        var intidUniOrg = $(this).val()

        $.post(
            '/Personal/ListarCombos',
            {
                intIdMenu: 1,
                strEntidad: 'TGPERSONAL',
                intIdFiltroGrupo: intidUniOrg,
                strGrupo: 'LOCAL',
                strSubGrupo: 'U'
            },
            response => {
                $('#cboLocal').empty()
                $('#cboLocal').attr('disabled', false)
                $('#cboLocal').append('<option value="0">Seleccione</option>')
                response.forEach(element => {
                    $('#cboLocal').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
                })
            })

        $.post(
            '/Personal/ListarComboGlobal',
            {
                intIdMenu: 1,
                strEntidad: 'TGCARGOREGISTRO',
                intIdFiltroGrupo: intidUniOrg,
                strGrupo: 'TGCARGO',
                strSubGrupo: 'U'
            },
            response => {
                $('#cargoEmpleado').empty()
                $('#cargoEmpleado').append('<option value="0">Seleccione</option>')
                response.forEach(element => {
                    $('#cargoEmpleado').append('<option value="' + element.intId + '" >' + element.strDescripcion + '</option>')
                })
            })

        $.post(
            '/Personal/ListarComboGlobal',
            {
                intIdMenu: 1,
                strEntidad: 'TGPLANILLAREGISTRO',
                intIdFiltroGrupo: intidUniOrg,
                strGrupo: 'TGPLANILLA',
                strSubGrupo: 'U'
            },
            response => {
                $('#planillaEmpleado').empty()
                $('#planillaEmpleado').append('<option value="0">Seleccione</option>')
                response.forEach(element => {
                    $('#planillaEmpleado').append('<option value="' + element.intId + '" >' + element.strDescripcion + '</option>')
                })
            })

        $.post(
            '/Personal/ListarComboGlobal',
            {
                intIdMenu: 1,
                strEntidad: 'TGCATEGORIAREGISTROEMPLEADO',
                intIdFiltroGrupo: intidUniOrg,
                strGrupo: 'TGCATEGORIAEMPLEADO',
                strSubGrupo: 'U'
            },
            response => {
                $('#categoriaEmpleado').empty()
                $('#categoriaEmpleado').append('<option value="0">Seleccione</option>')
                response.forEach(element => {
                    $('#categoriaEmpleado').append('<option value="' + element.intId + '" >' + element.strDescripcion + '</option>')
                })
            })

        $.post(
            '/Personal/ListarComboGlobal',
            {
                intIdMenu: 1,
                strEntidad: 'TGTIPOPERSONREGISTRO',
                intIdFiltroGrupo: intidUniOrg,
                strGrupo: 'TGTIPOPERSON',
                strSubGrupo: 'U'
            },
            response => {
                $('#tipoDePersonal').empty()
                $('#tipoDePersonal').append('<option value="0">Seleccione</option>')
                response.forEach(element => {
                    $('#tipoDePersonal').append('<option value="' + element.intId + '" >' + element.strDescripcion + '</option>')
                })
            })

        $.post(
            '/Personal/ListarComboGlobal',
            {
                intIdMenu: 1,
                strEntidad: 'TGGRUPOREGISTRO',
                intIdFiltroGrupo: intidUniOrg,
                strGrupo: 'TGGRUPO',
                strSubGrupo: 'U'
            },
            response => {
                $('#tgGrupoRegistro').empty()
                $('#tgGrupoRegistro').append('<option value="0">Seleccione</option>')
                response.forEach(element => {
                    $('#tgGrupoRegistro').append('<option value="' + element.intId + '" >' + element.strDescripcion + '</option>')
                })
            })

        $.post(
            '/Personal/ListarComboGlobal',
            {
                intIdMenu: 1,
                strEntidad: 'TGCCOSTOREGISTRO',
                intIdFiltroGrupo: intidUniOrg,
                strGrupo: 'TGCCOSTO',
                strSubGrupo: 'U'
            },
            response => {
                $('#centroDeCosto').empty()
                $('#centroDeCosto').append('<option value="0">Seleccione</option>')
                response.forEach(element => {
                    $('#centroDeCosto').append('<option value="' + element.intId + '" >' + element.strDescripcion + '</option>')
                })
            })

        $.post(
            '/Personal/ListarComboGlobal', {
                intIdMenu: 1,
                strEntidad: 'TGREGLANEGREGISTRO',
                intIdFiltroGrupo: intidUniOrg,
                strGrupo: 'TGREGLANEG',
                strSubGrupo: 'U' //editar
            },
            (response) => {
                if (response.length == 0) {
                    //Indicar que cambie de empresa
                    $('#reglaDeNegocio').empty();
                    $('#reglaDeNegocio').append('<option value="0" > -Empresa seleccionada no tiene Reglas (Ver Paso 2)- </option>');
                    $('#reglaDeNegocio').val(0)
                } else if (response.length == 1) {
                    //seleccionar automáticamente la única
                    $('#reglaDeNegocio').empty();
                    response.forEach(element => {
                        $('#reglaDeNegocio').append('<option value="' + element.intId + '">' + element.strDescripcion + '</option>');
                    })
                    $('#reglaDeNegocio').val(ValRegla_)
                }
                else {
                    $('#reglaDeNegocio').empty();
                    $('#reglaDeNegocio').append('<option value="0">Seleccione</option>');
                    response.forEach(element => {
                        $('#reglaDeNegocio').append('<option value="' + element.intId + '">' + element.strDescripcion + '</option>');
                    })
                    $('#reglaDeNegocio').val(ValRegla_)
                }
                registros_CboRegla = response.length;

            });


        $.post(
            '/Personal/ListarComboGlobal', {
                intIdMenu: 1,
                strEntidad: 'TGHORARIOREGISTRO',
                intIdFiltroGrupo: intidUniOrg,
                strGrupo: 'TGHORARIO',
                strSubGrupo: 'U' //editar
            },
            (response) => {
                if (response.length == 0) {
                    //Indicar que cambie de empresa
                    $('#tgHorarioFijo').empty()
                    $('#tgHorarioFijo').append('<option value="0" > -Empresa seleccionada no tiene Horarios (Ver Paso 2)- </option>')
                    $('#tgHorarioFijo').val(0)
                } else if (response.length == 1) {
                    //seleccionar automáticamente la única
                    $('#tgHorarioFijo').empty()
                    response.forEach(element => {
                        $('#tgHorarioFijo').append('<option value="' + element.intId + '">' + element.strDescripcion + '</option>');
                    });
                    $('#tgHorarioFijo').val(ValHorario_)
                }
                else {
                    $('#tgHorarioFijo').empty()
                    $('#tgHorarioFijo').append('<option value="0">Seleccione</option>')
                    response.forEach(element => {
                        $('#tgHorarioFijo').append('<option value="' + element.intId + '">' + element.strDescripcion + '</option>');
                    });
                    $('#tgHorarioFijo').val(ValHorario_)
                }
                registros_CboHorario = response.length;
            });

        $('#marcadorMultiple').empty()

    })

    // intIdJerOrgLista
    $(`#loaderEditPersonal`).hide()
    $('#wizard .form-hide-empleado').show()
    $('#btn-save-change-empleado').hide()
    $('#btn-editar-empleado').show()
    $('.form-hide-empleado').show()

    $('#cboDependencia').change(function () {
        let idDependencia = $(this).val()
        if (idDependencia == '0') {
            $('#unidadOrganizacionalCbo').empty()
            $('#unidadOrganizacionalCbo').attr('disabled', true)
            messageResponseMix({ type: 'info', message: 'Seleccione una Dependencia ' }, 'Registro Empleado')
            return false
        }
        $.post('/Personal/ListarCombos', {
            strEntidad: 'TGPERFIL',
            intIdFiltroGrupo: idDependencia,
            strGrupo: 'UNIORG',
            strSubGrupo: ''
        }, response => {
            $('#unidadOrganizacionalCbo').empty()
            $('#unidadOrganizacionalCbo').attr('disabled', false)
            $('#unidadOrganizacionalCbo').append('<option value="0">Seleccione</option>')
            response.forEach(element => {
                $('#unidadOrganizacionalCbo').append('<option value="' + element.intidTipo + '" >' + element.strDeTipo + '</option>')
            })
        })
    })
    $('#fechaCeseChecbox').on('ifChanged', function () {
        if ($('#fechaCeseChecbox').is(':checked') == true) {
            $('#tgTgGrupoliq').attr('disabled', false)
            $('#txtFechaCese').attr('disabled', false)
            $('#inputSuccess1').attr('disabled', false)//añadido 23.07.2021
            $('#mativoDeCese').attr('disabled', false)
        } else if ($('#fechaCeseChecbox').is(':checked') == false) {
            $('#tgTgGrupoliq').attr('disabled', true)
            $('#tgTgGrupoliq').val(0)
            $('#txtFechaCese').attr('disabled', true)
            $('#inputSuccess1').attr('disabled', true)//añadido 23.07.2021
            $('#txtFechaCese').val("")
            $('#inputSuccess1').val("")//añadido 23.07.2021
            $('#mativoDeCese').attr('disabled', true)
            $('#mativoDeCese').val("")
        }
    })
    //Añadiendo un Nuevo Objeto MARCADNI HG 19.02.21  --MOVIDO DESDE EL HTML
    $('#CheckboxVigenciaMarcaConDni').on('ifChanged', function () {
        if ($('#CheckboxVigenciaMarcaConDni').is(':checked') == true) {

            $('#txtFechaInicioVegencia').attr('disabled', false);
            $('#txtFechaFinVegencia').attr('disabled', false);

        } else if ($('#fechaCeseChecbox').is(':checked') == false) {

            $('#txtFechaInicioVegencia').attr('disabled', true);
            $('#txtFechaFinVegencia').attr('disabled', true);
            $('#txtFechaInicioVegencia').val('');
            $('#txtFechaFinVegencia').val('');

        }
    })
    $("#planillaEmpleado").change(function () {
        let id = $(this).val()
        $.post('/Personal/ListarComboGlobal', {
            intIdMenu: 1,
            strEntidad: 'TGGRUPOLIQREGISTRO',
            intIdFiltroGrupo: id,
            strGrupo: 'TGGRUPOLIQ',
            strSubGrupo: 'U',
        },
            (response) => {
                $('#tgTgGrupoliq').empty()
                $('#tgTgGrupoliq').append('<option value="0">Seleccione</option>')
                response.forEach(item => {
                    $('#tgTgGrupoliq').append('<option value="' + item.intId + '">' + item.strDescripcion + '</option>')
                })
            }
        )
    })

    $('#activarUsuarioCbo').on('ifChanged', function () {
        if ($('#activarUsuarioCbo').is(':checked') == true) {
            $('#activarUsuarioAdmin').attr('disabled', false)
        } else if ($('#activarUsuarioCbo').is(':checked') == false) {
            $('#activarUsuarioAdmin').iCheck('uncheck')
            $('#activarUsuarioAdmin').attr('disabled', true)
        }
        $('#cboPerfilAdmin').attr('disabled', true)
        $('#cboPerfilAdmin').val(0)
    })

    $('#activarUsuarioAdmin').on('ifChanged', function () {
        if ($('#activarUsuarioAdmin').is(':checked') == true) {
            $('#cboPerfilAdmin').attr('disabled', false)
        } else if ($('#activarUsuarioAdmin').is(':checked') == false) {
            $('#cboPerfilAdmin').attr('disabled', true)
            $('#cboPerfilAdmin').attr('disabled', true)
            $('#cboPerfilAdmin').val(0)
        }
    })

    $('#CboPais').on('change', function () {//editar
        var Valxpais = $('#CboPais').val()

        if (Valxpais > 0) {

            $.post(
                '/Personal/ListarCombos',
                {
                    intIdMenu: intIdMenu,
                    strEntidad: 'TGUBIGEO',
                    intIdFiltroGrupo: Valxpais,
                    strGrupo: 'DEPART',
                    strSubGrupo: '',
                },
                response => {
                    if (response.length > 0) {
                        $('#CboRegion').empty()
                        $('#CboRegion').attr('disabled', false)
                        if (response.length > 1) {
                            $('#CboRegion').append('<option value="">Seleccione</option>')
                        }
                        response.forEach(element => {
                            $('#CboRegion').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
                        })
                    } else {
                        $('#CboRegion').empty()
                        $('#CboRegion').attr('disabled', true)
                        $('#CboRegion').append('<option value="">No hay Departamentos</option>')
                    }
                    //añadido 05/08/2021
                    $('#CboProvincia').empty()
                    $('#CboProvincia').attr('disabled', true)
                    $('#CboProvincia').append('<option value="">Selec. un Departamento</option>')
                    $('#CboDistrito').empty()
                    $('#CboDistrito').attr('disabled', true)
                    $('#CboDistrito').append('<option value="">Selec. una Provincia</option>')
                }
            )

        } else {
            //añadido 05/08/2021
            $('#CboRegion').empty()
            $('#CboRegion').attr('disabled', true)
            $('#CboRegion').append('<option value="">Selec. un País</option>')
            $('#CboProvincia').empty()
            $('#CboProvincia').attr('disabled', true)
            $('#CboProvincia').append('<option value="">Selec. un Departamento</option>')
            $('#CboDistrito').empty()
            $('#CboDistrito').attr('disabled', true)
            $('#CboDistrito').append('<option value="">Selec. una Provincia</option>')
        }


        //var Valxpais = $('#CboPais').val()

        //$.post(
        //    '/Personal/ListarCombos',
        //    {
        //        intIdMenu: intIdMenu,
        //        strEntidad: 'TGUBIGEO',
        //        intIdFiltroGrupo: Valxpais,
        //        strGrupo: 'DEPART',
        //        strSubGrupo: '',
        //    },
        //    response => {
        //        $('#CboRegion').empty()
        //        $('#CboRegion').attr('disabled', false)
        //        $('#CboRegion').append('<option value="">Seleccione</option>')

        //        response.forEach(element => {
        //            $('#CboRegion').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
        //        })
        //    }
        //)
    })

    $('#CboRegion').on('change', function () { //EDITAR
        var ValDpto = $('#CboRegion').val()

        if (ValDpto > 0) {
            $.post(
                '/Personal/ListarCombos',
                {
                    intIdMenu: intIdMenu,
                    strEntidad: 'TGUBIGEO',
                    intIdFiltroGrupo: ValDpto,
                    strGrupo: 'REG',
                    strSubGrupo: '',
                },
                response => {
                    if (response.length > 0) {
                        $('#CboProvincia').empty()
                        $('#CboProvincia').attr('disabled', false)
                        //$('#CboProvincia').append('<option value="">Seleccione</option>')
                        if (response.length > 1) {
                            $('#CboProvincia').append('<option value="">Seleccione</option>')
                        }

                        response.forEach(element => {
                            $('#CboProvincia').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
                        })
                        var ValProv = $('#CboProvincia').val()
                        if (ValProv > 0) {
                            $.post(
                                '/Personal/ListarCombos',
                                {
                                    intIdMenu: intIdMenu,
                                    strEntidad: 'TGUBIGEO',
                                    intIdFiltroGrupo: ValProv,
                                    strGrupo: 'DIST',
                                    strSubGrupo: '',
                                },
                                response => {
                                    if (response.length > 0) {
                                        $('#CboDistrito').empty()
                                        $('#CboDistrito').attr('disabled', false)
                                        //$('#CboDistrito').append('<option value="">Seleccione</option>')
                                        if (response.length > 1) {
                                            $('#CboDistrito').append('<option value="">Seleccione</option>')
                                        }
                                        response.forEach(element => {
                                            $('#CboDistrito').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
                                        })
                                    }
                                    else {
                                        //añadido 05/08/2021
                                        $('#CboDistrito').empty()
                                        $('#CboDistrito').attr('disabled', true)
                                        $('#CboDistrito').append('<option value="">No hay Distritos</option>')
                                    }
                                }
                            )
                        } else {
                            $('#CboDistrito').empty()
                            $('#CboDistrito').attr('disabled', true)
                            $('#CboDistrito').append('<option value="">Selec. una Provincia</option>')
                        }
                    }
                    else {
                        //añadido 05/08/2021
                        $('#CboProvincia').empty()
                        $('#CboProvincia').attr('disabled', true)
                        $('#CboProvincia').append('<option value="">No hay Provincias</option>')
                        $('#CboDistrito').empty()
                        $('#CboDistrito').attr('disabled', true)
                        $('#CboDistrito').append('<option value="">No hay Distritos</option>')
                    }
                    //$('#CboDistrito').empty()
                    //$('#CboDistrito').attr('disabled', true)
                    //$('#CboDistrito').append('<option value="">Selec. una Provincia</option>')

                }
            )

        }
        else {
            //añadido 05/08/2021
            $('#CboProvincia').empty()
            $('#CboProvincia').attr('disabled', true)
            $('#CboProvincia').append('<option value="">Selec. un Departamento</option>')
            $('#CboDistrito').empty()
            $('#CboDistrito').attr('disabled', true)
            $('#CboDistrito').append('<option value="">Selec. una Provincia</option>')
        }

    })

    $('#CboProvincia').on('change', function () {//EDITAR
        var ValProv = $('#CboProvincia').val()
        if (ValProv > 0) {
            $.post(
                '/Personal/ListarCombos',
                {
                    intIdMenu: intIdMenu,
                    strEntidad: 'TGUBIGEO',
                    intIdFiltroGrupo: ValProv,
                    strGrupo: 'DIST',
                    strSubGrupo: '',
                },
                response => {
                    if (response.length > 0) {
                        $('#CboDistrito').empty()
                        $('#CboDistrito').attr('disabled', false)
                        //$('#CboDistrito').append('<option value="">Seleccione</option>')
                        if (response.length > 1) {
                            $('#CboDistrito').append('<option value="">Seleccione</option>')
                        }
                        response.forEach(element => {
                            $('#CboDistrito').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
                        })
                    }
                    else {
                        //añadido 05/08/2021
                        $('#CboDistrito').empty()
                        $('#CboDistrito').attr('disabled', true)
                        $('#CboDistrito').append('<option value="">No hay Distritos</option>')
                    }
                }
            )
        } else {
            $('#CboDistrito').empty()
            $('#CboDistrito').attr('disabled', true)
            $('#CboDistrito').append('<option value="">Selec. una Provincia</option>')
        }


        //var Valxpais = $('#CboProvincia').val()
        //$.post(
        //    '/Personal/ListarCombos',
        //    {
        //        intIdMenu: intIdMenu,
        //        strEntidad: 'TGUBIGEO',
        //        intIdFiltroGrupo: Valxpais,
        //        strGrupo: 'DIST',
        //        strSubGrupo: '',
        //    },
        //    response => {
        //        $('#CboDistrito').empty()
        //        $('#CboDistrito').attr('disabled', false)
        //        $('#CboDistrito').append('<option value="">Seleccione</option>')
        //        response.forEach(element => {
        //            $('#CboDistrito').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
        //        })
        //    }
        //)
    })

    if (typeof _vartablaGeo !== 'undefined') {
        _vartablaGeo.destroy();
    }

    _vartablaGeo = $('#tableGeo').DataTable({
        searching: false,
        paging: false,
        info: false,
        ordering: true,
        responsive: true,
        lengthMenu: [5, 25, 50],
        language: _datatableLanguaje,
        columnDefs: [
            {
                targets: [4],
                visible: false,
                searchable: false,
            },
        ],
        order: [],
        dom: 'lBfrtip',
    });

    $("#txtNumGeo").val(1)

    $("#tableGeoBody").empty();

    const datacoordenadas = await $.post('/Personal/getcoordenadaspersonal', {
        intIdPersonal: idItemEdit
    })
    console.log(datacoordenadas)
    if (datacoordenadas.length) {
        datacoordenadas.forEach(e => {

            var btnCoord = ""
            if (e.bitFlGeoArea) {
                btnCoord = `<span class="btn btn-success btn-xs btnAgregarCoor"> Usar GeoÁrea </span>`
            }

            $("#tableGeoBody").append(`
            <tr class="GeoDetalle">
            <td class="intGeoArea">${e.intIdGeoArea}</td>
            <td class="geo">${e.strCoord}</td>
            <td class="geoDir">${e.strDireccionCoord}</td>
            <td><span class="btn btn-danger btn-xs btnQuitarCoor"> Quitar </span>${btnCoord}</td>
            <td class="geoArea" hidden>${e.bitFlGeoArea}</td>
            </tr>
        `)
        })
    }

    $('#cboGeoArea').on('ifChanged', function () {
        if ($("#cboGeoArea").is(':checked')) {
            //$("#txtNumGeo").attr("disabled", false)
            $("#btnNuevaGeoArea").attr("disabled", false)
            getIndexGeo()
        } else {
            //$("#txtNumGeo").attr("disabled", true)
            $("#btnNuevaGeoArea").attr("disabled", true)
        }
    })

    $("#btn-limpiar-Intrevalos").on("click", function () {
        $("#txtCoor").val("")
        $("#txtNumGeo").val(1)
        $("#txtDireccionCoor").val("")
        $("#cboGeoArea").iCheck('unCheck')
    })

    $("#btn-clear-Geo").on("click", function () {
        $("#tableGeoBody").empty();
    })

    $("#btnNuevaGeoArea").on("click", function () {
        getIndexGeo()
    })

    function getIndexGeo() {
        $("#txtCoor").val("")
        $("#txtDireccionCoor").val("")
        if ($("#tableGeoBody tr").length == 0) {
            $("#txtNumGeo").val(1)
        } else {
            var index = 0
            $("#tableGeoBody tr").each(x => {
                var dato = $($("#tableGeoBody tr")[x]).find(".intGeoArea").html()
                if (dato != "") {
                    index = parseInt(dato)
                }
            })
            $("#txtNumGeo").val(index + 1)
        }
    }

    $("#btn-add-Geo").on("click", function () {
        var Geo = $("#txtCoor").val()
        var geoArea = false;
        var dir = $("#txtDireccionCoor").val()
        if (!ValidateCoordenada(Geo)) {
            messageResponseMix({ type: 'info', message: 'Coordenada ingresada incorrecta' }, 'Geolocalización')//añadido 06.09.2021
            return;
        }

        if (Geo === "" || Geo === null) {
            messageResponseMix({ type: 'info', message: 'Ingrese una Coordenada' }, 'Geolocalización')//añadido 06.09.2021
            return;
        }
        if (dir == "" || dir === null) {
            messageResponseMix({ type: 'info', message: 'Ingrese una Dirección' }, 'Geolocalización')//añadido 06.09.2021
            return;
        }

        $("#txtCoor").val("")
        $("#txtDireccionCoor").val("")
        var index = ""
        var btnCoord = ""
        if ($("#cboGeoArea").is(':checked')) {
            geoArea = true;
            index = $("#txtNumGeo").val()
            btnCoord = `<span class="btn btn-success btn-xs btnAgregarCoor"> Usar Geoarea</span>`
        }

        $("#tableGeoBody").append(`
            <tr class="GeoDetalle">
            <td class="intGeoArea">${index}</td>
            <td class="geo">${Geo}</td>
            <td class="geoDir">${dir}</td>
            <td><span class="btn btn-danger btn-xs btnQuitarCoor"> Quitar </span>${btnCoord}</td>
            <td class="geoArea" hidden>${geoArea}</td>
            </tr>
        `)



        $(".btnAgregarCoor").on("click", function () {
            var index = parseInt($(this).parents("tr").find(".intGeoArea").html())
            $("#txtNumGeo").val(index)
            $("#cboGeoArea").iCheck('Check')
        })


    })

}

$(document).on("click", ".btnAgregarCoor", function () {
    var index = parseInt($(this).parents("tr").find(".intGeoArea").html())
    $("#cboGeoArea").iCheck('Check')
    $("#txtNumGeo").val(index)
})

$(document).on("click", ".btnQuitarCoor", function () {

    var GeoArea = $(this).parents("tr").find(".intGeoArea").html()
    var elemento = this;
    if (GeoArea == "" || GeoArea == "0") {
        $(this).parents("tr").remove()
    } else {
        if ($("#tableGeoBody").find(".intGeoArea:contains(" + GeoArea + ")").length == 2) {
            swal({
                title: "Eliminar Coordenada",
                text: "¿Está seguro de eliminar la Coordenada?, Si lo hace esta se volverá una coordenada individual",
                type: "warning",
                showCancelButton: true,
                confirmButtonText: "Sí, eliminar",
                cancelButtonText: "No, cancelar",
            }).then(function (isConfirm) {
                swal("Eliminado", "Se elimino la coordenada", "success");
                $(elemento).parents("tr").remove()
                var tr = $("#tableGeoBody").find(".intGeoArea:contains(" + GeoArea + ")").parent("tr")
                tr.find(".btnAgregarCoor").remove()
                tr.find(".geoArea").html("false")
                $("#tableGeoBody").find(".intGeoArea:contains(" + GeoArea + ")").html("")
            }, function (dismiss) {
                ////swal("Cancelado", "La Operación fue cancelada", "error");
            });
        } else {
            $(this).parents("tr").remove()
        }
    }
})

function eliminarEmpleado(idItemDelete, textInfo = '¿Esta seguro de eliminar el registro?') {
    const { intIdMenu, tituloEliminarRegistro } = configEmpleadoInicial()
    swal({
        title: tituloEliminarRegistro,
        text: textInfo,
        type: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Sí, eliminar',
        cancelButtonText: 'No, cancelar',
    })
        .then(isConfirm => {
            validarSession()
            $.post('/Personal/EliminarEmpleado', { intIdMenu: intIdMenu, intIdPersonal: idItemDelete }, respo => {

                if (respo.type !== '') {
                    var tipo = 'Eliminado!';
                    if (respo.type === 'error') {
                        tipo = 'NO SE PUEDE ELIMINAR EL REGISTRO';
                    }
                    if (respo.type === 'success') {
                        traerDatosEmpleados()
                        $('.form-hide-empleado').hide()
                        $('#btn-save-change-empleado').show()
                        $('#btn-editar-empleado').hide()
                    }
                    swal(tipo, respo.message, respo.type);
                }
            })
        })
        .catch(err => {
            //swal('Cancelado', 'La Operación fue cancelada', 'error')
        })
}

function ValidateEmail(email) {
    const mailformat = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/
    if (email.match(mailformat)) {
        return true
    }
    return false
}
function ValidateCoordenada(Geo) {
    const coorFormat = /^[-]?\d+[\.]?\d*, [-]?\d+[\.]?\d*$/
    if (Geo.match(coorFormat)) {
        return true
    }
    return false
}

function getValueControl(idControl) {
    let data = $(idControl).val()
    if (data.length > 0) {
        //data.trim()
    }
    return data
}

function focusControl(idControl) {
    return $(idControl).focus()
}

//SOLUCION DESARROLLADA POR HGM AÑADIDO 17.12.2021
function FechaContratSeleccionado() {

    var input1 = $('#inputSuccess3').val();//INPUT DE NACIMIENTO
    var y1 = parseInt(input1.substring(0, 4));
    var m1 = parseInt(input1.substring(5, 7));
    var d1 = parseInt(input1.substring(8, 10));
    var input2 = $('#inputSuccess2').val(); //INPUT DE CONTRATACION
    var y2 = parseInt(input2.substring(0, 4));
    var m2 = parseInt(input2.substring(5, 7));
    var d2 = parseInt(input2.substring(8, 10));


    if ((y1 + 18) > y2) {

        if ((y1 + 18) > y2) {

            return 1;

        }
    }
    else if ((y1 + 18) == y2) {  //Años iguales //Verificamos el mes

        if (m1 > m2) {

            return 2;

        }

        else if (m1 == m2) { //Meses Iguales //Verificamos el dia

          if (d1 > d2) { 

                return 3;

          }
          else {

              //Continua el proceso ya que la fecha de contratacion el el mismo dia en que cumplio la ayoria de edad
          }

        }

    }

    /********************************************
    var input1 = $('#inputSuccess3').val();//INPUT DE NACIMIENTO
    var y1 = parseInt(input1.substring(0, 4));
    var m1 = parseInt(input1.substring(6, 7));
    var d1 = parseInt(input1.substring(9, 10));
    var input2 = $('#inputSuccess2').val(); //INPUT DE CONTRATACION
    var y2 = parseInt(input2.substring(0, 4));
    var m2 = parseInt(input2.substring(6, 7));
    var d2 = parseInt(input2.substring(9, 10));

    if (y1 > y2 || y1 == y2) {
        //alert('Año Mayor');
        if (m1 > m2 || m1 == m2) {
            //alert('Mes Mayor');
            if (d1 > d2 || d1 == d2) {
                //alert('Dia Mayor');
                new PNotify({
                    title: 'Empleado',
                    text: 'La fecha de admisión no puede ser menor a la fecha en que el empleado cumplió la mayoría de edad.',
                    type: 'info',
                    delay: 3000,
                    styling: 'bootstrap3',
                    addclass: 'dark'
                });
                $('#inputSuccess2').val(); //Ningun valor
                return false;
            }
            $('#inputSuccess2').val(); //Ningun valor
            return false;
        }
        $('#inputSuccess2').val(); //Ningun valor
        return false;
    }
    *********************************************/

    return 0 ;

}




function registrarOActualizar(tipoOperacionPass) {
    const { intIdMenu, formatoFecha } = configEmpleadoInicial()
    let titleToast = 'Nuevo Empleado'
    if (tipoOperacionPass == 2) {
        titleToast = 'Editar Empleado'
    }
    //Añadido 01.10.2021------------ SISFOOD--------------------------Inicio:
    var dttFechaInicioVigencia_ = '';
    var dttFechaFinVigencia_ = '';
    let estadoHabilitarMarcaDNI = false //30.09.2021
    let estadoHabilitarSupervisorDeCom = false //30.09.2021
    //<!-- AÑADIDO HG 23.03.21 HEBERT23-->
    if ($('#CheckboxHabilitarSupervisorDeCom').is(':checked')) {
        estadoHabilitarSupervisorDeCom = true
    }
    //Añadido 01.10.2021--------------------------------------:Fin

    let cboResponsableInmediato = $('#cboResponsableInmediato').val()
    let cboResponsableContractual = $('#cboResponsableContractual').val()

    const otrosCorreosData = $.map($('#TagEmailContainer .tagsinput span span'), function (e, i) {
        return $(e)
            .text()
            .trim()
    })
    const otrosTelefonosData = $.map($('#tagTelefonosContainer .tagsinput span span'), function (e, i) {
        return $(e)
            .text()
            .trim()
    })

    const otrosCorreos = otrosCorreosData.filter(item => {
        return ValidateEmail(item) === true
    })

    let generoEstado = false
    let contradoIndeterminado = false
    let gestionvac = false //añadido 16.08.2021
    let estadoActivoPersonal = $('#estadoEmpleadoActivo').is(':checked');//false
    let activarUsuarioCbo = false
    let usuarioAdmin = false
    let bitFlfotomovil = false
    let intIdPerfil = 0

    if ($('.radioMasculino').is(':checked')) {
        generoEstado = true
    }

    if ($('#contradoIndeterminado').is(':checked')) {
        contradoIndeterminado = true
    }
    //añadido 16.08.2021
    if ($('#GestVac_').is(':checked')) {
        gestionvac = true
    }

    if ($('#activarUsuarioCbo').is(':checked')) {
        activarUsuarioCbo = true
    }

    if ($('#activarUsuarioAdmin').is(':checked')) {
        usuarioAdmin = true
        intIdPerfil = $('#cboPerfilAdmin').val()
    }

    if ($('#cboTomarFoto').is(':checked')) {
        bitFlfotomovil = true
    }

    //AÑADIDO 23.07.2021
    //----------------------------------------------------------------------
    var x_ = $('#inputSuccess3').val();
    var x = x_.substr(8, 2) + '/' + x_.substr(5, 2) + '/' + x_.substr(0, 4);

    //añadido 10.09.2021 Calcular Si es o no Mayor de Edad) - Inicio
    var SplitFNac = x.split("/");
    const Hoy = Date.now();
    const fhoy = new Date(Hoy);
    var Dhoy = parseInt(fhoy.getDate(), 10);
    var Mhoy = parseInt(fhoy.getMonth(), 10) + 1; //Enero = 0
    var Ahoy = parseInt(fhoy.getFullYear(), 10);
    var DNac = parseInt(SplitFNac[0], 10);
    var MNac = parseInt(SplitFNac[1], 10);
    var ANac = parseInt(SplitFNac[2], 10);
    var ValidaMayorEdad = false;
    if ((Ahoy - ANac) < 18) {
        ValidaMayorEdad = false;
    } else if ((Ahoy - ANac) == 18) {
        //Validar Meses
        if (Mhoy < MNac) {
            ValidaMayorEdad = false;
        } else if (Mhoy == MNac) {
            //Validar Día
            if (Dhoy >= DNac) {
                ValidaMayorEdad = true;
            } else {
                ValidaMayorEdad = false;
            }
        } else {
            ValidaMayorEdad = true;
        }
    } else {
        ValidaMayorEdad = true;
    }
    //añadido 10.09.2021 Calcular Si es o no Mayor de Edad) - Fin
    $('#txtFechaNac').val(x);
    var x_ = $('#inputSuccess2').val();
    var x = x_.substr(8, 2) + '/' + x_.substr(5, 2) + '/' + x_.substr(0, 4);
    $('#txtFechaAdmi').val(x);
    $('#txtFechaCese').val('');
    var x_ = $('#inputSuccess1').val();
    if (x_ == "" || x_ == null) {
        $('#txtFechaCese').val('');
    } else {
        var x = x_.substr(8, 2) + '/' + x_.substr(5, 2) + '/' + x_.substr(0, 4);
        if (x_ != "//") {
            $('#txtFechaCese').val(x);
        }
    }
    //----------------------------------------------------------------------
    var comboFiscalizacion = $('#comboFiscalizacion').val()
    var nivelDeResponsabilidad = $('#nivelDeResponsabilidad').val()
    var intIdUniOrgSup = $('#cboEmpresa').val()
    var intIdLocal = $('#cboLocal').val()
    var intIdDependencia = $('#cboDependencia').val()//añadido 10.09.2021
    var unidadOrganizacionalCbo = $('#unidadOrganizacionalCbo').val()
    var cargoEmpleado = $('#cargoEmpleado').val()
    var planillaEmpleado = $('#planillaEmpleado').val()
    //----------------------------------------------------------------------




    if (getValueControl('#TipoDoc') == '0' && $("#TipoDoc option").length > 1) {
        messageResponseMix({ type: 'info', message: 'Complete el campo obligatorio (Tipo Documento)' }, titleToast)
        focusControl('#TipoDoc')
        return false
    } else if (getValueControl('#txtNumDoc').length < 1) {
        messageResponseMix({ type: 'info', message: 'Complete el campo obligatorio (Número Documento)' }, titleToast)
        focusControl('#txtNumDoc')
        return false
    } else if (getValueControl('#txtApePat').length < 1) {
        messageResponseMix({ type: 'info', message: 'Complete el campo obligatorio (Apellido Paterno)' }, titleToast)
        focusControl('#txtApePat')
        return false
    } else if (getValueControl('#txtApeMat').length < 1) {
        messageResponseMix({ type: 'info', message: 'Complete el campo obligatorio (Apellido Materno)' }, titleToast)
        focusControl('#txtApeMat')
        return false
    } else if (getValueControl('#txtNombres').length < 1) {
        messageResponseMix({ type: 'info', message: 'Complete el campo obligatorio (Nombres)' }, titleToast)
        focusControl('#txtNombres')
        return false
    } else if (getValueControl('#txtFechaNac').length < 3) {
        messageResponseMix({ type: 'info', message: 'Complete el campo obligatorio (Fecha de Nacimiento)' }, titleToast)
        focusControl('#txtFechaNac')
        return false
    } else if (ValidaMayorEdad == false) {//añadido 10.09.2021
        messageResponseMix({ type: 'info', message: 'El Empleado no puede ser Menor de Edad' }, titleToast)
        focusControl('#txtFechaNac')
        return false
    } else if (!$("input[name='generoEmpleado']:radio").is(':checked')) {
        messageResponseMix({ type: 'info', message: 'Complete el campo obligatorio (Género)' }, titleToast)
        return false

    } else if (getValueControl('#Email_Emple').length == '') {
        messageResponseMix({ type: 'info', message: 'Correo Principal es obligatorio' }, titleToast)
        focusControl('#Email_Emple')
        return false
    } else if (getValueControl('#Email_Emple').length < 1 || !ValidateEmail(getValueControl('#Email_Emple'))) {
        messageResponseMix({ type: 'info', message: 'Correo Principal no tiene el formato correcto' }, titleToast)
        focusControl('#Email_Emple')
        return false
    } else if (getValueControl('#celularEmpleado').length > 0 || $('#celularEmpleado').val() != '') { //modificado 19.08.2021
        if (getValueControl('#celularEmpleado').length < 9) {
            messageResponseMix({ type: 'info', message: 'El Celular Principal debe tener 9 dígitos' }, titleToast)
            focusControl('#celularEmpleado')
            return false
        }
    }
    else if (getValueControl('#fotocheckPersonal').length < 1) {
        $('#wizard').smartWizard('goToStep', 2)
        messageResponseMix({ type: 'info', message: 'Ingrese N° de Fotocheck (Paso 2)' }, titleToast)
        focusControl('#fotocheckPersonal')
        return false
    } else if (getValueControl('#txtFechaAdmi').length < 1) {
        messageResponseMix({ type: 'info', message: 'Ingrese la Fecha de Admisión (Paso 2)' }, titleToast)
        focusControl('#txtFechaAdmi')
        return false
    } else if ((comboFiscalizacion == null || comboFiscalizacion == 0) && $("#comboFiscalizacion option").length > 1) {
        messageResponseMix({ type: 'info', message: 'Seleccione una Fiscalización (Paso 2)' }, titleToast)
        focusControl('#comboFiscalizacion')
        return false
    } else if ((nivelDeResponsabilidad == null || nivelDeResponsabilidad == 0) && $("#nivelDeResponsabilidad option").length > 1) {
        messageResponseMix({ type: 'info', message: 'Seleccione un Nivel de Responsabilidad (Paso 2)' }, titleToast)
        focusControl('#nivelDeResponsabilidad')
        return false
    } else if ((intIdUniOrgSup == null || intIdUniOrgSup == 0) && $("#cboEmpresa option").length > 1) {
        messageResponseMix({ type: 'info', message: 'Seleccione una Empresa (Paso 2)' }, titleToast)
        focusControl('#cboEmpresa')
        return false
    } else if ((intIdLocal == null || intIdLocal == 0) && $("#cboLocal option").length > 1) {
        messageResponseMix({ type: 'info', message: 'Seleccione un Local (Paso 2)' }, titleToast)
        focusControl('#cboLocal')
        return false
    } else if ((intIdDependencia == null || intIdDependencia == 0) && $("#cboDependencia option").length > 1) {
        messageResponseMix({ type: 'info', message: 'Seleccione una Unidad Dependencia (Paso 2)' }, titleToast)
        focusControl('#cboDependencia')
        return false
    } else if ((unidadOrganizacionalCbo == null || unidadOrganizacionalCbo == 0) && $("#unidadOrganizacionalCbo option").length > 1) {
        messageResponseMix({ type: 'info', message: 'Seleccione una Unidad Organizacional (Paso 2)' }, titleToast)
        focusControl('#unidadOrganizacionalCbo')
        return false
    } else if ((cargoEmpleado == null || cargoEmpleado == 0) && $("#cargoEmpleado option").length > 1) {
        messageResponseMix({ type: 'info', message: 'Seleccione un Cargo (Paso 2)' }, titleToast)
        focusControl('#cargoEmpleado')
        return false
    } else if ((planillaEmpleado == null || planillaEmpleado == 0) && $("#planillaEmpleado option").length > 1) {
        messageResponseMix({ type: 'info', message: 'Seleccione una Planilla (Paso 2)' }, titleToast)
        focusControl('#planillaEmpleado')
        return false
    } else if ($('#reglaDeNegocio option').length == 0 || $('#reglaDeNegocio').val() == 0 || $('#reglaDeNegocio').val() == null) {
        if (registros_CboRegla == 0) {
            messageResponseMix({ type: 'info', message: 'Empresa seleccionada no tiene Reglas (Paso 2)' }, titleToast)
            focusControl('#cboEmpresa')
        } else {
            messageResponseMix({ type: 'info', message: 'Seleccione una Regla de Negocio (Paso 4)' }, titleToast)
            focusControl('#reglaDeNegocio')
        }
        return false
    } else if ($('#tgHorarioFijo option').length == 0 || $('#tgHorarioFijo').val() == 0 || $('#tgHorarioFijo').val() == null) {
        if (registros_CboHorario == 0) {
            messageResponseMix({ type: 'info', message: 'Empresa seleccionada no tiene Horarios (Paso 2)' }, titleToast)
            focusControl('#cboEmpresa')
        } else {
            messageResponseMix({ type: 'info', message: 'Seleccione un Horario Fijo (Paso 4)' }, titleToast)
            focusControl('#tgHorarioFijo')
        }
        return false
    } else if (getValueControl('#marcadorMultiple').length <= 0) {
        if (registros_CboMarcador == 0) {
            messageResponseMix({ type: 'info', message: 'Local seleccionado no tiene Marcadores (Paso 2)' }, titleToast)
            focusControl('#cboLocal')
        } else {
            messageResponseMix({ type: 'info', message: 'Seleccione al menos un Marcador (Paso 4)' }, titleToast)
            focusControl('#marcadorMultiple')
        }
        return false
    }



    var input1 = $('#inputSuccess3').val();//INPUT DE NACIMIENTO
    var y1 = parseInt(input1.substring(0, 4));
    var m1 = parseInt(input1.substring(5, 7));
    var d1 = parseInt(input1.substring(8, 10));
    var input2 = $('#inputSuccess2').val(); //INPUT DE CONTRATACION
    var y2 = parseInt(input2.substring(0, 4));
    var m2 = parseInt(input2.substring(5, 7));
    var d2 = parseInt(input2.substring(8, 10));  
    
    var today = new Date();                //Fecha de hoy
    var date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();
    var y3 = parseInt(date.substring(0, 4));
    var m3 = parseInt(date.substring(8, 7));
    var d3 = parseInt(date.substring(8, 10));


    if ((y1 + 18) > y2 ) {

        if ((y1 + 18) > y2) {

            new PNotify({
                title: 'Fecha de Admisión',
                text: 'Verificar el Año de Adminión.',
                type: 'info',
                delay: 3000,
                styling: 'bootstrap3',
                addclass: 'dark'
            });

            return;

        }
    }
    else if ((y1 + 18) == y2) {  //Años iguales //Verificamos el mes
           

            if (m1 > m2) {

                new PNotify({
                    title: 'Fecha de Admisión',
                    text: 'Verificar el Mes de Adminión.',
                    type: 'info',
                    delay: 3000,
                    styling: 'bootstrap3',
                    addclass: 'dark'
                });

                return;

            }           

            else if (m1 == m2) { //Meses Iguales //Verificamos el dia

                  if (d1 > d2) {

                    new PNotify({
                        title: 'Fecha de Admisión',
                        text: 'Verificar el Día de Adminión.',
                        type: 'info',
                        delay: 3000,
                        styling: 'bootstrap3',
                        addclass: 'dark'
                    });

                    return;
                  }
            }
                //else {
                //    /*
                //    //Fecha de contratacion el mismo dia del cumpleaños
                //    new PNotify({
                //        title: 'OK',
                //        text: '--------------------------.',
                //        type: 'info',
                //        delay: 3000,
                //        styling: 'bootstrap3',
                //        addclass: 'dark'
                //    });
                //    */
                    
                //}

           

    }




    /*
    //El Empleado debe ser mayor de edad.
    let truefalsecontrat = FechaContratSeleccionado(true); // Añadido HGM 17.11.2021
    //Validacion Añadida HGM 17.11.2021
   if (truefalsecontrat == false) {
        //alert('15112021_1814_HGM');
        messageResponseMix({ type: 'info', message: 'La fecha de admisión no puede ser menor o igual a la fecha de nacimiento.' }, titleToast)
        focusControl('#inputSuccess2');
        return false;
   }

    */


    let marcadorMultiple = getValueControl('#marcadorMultiple')
    let otrosCorreosInsert = []
    otrosCorreosInsert.push({
        intIdPerCorr: 0,
        intIdPersonal: 0,
        strCorreo: getValueControl('#Email_Emple'),
        bitFlPrincipal: true,
        bitFlEliminado: false,
    })
    otrosCorreos.forEach(item => {
        otrosCorreosInsert.push({
            intIdPerCorr: 0,
            intIdPersonal: 0,
            strCorreo: item,
            bitFlPrincipal: false,
            bitFlEliminado: false,
        })
    })

    let otrosTelefonosInsert = []
    if (getValueControl('#celularEmpleado').length > 0) {
        otrosTelefonosInsert.push({
            intIdPerTele: 0,
            intIdPersonal: 0,
            strNumero: getValueControl('#celularEmpleado'),
            bitFlPrincipal: true,
            strAnexo: ' ',
            bitFlEliminado: false,
        })
    }
    otrosTelefonosData.forEach(item => {
        otrosTelefonosInsert.push({
            intIdPerTele: 0,
            intIdPersonal: 0,
            strNumero: item,
            bitFlPrincipal: false,
            strAnexo: '',
            bitFlEliminado: false,
        })
    })

    let otrosMarcadoresInsert = []
    marcadorMultiple.forEach(item => {
        if (item == "0") {
            messageResponseMix({ type: 'info', message: 'Seleccione al Menos un Marcador válido' }, titleToast)
            focusControl('#marcadorMultiple')
            return;
        } else {
            otrosMarcadoresInsert.push({
                intIdPerMarc: false,
                intIdPersonal: 0,
                intIdSoft: 0,
                intIdMarcador: item,
                dttFecAsig: moment().format(formatoFecha),
                bitFlEliminado: false,
            })
        }

    })
    if (otrosMarcadoresInsert.length == 0) {
        messageResponseMix({ type: 'info', message: 'Seleccione al Menos un Marcador válido' }, titleToast)
        focusControl('#marcadorMultiple')
        return;
    }
    let otrosResponsabilidadInsert = []

    if (cboResponsableInmediato != 0 && cboResponsableInmediato != null) {
        otrosResponsabilidadInsert.push({
            intIdPerRespDet: 0,
            intIdPersonal: 0,
            intIdPerResp: cboResponsableInmediato,
            intIdTipoResp: 9,
            bitVigente: true,
            bitFlEliminado: false,
            intIdUsuarReg: 1,
        })
    }

    if (cboResponsableContractual != 0 && cboResponsableContractual != null) {
        otrosResponsabilidadInsert.push({
            intIdPerRespDet: 0,
            intIdPersonal: 0,
            intIdPerResp: cboResponsableContractual,
            intIdTipoResp: 10,
            bitVigente: true,
            bitFlEliminado: false,
            intIdUsuarReg: 1,
        })
    }

    let imagePersonal = null
    let numRegistroPersonalHideen = '000'
    let strCoPersonalRegistro = '000'
    let subsidioPorAlimentacion = false
    let liniaDeCreditos = false

    if ($('#txtRutaEmple').val() != '') {
        imagePersonal = $('#txtRutaEmple').val()
    }

    if ($('#codPersonalHideen').val() != '') {
        strCoPersonalRegistro = $('#codPersonalHideen').val()
    }

    if ($('#numRegistroPersonalHideen').val() != '') {
        numRegistroPersonalHideen = $('#numRegistroPersonalHideen').val()
    }

    if ($('#subsidioPorAlimentacion').is(':checked')) {
        subsidioPorAlimentacion = true
    }
    if ($('#liniaDeCreditos').is(':checked')) {
        liniaDeCreditos = true
    }

    var categoriaEmpleado = $('#categoriaEmpleado').val()
    var tipoDePersonal = $('#tipoDePersonal').val()
    var tgGrupoRegistro = $('#tgGrupoRegistro').val()
    var centroDeCosto = $('#centroDeCosto').val()
    var reglaDeNegocio = $('#reglaDeNegocio').val()

    //RECOGER LAS FECHAS DE LOS CONTROLES Y USAR EL MOMENT()//30.09.2021
    //Añadido HG 19.03.21 - Para Toma de Consumos con DNI 
    if ($('#CheckboxVigenciaMarcaConDni').is(':checked')) {
        estadoHabilitarMarcaDNI = true
        dttFechaInicioVigencia_ = $('#txtFechaInicioVegencia').val();
        dttFechaFinVigencia_ = $('#txtFechaFinVegencia').val();
        var txtFechaInicioVegencia_mas_uno = moment(dttFechaInicioVigencia_).add('m', 60).format('YYYY-MM-DD HH:mm:ss');
        //Añadir Validaciones de Rango de fecha
        var FechaIniVigencia = Date.parse(dttFechaInicioVigencia_);
        var FechaFinVigencia = Date.parse(dttFechaFinVigencia_);

        if (dttFechaInicioVigencia_ == '' || dttFechaFinVigencia_ == '') {
            messageResponseMix({ type: 'info', message: 'Debe ingresar el rango de tiempo de Vigencia' }, 'Marcación con DNI')
            focusControl('#txtFechaInicioVegencia')
            return false
        }
        if (moment(dttFechaInicioVigencia_).isAfter(dttFechaFinVigencia_)) {
            messageResponseMix({ type: 'info', message: 'La Fecha - Hora Fin de Vigencia debe ser posterior a la de Inicio' }, 'Marcación con DNI')
            focusControl('#txtFechaFinVegencia')
            return false
        }

        if ((FechaFinVigencia - FechaIniVigencia) < 1000) { //Si no existe ni un minuto de diferencia
            messageResponseMix({ type: 'info', message: 'El Rango de Horas de Vigencia debe ser de al menos 1 minuto de diferencia' }, titleToast)
            focusControl('#txtFechaFinVegencia')
            return false
        }
        if (moment(dttFechaInicioVigencia_).isSame(dttFechaFinVigencia_)) {
            messageResponseMix({ type: 'info', message: 'El Tiempo de Vigencia debe ser de al menos 1 Hora.' }, 'Marcación con DNI')
            focusControl('#txtFechaFinVegencia')
            return false
        }
        if (moment(txtFechaInicioVegencia_mas_uno).isAfter(dttFechaFinVigencia_)) {
            messageResponseMix({ type: 'info', message: 'El Tiempo de Vigencia debe ser de al menos 1 Hora.' }, 'Marcación con DNI')
            focusControl('#txtFechaFinVegencia')
            return false
        }
    }


    if (reglaDeNegocio == 0 && $("#reglaDeNegocio option").length > 1) {
        messageResponseMix({ type: 'info', message: 'Seleccione una Regla de Negocio' }, titleToast)
        return;
    }

    var tgHorarioFijo = $('#tgHorarioFijo').val()
    if ((tgHorarioFijo == null || tgHorarioFijo == 0) && $("#tgHorarioFijo option").length > 1) {
        messageResponseMix({ type: 'info', message: 'Seleccione un Horario Fijo' }, titleToast)
        return;
    }

    if (usuarioAdmin && intIdPerfil == 0) {
        messageResponseMix({ type: 'info', message: 'Seleccione un Perfil Administrador' }, titleToast)
        return;
    }


    let geoDetalle = []
    if ($(".GeoDetalle").length > 0) {
        $(".GeoDetalle").each(function (index) {
            var geoArea = $(this).find(".geoArea").html()
            var coor = $(this).find(".geo").html()
            var geoDir = $(this).find(".geoDir").html()
            var intGeo = $(this).find(".intGeoArea").html()

            geoDetalle.push({
                intIdPersonal: $('#intIdPersonalReg').val(),
                strCoord: coor,
                strDireccionCoord: geoDir,
                bitFlGeoArea: geoArea,
                intIdGeoArea: intGeo
            })

        });
    }

    if (activaUsuario == false && activarUsuarioCbo == true) {
        activaUsuario = true
    } else {
        activaUsuario = false
    }

    if (desactivaUsuario == true && activarUsuarioCbo == false) {
        desactivaUsuario = true
    } else {
        desactivaUsuario = false
    }

    if (activarAdmin != usuarioAdmin) {
        activarAdmin = true
    } else {
        activarAdmin = false
    }

    const params = {
        intIdMenu: intIdMenu,
        ObjPersonal: {
            intIdPersonal: $('#intIdPersonalReg').val(),
            strCoPersonal: strCoPersonalRegistro,
            strNumRegis: numRegistroPersonalHideen,
            strFotocheck: $('#fotocheckPersonal').val(),
            intIdTipDoc: $('#TipoDoc').val(),
            strNumDoc: $('#txtNumDoc').val(),
            strNombres: $('#txtNombres').val(),
            strApePaterno: $('#txtApePat').val(),
            strApeMaterno: $('#txtApeMat').val(),
            dttFecNacim: $('#txtFechaNac').val(),
            bitflSexo: generoEstado,
            intIdTipoVia: $('#TipVia').val() != '0' ? $('#TipVia').val() : null,
            strDireccion: $('#TXTTIPVIA').val().length ? $('#TXTTIPVIA').val() : null,
            intIdUbigeo: $('#txtIntidUbigeo').val() != '0' ? $('#txtIntidUbigeo').val() : null,
            imgFoto: imagePersonal,
            intIdUniOrg: unidadOrganizacionalCbo,
            intIdPlanilla: planillaEmpleado,
            intIdCargo: cargoEmpleado,
            intIdCateg: categoriaEmpleado,
            intIdTiPers: tipoDePersonal,
            intIdGrupo: tgGrupoRegistro,
            intIdCCosto: centroDeCosto,
            intIdTipFisc: comboFiscalizacion,
            intIdTipoResp: nivelDeResponsabilidad,
            bitContratoInd: contradoIndeterminado,
            dttFecAdmin: $('#txtFechaAdmi').val(),
            dttFecCese: $('#txtFechaCese').val() != '' || $('#txtFechaCese').val() != ' ' ? $('#txtFechaCese').val() : null, //'09/11/2021', //tgTgGrupoliq
            intIdMotiCese: $('#mativoDeCese').val() != '0' ? $('#mativoDeCese').val() : null,
            intIdGrupoLiq: $('#tgTgGrupoliq').val() != '0' ? $('#tgTgGrupoliq').val() : null,
            bitFlSubsidio: null,
            bitFlLinCred: false,
            strPersoCampo1: $('#strPersonalCampo1').val(),
            strPersoCampo2: $('#strPersonalCampo2').val(),
            strPersoCampo3: $('#strPersonalCampo3').val(),
            strPersoCampo4: $('#strPersonalCampo4').val(),
            strPersoCampo5: $('#strPersonalCampo5').val(),
            bitFlActivo: estadoActivoPersonal,
            strCodExterior: $('#codigoExterno').val(),
            strCodPensionista: $('#codigoPensionista').val(),
            strCodSalud: $('#codigoDeSalud').val(),
            bitSubsidioAlimentacion: subsidioPorAlimentacion,
            bitLineaCredito: liniaDeCreditos,
            intIdReglaNeg: reglaDeNegocio != '0' ? reglaDeNegocio : null,
            intIdHorario: tgHorarioFijo != '0' ? tgHorarioFijo : null,
            bitActivarUsuario: activarUsuarioCbo,
            intIdUniOrgSup,
            intIdLocal,
            bitPerfilAdmin: usuarioAdmin,
            intIdPerfil,
            bitFlfotomovil,
            bitGestionVac: gestionvac //añadido 16.08.2021
        },
        //Inicio Añadido un Nuevo Objeto ObjMarcaConDni HG 19.02.21 ==================================================================== 30.09.2021
        ObjMarcaConDni: {

            bitHabilitarMarcaDNI: estadoHabilitarMarcaDNI,
            dttFechaInicioVegencia: dttFechaInicioVigencia_,                //Añadido HG 19.03.21 - Para Toma de Consumos con DNI
            dttFechaFinVegencia: dttFechaFinVigencia_,                      //Añadido HG 19.03.21 - Para Toma de Consumos con DNI
            bitHabilitarSupervisorCom: estadoHabilitarSupervisorDeCom,

        },
        //Fin de Añadido un Nuevo Objeto ObjMarcaConDni HG 19.02.21 ====================================================================

        listaDetallesPersonalCorreos: otrosCorreosInsert,
        listaDetallesPersonalTelefonos: otrosTelefonosInsert,
        listaDetallesPersonalResponsabilidad: otrosResponsabilidadInsert,
        listaDetallesPersonalMarcadores: otrosMarcadoresInsert,
        intTipoOperacion: tipoOperacionPass,
        listaCoor: geoDetalle,
        activaUsuario,    //true
        desactivaUsuario, //false
        activarAdmin       //false
    }

    console.log(params)
    $.post('/Personal/RegistrarNuevoEmpleado', params, respo => {
        if (tipoOperacionPass == 1) {
            messageResponseMix(respo, 'Nuevo Empleado')
        } else {
            messageResponseMix(respo, 'Editar Empleado')
        }

        if (respo.extramsg != null && respo.extramsg.includes("correo")) {
            messageResponseMix({ type: 'info', message: respo.extramsg }, 'Info Correo')//Probar este mensaje.

        }

        if (respo.type === 'success') {
            $('.form-hide-empleado .x_content').empty()
            $('.form-hide-empleado .x_content').html('')
            $('.form-hide-empleado').hide()
            traerDatosEmpleados()
        }
    })
}

$('#btn-save-change-empleado').on('click', function () {
    validarSession()
    registrarOActualizar(1)
})

$('#btn-editar-empleado').on('click', function () {
    //alert('17112021HGM');
    validarSession()
    registrarOActualizar(2)
})

$('#btn-cancel-empleado').on('click', function () {
    validarSession()
    $('.form-hide-empleado').hide()
    $('#btn-save-change-empleado').show()
    $('#btn-editar-empleado').hide()
    registros_CboRegla = 0;
    registros_CboHorario = 0;
    registros_CboMarcador = 0;
})

$(`#TablaPersonal tbody`).on('click', `tr button.btn-edit`, function () {
    validarSession()
    let intIdPersonal = $(this).attr('dataid')
    editarEmpleado(intIdPersonal)
})

$(`#TablaPersonal tbody`).on('click', `tr button.btn-delete`, function () {
    validarSession()
    let intIdPersonal = $(this).attr('dataid')
    let nombreEmpleado = $(this).attr('des_data')
    eliminarEmpleado(intIdPersonal, `¿Está seguro de eliminar el empleado "${nombreEmpleado}"?`)
})

$(`#TablaPersonal tbody`).on('click', `tr button.btn-resend`, function () {
    validarSession()
    let intIdPersonal = parseInt($(this).attr('dataid'))
    $.ajax({
        url: '/Personal/ReenviarCorreo',
        type: 'POST',
        data: {
            intIdPersonal
        },
        beforeSend: function () {
            $.blockUI({
                css: {
                    border: 'none',
                    padding: '15px',
                    backgroundColor: '#000',
                    '-webkit-border-radius': '10px',
                    '-moz-border-radius': '10px',
                    opacity: .5,
                    color: '#fff'
                },
                message: 'Procesando...'
            });
        },
        success: function (response) {
            console.log(response)
            if (response["activo"] == "no") {
                swal({
                    title: "Reenviar correo",
                    text: "Empleado no tiene usuario activo, ¿Desea activarlo?",
                    type: 'info',
                    showCancelButton: true,
                    confirmButtonText: 'Sí, activar',
                    cancelButtonText: 'No, cancelar',
                })
                    .then(isConfirm => {
                        validarSession()
                        $.post('/Personal/ActivarUsuario', { intIdPersonal }, respo => {
                            messageResponseMix({ type: 'info', message: respo }, 'Reenviar Correo')//Probar este mensaje.
                            /* new PNotify({
                                 title: 'Reenviar Correo',
                                 text: respo,
                                 type: 'info',
                                 delay: 3000,
                                 styling: 'bootstrap3',
                                 addclass: 'dark'
                             });*/

                        })
                    })
                    .catch(err => {
                        //swal('Cancelado', 'La Operación fue cancelada', 'error')
                    })
            } else {
                messageResponseMix({ type: 'info', message: response["mensaje"] }, 'Reenviar Correo')//Probar este mensaje.
                /*new PNotify({
                    title: 'Reenviar Correo',
                    text: response["mensaje"],
                    type: 'info',
                    delay: 3000,
                    styling: 'bootstrap3',
                    addclass: 'dark'
                });*/
            }


        },
        complete: function () {
            $.unblockUI();
        }
    })



})


var _vartableResponsabilidad;
var _vartablePapeleta;
var fechaInicio;
var fechaFin;

//Nueva función 06/08/2021
function Inicio_MantEmpleado() {
    //Segmento #03
    //------------------------------------------------------------------------------------------------
    $("#chk_fecha").prop('checked', false) //22.07.2021
    $('#salto').show();//22.07.2021
    $('#filtroFechaRangeEmpleado').hide();//22.07.2021
    //$('#filtroFechaRangeEmpleado').prop('disabled', true);//22.07.2021
    if ($('#filtroFechaRangeEmpleado').length) {
        const { rangeDateInicial } = configEmpleadoInicial()
        init_daterangepicker_custom('filtroFechaRangeEmpleado', rangeDateInicial)
    }
    $.fn.inputFilter = function (inputFilter) {
        return this.on('input keydown keyup mousedown mouseup select contextmenu drop', function () {
            if (inputFilter(this.value)) {
                this.oldValue = this.value
                this.oldSelectionStart = this.selectionStart
                this.oldSelectionEnd = this.selectionEnd
            } else if (this.hasOwnProperty('oldValue')) {
                this.value = this.oldValue
                this.setSelectionRange(this.oldSelectionStart, this.oldSelectionEnd)
            } else {
                this.value = ''
            }
        })
    }




    //Segmento #4
    //------------------------------------------------------------------------------------------------
    //se unió 4 segmentos de código repartidos
    const { dataTableId, formatoFecha, rangeDateInicial } = configEmpleadoInicial()
    if ($(`#${dataTableId}`).length) {

        $.post(
            '/Personal/ListarCombosPersonal',
            { intIdMenu: 0, strEntidad: 'TGUNIDORG', intIdFiltroGrupo: 0, strGrupo: 'JERAR', strSubGrupo: 'FILTRO' },//modificado 08.09.2021
            (response) => {
                $('#intIdUniOrg').empty();
                //$('#intIdUniOrg').append('<option value="0" selected>Todos</option>');

                response.forEach(element => {
                    $('#intIdUniOrg').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>');
                });
            });

        $('#intIdUniOrg').change(function () {
            validarSession()
            const date = getDateRangePickerEmpleado()
            traerDatosEmpleados(date.fInicio, date.fFin)
        })

        traerDatosEmpleados(rangeDateInicial.startDate.format(formatoFecha), rangeDateInicial.endDate.format(formatoFecha))
    }
}

function configMiFichaInicial() {
    const intIdMenu = localStorage.getItem('idsubmenu') && !isNaN(localStorage.getItem('idsubmenu')) ? Number(localStorage.getItem('idsubmenu')) : 1
    const contenedorIdInicial = 'miFichaPersonal'
    const formatoFecha = 'DD/MM/YYYY'
    const rangeDateInicial = {
        startDate: moment().subtract(10, 'year'),
        endDate: moment(),
    }
    return {
        intIdMenu,
        contenedorIdInicial,
        formatoFecha,
        rangeDateInicial,
    }
}
function getDocumentElementById(id) {
    return document.getElementById(id)
}

function getAdicionalControlEditarPersonal() {
    const { intIdMenu, formatoFecha, rangeDateInicial } = configMiFichaInicial()

    axios
        .post('/Personal/ListarCombos', {
            intIdMenu: intIdMenu,
            strEntidad: 'TGTIPO_VIA',
            intIdFiltroGrupo: 0,
            strGrupo: '',
            strSubGrupo: '',
        })
        .then((resp) => {
            const dataTipVia = resp.data
            if (dataTipVia.length) {
                $('#TipVia').empty()
                $('#TipVia').attr('disabled', false)
                $('#TipVia').append('<option value="0">--</option>')
                dataTipVia.forEach((element) => {
                    $('#TipVia').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
                })
            }
        })
        .catch((error) => {
            console.log(error)
        })

    axios
        .post('/Personal/ListarCombos', {
            intIdMenu: intIdMenu,
            strEntidad: 'TGPAIS',
            intIdFiltroGrupo: 0,
            strGrupo: 'EXISTE',
            strSubGrupo: '',
        })
        .then((resp) => {
            const dataCboPais = resp.data
            if (dataCboPais.length) {
                $('#CboPais').empty()
                $('#CboPais').attr('disabled', false)
                if (dataCboPais.length) {
                    $('#CboPais').append('<option value="">Seleccione</option>')
                }
                dataCboPais.forEach((element) => {
                    $('#CboPais').append('<option value="' + element.intidTipo + '">' + element.strDeTipo + '</option>')
                })
            }
        })
        .catch((error) => {
            console.log(error)
        })
}

function getTimeConceptoHoras(string) {

    var x = string.indexOf('(')
    var y = string.substr(x + 1)

    var salida = y.replace(')', '');

    return salida
}

function getHorasByMin(m) {
    var minutes = m % 60
    minutes = minutes < 10 ? '0' + minutes : minutes;
    var hours = Math.floor(m / 60)
    hours = hours < 10 ? '0' + hours : hours;
    return hours + ":" + minutes
}

//async function updatePersonalPerfil(intIdPersonal) {
//    const titleToast = 'Actualizar Mi Ficha'
//    ActualizarPerfilEmpleado(titleToast, intIdPersonal);
//}

function validarFecha(fecha) {
    var array = fecha.split("/", 3)
    var d = array[0]
    var m = array[1]
    var a = array[2]
    var ok = true;
    if ((a < 1900) || (a > 2050) || (m < 1) || (m > 12) || (d < 1) || (d > 31))
        ok = false;
    else {
        if ((a % 4 != 0) && (m == 2) && (d > 28))
            ok = false;
        else {
            if ((((m == 4) || (m == 6) || (m == 9) || (m == 11)) && (d > 30)) || ((m == 2) && (d > 29)))
                ok = false;
        }
    }
    return ok;
}


//#endregion MANT. EMPLEADO - COMEDOR


//=====================================================************************************************************************* FIN ************************************************************====================================================================//



























































































































































/***********************************/
/**
 /**********************************/
//#region PENDIENTE REVISAR
function init_ToolbarBootstrapBindings() {
    var fonts = ['Serif', 'Sans', 'Arial', 'Arial Black', 'Courier',
        'Courier New', 'Comic Sans MS', 'Helvetica', 'Impact', 'Lucida Grande', 'Lucida Sans', 'Tahoma', 'Times',
        'Times New Roman', 'Verdana'
    ],
        fontTarget = $('[title=Font]').siblings('.dropdown-menu');
    $.each(fonts, function (idx, fontName) {
        fontTarget.append($('<li><a data-edit="fontName ' + fontName + '" style="font-family:\'' + fontName + '\'">' + fontName + '</a></li>'));
    });
    $('a[title]').tooltip({
        container: 'body'
    });
    $('.dropdown-menu input').click(function () {
        return false;
    })
        .change(function () {
            $(this).parent('.dropdown-menu').siblings('.dropdown-toggle').dropdown('toggle');
        })
        .keydown('esc', function () {
            this.value = '';
            $(this).change();
        });

    $('[data-role=magic-overlay]').each(function () {
        var overlay = $(this),
            target = $(overlay.data('target'));
        overlay.css('opacity', 0).css('position', 'absolute').offset(target.offset()).width(target.outerWidth()).height(target.outerHeight());
    });

    if ("onwebkitspeechchange" in document.createElement("input")) {
        var editorOffset = $('#editor').offset();

        $('.voiceBtn').css('position', 'absolute').offset({
            top: editorOffset.top,
            left: editorOffset.left + $('#editor').innerWidth() - 35
        });
    } else {
        $('.voiceBtn').hide();
    }
}
function editarPapeletaSalida() {
    $('.form-hide-PapeletaSalida').show();
}
function eliminarPapeletaSalida() {

    swal({
        title: "Eliminar Papeleta de Salida",
        text: "Esta seguro de eliminar el registro?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí, eliminar",
        cancelButtonText: "No, cancelar",
    }).then(function (isConfirm) {
        if (isConfirm) {
            swal("Eliminado!", "El resgistro fue eliminado correctamente", "success");
        } else {
            swal("Cancelado", "La operacion fue cancelada : )", "error");
        }
    });

}
$('#btn-save-change-PapeletaSalida').on('click', function () {

    var typeArray = ['success', 'info', 'error'];
    var typeItem = typeArray[Math.floor(Math.random() * typeArray.length)];

    messageResponseMix({ type: typeItem, message: 'El registro se creó correctamente' }, 'Registro Papeleta de Salida')
    //new PNotify({
    //    title: 'Registro Papeleta de Salida',
    //    text: 'El registro se creó correctamente',
    //    type: typeItem,
    //    delay: 1000,
    //    styling: 'bootstrap3'
    //});
});
$('#btn-cancel-PapeletaSalida').on('click', function () {
    $('.form-hide-PapeletaSalida').hide();
});
//#endregion PENDINTE REVISAR

/**------------------------------------------------------ */
/**21. Campos Adicionales */
/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- *///
//#region MANT.CAMPO ADICIONAL INCOMPLETO
function editarCamposAdicionales() {
    $('.form-hide-CamposAdicionales').show();
}
function eliminarCamposAdicionales() {

    swal({
        title: "Eliminar Campos Adicionales",
        text: "Esta seguro de eliminar el registro?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Sí, eliminar",
        cancelButtonText: "No, cancelar",
    }).then(function (isConfirm) {
        if (isConfirm) {
            swal("Eliminado!", "El resgistro fue eliminado correctamente", "success");
        } else {
            swal("Cancelled", "Your imaginary file is safe :)", "error");
        }
    });

}

$('#btn-new-CamposAdicionales').on('click', function () {
    $('#btn-save-change-CamposAdicionales').show();
    $('#btn-update-CamposAdicionales').hide();
    $('.form-hide-CamposAdicionales').show();
    $.post(
        '/Configuracion/NuevoCamposAdicionales',
        {},
        (response) => {
            if (response !== '') {
                $('.form-hide-CamposAdicionales .x_content').empty();
                $('.form-hide-CamposAdicionales .x_content').html(response);
                $('.form-hide-CamposAdicionales').show();
            }
        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
});
$('#btn-save-change-CamposAdicionales').on('click', function () {

    var typeArray = ['success', 'info', 'error'];

    var typeItem = typeArray[Math.floor(Math.random() * typeArray.length)];
    messageResponseMix({ type: typeItem, message: 'El registro se creó correctamente' }, 'Campos Adicionales')
    //new PNotify({
    //    title: 'Registro Campos Adicionales',
    //    text: 'El registro se creó correctamente',
    //    type: typeItem,
    //    delay: 1000,
    //    styling: 'bootstrap3'
    //});
});
$('#btn-cancel-CamposAdicionales').on('click', function () {
    $('.form-hide-CamposAdicionales').hide();
});

//#endregion MANT. CAMPO ADICIONAL INCOMPLETO




/**------------------------------------------------------*//*ln_25835_all*/
/**24. Cálculo Manual*/
/**------------------------------------------------------*//*ln_26330_all*/

function SinDetalle() {
    $('#DetalleTex1').attr('hidden', false);
    $('#DetalleTex2').attr('hidden', false);
    $('#DetalleTex3').attr('hidden', false);
    $('#DetalleTex4').attr('hidden', false);
    $('#DetalleTex5').attr('hidden', false);
    $('#DetalleTex6').attr('hidden', false);
}

function calcu_two() {
    $('.chekeamePeriodos').on('click', function () {
        var n = $('.checky:checked').length;
        if (n > 0) {
            $('#GrupoLiqui').attr('disabled', false);


        }
        if (n == 0) {
            //$('#precheck').prop('hidden', false);
            $('#GrupoLiqui').attr('disabled', true);
        }
    });
}
function calcu_third() {
    $('#checkliqui').on('click', function () {
        var m = $('#checkliqui:checked').length;
        if (m == 1) {
            $('#GrupoLiqui').attr('disabled', false);
        }
        if (m == 0) {
            $('#GrupoLiqui').attr('disabled', true);
        }
    });
};

function init_compose() {

    if (typeof ($.fn.slideToggle) === 'undefined') { return; }

    init_EasyPieChart();
    $('#compose, .compose-close').click(function () {
        $('.compose').slideToggle();
    });
};
function init_EasyPieChart() {

    if (typeof ($.fn.easyPieChart) === 'undefined') { return; }

    $('.chart').easyPieChart({
        easing: 'easeOutElastic',
        delay: 3000,
        barColor: '#26B99A',
        trackColor: '#fff',
        scaleColor: false,
        lineWidth: 20,
        trackWidth: 16,
        lineCap: 'butt',
        onStep: function (from, to, percent) {
            $(this.el).find('.percent').text(Math.round(percent));
        }
    });
    var chart = window.chart = $('.chart').data('easyPieChart');
    $('.js_update').on('click', function () {
        chart.update(Math.random() * 200 - 100);
    });

    //hover and retain popover when on popover content
    var originalLeave = $.fn.popover.Constructor.prototype.leave;
    $.fn.popover.Constructor.prototype.leave = function (obj) {
        var self = obj instanceof this.constructor ?
            obj : $(obj.currentTarget)[this.type](this.getDelegateOptions()).data('bs.' + this.type);
        var container, timeout;

        originalLeave.call(this, obj);

        if (obj.currentTarget) {
            container = $(obj.currentTarget).siblings('.popover');
            timeout = self.timeout;
            container.one('mouseenter', function () {
                //We entered the actual popover – call off the dogs
                clearTimeout(timeout);
                //Let's monitor popover content instead
                container.one('mouseleave', function () {
                    $.fn.popover.Constructor.prototype.leave.call(self, self);
                });
            });
        }
    };

    $('body').popover({
        selector: '[data-popover]',
        trigger: 'click hover',
        delay: {
            show: 50,
            hide: 400
        }
    });

};
function init_charts() {
    if (typeof (Chart) === 'undefined') { return; }
    Chart.defaults.global.legend = {
        enabled: false
    };

    if ($('#canvas_line').length) {

        var canvas_line_00 = new Chart(document.getElementById("canvas_line"), {
            type: 'line',
            data: {
                labels: ["January", "February", "March", "April", "May", "June", "July"],
                datasets: [{
                    label: "My First dataset",
                    backgroundColor: "rgba(38, 185, 154, 0.31)",
                    borderColor: "rgba(38, 185, 154, 0.7)",
                    pointBorderColor: "rgba(38, 185, 154, 0.7)",
                    pointBackgroundColor: "rgba(38, 185, 154, 0.7)",
                    pointHoverBackgroundColor: "#fff",
                    pointHoverBorderColor: "rgba(220,220,220,1)",
                    pointBorderWidth: 1,
                    data: [31, 74, 6, 39, 20, 85, 7]
                }, {
                    label: "My Second dataset",
                    backgroundColor: "rgba(3, 88, 106, 0.3)",
                    borderColor: "rgba(3, 88, 106, 0.70)",
                    pointBorderColor: "rgba(3, 88, 106, 0.70)",
                    pointBackgroundColor: "rgba(3, 88, 106, 0.70)",
                    pointHoverBackgroundColor: "#fff",
                    pointHoverBorderColor: "rgba(151,187,205,1)",
                    pointBorderWidth: 1,
                    data: [82, 23, 66, 9, 99, 4, 2]
                }]
            },
        });

    }


    if ($('#canvas_line1').length) {

        var canvas_line_01 = new Chart(document.getElementById("canvas_line1"), {
            type: 'line',
            data: {
                labels: ["January", "February", "March", "April", "May", "June", "July"],
                datasets: [{
                    label: "My First dataset",
                    backgroundColor: "rgba(38, 185, 154, 0.31)",
                    borderColor: "rgba(38, 185, 154, 0.7)",
                    pointBorderColor: "rgba(38, 185, 154, 0.7)",
                    pointBackgroundColor: "rgba(38, 185, 154, 0.7)",
                    pointHoverBackgroundColor: "#fff",
                    pointHoverBorderColor: "rgba(220,220,220,1)",
                    pointBorderWidth: 1,
                    data: [31, 74, 6, 39, 20, 85, 7]
                }, {
                    label: "My Second dataset",
                    backgroundColor: "rgba(3, 88, 106, 0.3)",
                    borderColor: "rgba(3, 88, 106, 0.70)",
                    pointBorderColor: "rgba(3, 88, 106, 0.70)",
                    pointBackgroundColor: "rgba(3, 88, 106, 0.70)",
                    pointHoverBackgroundColor: "#fff",
                    pointHoverBorderColor: "rgba(151,187,205,1)",
                    pointBorderWidth: 1,
                    data: [82, 23, 66, 9, 99, 4, 2]
                }]
            },
        });

    }


    if ($('#canvas_line2').length) {

        var canvas_line_02 = new Chart(document.getElementById("canvas_line2"), {
            type: 'line',
            data: {
                labels: ["January", "February", "March", "April", "May", "June", "July"],
                datasets: [{
                    label: "My First dataset",
                    backgroundColor: "rgba(38, 185, 154, 0.31)",
                    borderColor: "rgba(38, 185, 154, 0.7)",
                    pointBorderColor: "rgba(38, 185, 154, 0.7)",
                    pointBackgroundColor: "rgba(38, 185, 154, 0.7)",
                    pointHoverBackgroundColor: "#fff",
                    pointHoverBorderColor: "rgba(220,220,220,1)",
                    pointBorderWidth: 1,
                    data: [31, 74, 6, 39, 20, 85, 7]
                }, {
                    label: "My Second dataset",
                    backgroundColor: "rgba(3, 88, 106, 0.3)",
                    borderColor: "rgba(3, 88, 106, 0.70)",
                    pointBorderColor: "rgba(3, 88, 106, 0.70)",
                    pointBackgroundColor: "rgba(3, 88, 106, 0.70)",
                    pointHoverBackgroundColor: "#fff",
                    pointHoverBorderColor: "rgba(151,187,205,1)",
                    pointBorderWidth: 1,
                    data: [82, 23, 66, 9, 99, 4, 2]
                }]
            },
        });

    }


    if ($('#canvas_line3').length) {

        var canvas_line_03 = new Chart(document.getElementById("canvas_line3"), {
            type: 'line',
            data: {
                labels: ["January", "February", "March", "April", "May", "June", "July"],
                datasets: [{
                    label: "My First dataset",
                    backgroundColor: "rgba(38, 185, 154, 0.31)",
                    borderColor: "rgba(38, 185, 154, 0.7)",
                    pointBorderColor: "rgba(38, 185, 154, 0.7)",
                    pointBackgroundColor: "rgba(38, 185, 154, 0.7)",
                    pointHoverBackgroundColor: "#fff",
                    pointHoverBorderColor: "rgba(220,220,220,1)",
                    pointBorderWidth: 1,
                    data: [31, 74, 6, 39, 20, 85, 7]
                }, {
                    label: "My Second dataset",
                    backgroundColor: "rgba(3, 88, 106, 0.3)",
                    borderColor: "rgba(3, 88, 106, 0.70)",
                    pointBorderColor: "rgba(3, 88, 106, 0.70)",
                    pointBackgroundColor: "rgba(3, 88, 106, 0.70)",
                    pointHoverBackgroundColor: "#fff",
                    pointHoverBorderColor: "rgba(151,187,205,1)",
                    pointBorderWidth: 1,
                    data: [82, 23, 66, 9, 99, 4, 2]
                }]
            },
        });

    }


    if ($('#canvas_line4').length) {

        var canvas_line_04 = new Chart(document.getElementById("canvas_line4"), {
            type: 'line',
            data: {
                labels: ["January", "February", "March", "April", "May", "June", "July"],
                datasets: [{
                    label: "My First dataset",
                    backgroundColor: "rgba(38, 185, 154, 0.31)",
                    borderColor: "rgba(38, 185, 154, 0.7)",
                    pointBorderColor: "rgba(38, 185, 154, 0.7)",
                    pointBackgroundColor: "rgba(38, 185, 154, 0.7)",
                    pointHoverBackgroundColor: "#fff",
                    pointHoverBorderColor: "rgba(220,220,220,1)",
                    pointBorderWidth: 1,
                    data: [31, 74, 6, 39, 20, 85, 7]
                }, {
                    label: "My Second dataset",
                    backgroundColor: "rgba(3, 88, 106, 0.3)",
                    borderColor: "rgba(3, 88, 106, 0.70)",
                    pointBorderColor: "rgba(3, 88, 106, 0.70)",
                    pointBackgroundColor: "rgba(3, 88, 106, 0.70)",
                    pointHoverBackgroundColor: "#fff",
                    pointHoverBorderColor: "rgba(151,187,205,1)",
                    pointBorderWidth: 1,
                    data: [82, 23, 66, 9, 99, 4, 2]
                }]
            },
        });

    }


    // Line chart

    if ($('#lineChart').length) {

        var ctx = document.getElementById("lineChart");
        var lineChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: ["January", "February", "March", "April", "May", "June", "July"],
                datasets: [{
                    label: "My First dataset",
                    backgroundColor: "rgba(38, 185, 154, 0.31)",
                    borderColor: "rgba(38, 185, 154, 0.7)",
                    pointBorderColor: "rgba(38, 185, 154, 0.7)",
                    pointBackgroundColor: "rgba(38, 185, 154, 0.7)",
                    pointHoverBackgroundColor: "#fff",
                    pointHoverBorderColor: "rgba(220,220,220,1)",
                    pointBorderWidth: 1,
                    data: [31, 74, 6, 39, 20, 85, 7]
                }, {
                    label: "My Second dataset",
                    backgroundColor: "rgba(3, 88, 106, 0.3)",
                    borderColor: "rgba(3, 88, 106, 0.70)",
                    pointBorderColor: "rgba(3, 88, 106, 0.70)",
                    pointBackgroundColor: "rgba(3, 88, 106, 0.70)",
                    pointHoverBackgroundColor: "#fff",
                    pointHoverBorderColor: "rgba(151,187,205,1)",
                    pointBorderWidth: 1,
                    data: [82, 23, 66, 9, 99, 4, 2]
                }]
            },
        });

    }

    // Bar chart

    if ($('#mybarChart').length) {

        var ctx = document.getElementById("mybarChart");
        var mybarChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ["January", "February", "March", "April", "May", "June", "July"],
                datasets: [{
                    label: '# of Votes 1',
                    backgroundColor: "#26B99A",
                    data: [51, 30, 40, 28, 92, 50, 45]
                }, {
                    label: '# of Votes',
                    backgroundColor: "#03586A",
                    data: [41, 56, 25, 48, 72, 34, 12]
                }]
            },

            options: {
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                }
            }
        });

    }


    // Doughnut chart

    if ($('#canvasDoughnut').length) {

        var ctx = document.getElementById("canvasDoughnut");
        var data = {
            labels: [
                "Dark Grey",
                "Purple Color",
                "Gray Color",
                "Green Color",
                "Blue Color"
            ],
            datasets: [{
                data: [120, 50, 140, 180, 100],
                backgroundColor: [
                    "#455C73",
                    "#9B59B6",
                    "#BDC3C7",
                    "#26B99A",
                    "#3498DB"
                ],
                hoverBackgroundColor: [
                    "#34495E",
                    "#B370CF",
                    "#CFD4D8",
                    "#36CAAB",
                    "#49A9EA"
                ]

            }]
        };

        var canvasDoughnut = new Chart(ctx, {
            type: 'doughnut',
            tooltipFillColor: "rgba(51, 51, 51, 0.55)",
            data: data
        });

    }

    // Radar chart

    if ($('#canvasRadar').length) {

        var ctx = document.getElementById("canvasRadar");
        var data = {
            labels: ["Eating", "Drinking", "Sleeping", "Designing", "Coding", "Cycling", "Running"],
            datasets: [{
                label: "My First dataset",
                backgroundColor: "rgba(3, 88, 106, 0.2)",
                borderColor: "rgba(3, 88, 106, 0.80)",
                pointBorderColor: "rgba(3, 88, 106, 0.80)",
                pointBackgroundColor: "rgba(3, 88, 106, 0.80)",
                pointHoverBackgroundColor: "#fff",
                pointHoverBorderColor: "rgba(220,220,220,1)",
                data: [65, 59, 90, 81, 56, 55, 40]
            }, {
                label: "My Second dataset",
                backgroundColor: "rgba(38, 185, 154, 0.2)",
                borderColor: "rgba(38, 185, 154, 0.85)",
                pointColor: "rgba(38, 185, 154, 0.85)",
                pointStrokeColor: "#fff",
                pointHighlightFill: "#fff",
                pointHighlightStroke: "rgba(151,187,205,1)",
                data: [28, 48, 40, 19, 96, 27, 100]
            }]
        };

        var canvasRadar = new Chart(ctx, {
            type: 'radar',
            data: data,
        });

    }


    // Pie chart
    if ($('#pieChart').length) {

        var ctx = document.getElementById("pieChart");
        var data = {
            datasets: [{
                data: [120, 50, 140, 180, 100],
                backgroundColor: [
                    "#455C73",
                    "#9B59B6",
                    "#BDC3C7",
                    "#26B99A",
                    "#3498DB"
                ],
                label: 'My dataset' // for legend
            }],
            labels: [
                "Dark Gray",
                "Purple",
                "Gray",
                "Green",
                "Blue"
            ]
        };

        var pieChart = new Chart(ctx, {
            data: data,
            type: 'pie',
            otpions: {
                legend: false
            }
        });

    }


    // PolarArea chart

    if ($('#polarArea').length) {

        var ctx = document.getElementById("polarArea");
        var data = {
            datasets: [{
                data: [120, 50, 140, 180, 100],
                backgroundColor: [
                    "#455C73",
                    "#9B59B6",
                    "#BDC3C7",
                    "#26B99A",
                    "#3498DB"
                ],
                label: 'My dataset'
            }],
            labels: [
                "Dark Gray",
                "Purple",
                "Gray",
                "Green",
                "Blue"
            ]
        };

        var polarArea = new Chart(ctx, {
            data: data,
            type: 'polarArea',
            options: {
                scale: {
                    ticks: {
                        beginAtZero: true
                    }
                }
            }
        });

    }
}

/**------------------------------------------------------*//*ln_26332_all*/
/**25. Reportes */
/**------------------------------------------------------*//*ln_26536_all*/

function SinDetalle_reportes() {
    $('#DetalleTex1').attr('hidden', false);
    $('#DetalleTex2').attr('hidden', false);
    $('#DetalleTex3').attr('hidden', false);
    $('#DetalleTex4').attr('hidden', false);
    $('#DetalleTex5').attr('hidden', false);
    $('#DetalleTex6').attr('hidden', false);
}

function calcu_one_reportes() {
    $('#cboJerarquia').on('change', function () {
        var id = $('#cboJerarquia').val();
        if (id) {
            $('#UnidadesOrganizacionales').attr('disabled', false);
            return;
        }
    });
}

function calcu_two_reportes() {
    $('#chekeame').on('click', function () {
        var n = $('.checky:checked').length;
        if (n > 0) {
            $('#Planilla').attr('disabled', false);


        }
        if (n == 0) {

            $('#Planilla').attr('disabled', true);
        }
    });

    //alert('TGREPORTESC002');
    LlenarFizcalizacion();
}

function DescargarUnidades() {
    $('#cboJerarquia').on('change', function () {
        var id = $('#cboJerarquia option:selected').val();

        if (id == 0 || !id) {
            $('#cbounidsupe').empty();
            $('#cbounidsupe').attr('disabled', true);

            return;
        }
        $.post(
            '/Organizacion/getUnidxJerarquia',
            { IntIdJerOrg: id },
            (response) => {
                if (true) {
                    console.log(response);
                    response.forEach(element => {

                        $('#chekeame').append('<li role="presentation"><label class= "checkbox-inline" >' +
                            '<input id="' + element.intIdUniOrg + '"type="checkbox" class="checky" name="responsive">' + element.strDescripcion +
                            '</label></li >');
                    });

                }
                $('.checky').click(function () {
                    var lstIntIdUniOrg = new Array();
                    $('.checky:checked').each(function () {
                        lstIntIdUniOrg.push($(this).prop('id') * 1);
                    });
                    console.log('clickeado');
                    console.log(this);
                    console.log($(this).prop('checked'));
                    console.log(lstIntIdUniOrg);


                    $.post(
                        '/Reportes/GetCampPlanilla',
                        { lstIntIdUniOrg: lstIntIdUniOrg },
                        (response) => {
                            if (true) {
                                console.log(response);
                                response.forEach(element => {

                                    $('#chekeamePlanilla').append('<li role="presentation"><label class= "checkbox-inline" >' +
                                        '<input id="' + element.intIdPlanilla + '"type="checkbox" class="checkyPlanilla" name="responsive">' + element.strDesPlani +
                                        '</label></li >');
                                });

                            }
                        }
                    ).fail(function (result) {
                        alert('ERROR ' + result.status + ' ' + result.statusText);
                    });
                    $('#chekeamePlanilla').empty();

                })
            }
        ).fail(function (result) {
            alert('ERROR ' + result.status + ' ' + result.statusText);
        });
        $('#chekeame').empty();
    });

    $('#chekeame').on('click', function () {
        return;
        console.log(this);
        var id = $('.checky ').val();
        //if (id == 0 || !id) {
        //    $('#cbounidsupe').empty();
        //    $('#cbounidsupe').attr('disabled', true);

        //    return;
        //}

        $.post(
            '/Reportes/GetCampPlanilla',
            { intIdUniOrg: id },
            (response) => {
                if (true) {
                    console.log(response);
                    response.forEach(element => {

                        $('#chekeamePlanilla').append('<li role="presentation"><label class= "checkbox-inline" >' +
                            '<input id="' + element.intIdPlanilla + '"type="checkbox" class="icheckbox_flat-blue checkyPlanilla" name="responsive">' + element.strDesPlani +
                            '</label></li >');
                        init_checkBox_styles();
                    });

                }
            }
        ).fail(function (result) {
            alert('ERROR ' + result.status + ' ' + result.statusText);
        });
        $('#chekeamePlanilla').empty();
    });
}

function LlenarFizcalizacion() {

    $.post(
        '/Reportes/GetCampFizcalizacion',
        {},
        (response) => {


            response.forEach(element => {

                $('#Fizcalizacion').append('<li role="presentation"><label class= "checkbox-inline" >' +
                    '<input id="' + element.intIdTipo + '"type="checkbox"  name="responsive">' + element.strDeTipo +
                    '</label></li >');
            });


        }
    ).fail(function (result) {
        alert('ERROR ' + result.status + ' ' + result.statusText);
    });
    $('#Fizcalizacion').empty();

}

function allchecks() {


    var estado = $('#idcheck').is(':checked');

    if (estado == false) {
        $('#checking').append('<input type="checkbox" id="idcheck1" style="float:right !important;" class="flat" checked />')
        $('#checking1').append('<input type="checkbox" id="idcheck1" style="float:right !important;" class="flat" checked />')
        $('#checking2').append('<input type="checkbox" id="idcheck1" style="float:right !important;" class="flat" checked />')
        $('#checking3').append('<input type="checkbox" id="idcheck1" style="float:right !important;" class="flat" checked />')
        $('#checking4').append('<input type="checkbox" id="idcheck1" style="float:right !important;" class="flat" checked />')
        $('#checking5').append('<input type="checkbox" id="idcheck1" style="float:right !important;" class="flat" checked />')
        $('#checking6').append('<input type="checkbox" id="idcheck1" style="float:right !important;" class="flat" checked />')



    } else {
        $('#checking').append('<input type="checkbox" id="idcheck1" style="float:right !important;" class="flat" unchecked />')
        $('#checking1').append('<input type="checkbox" id="idcheck1" style="float:right !important;" class="flat" unchecked />')
        $('#checking2').append('<input type="checkbox" id="idcheck1" style="float:right !important;" class="flat" unchecked />')
        $('#checking3').append('<input type="checkbox" id="idcheck1" style="float:right !important;" class="flat" unchecked />')
        $('#checking4').append('<input type="checkbox" id="idcheck1" style="float:right !important;" class="flat" unchecked />')
        $('#checking5').append('<input type="checkbox" id="idcheck1" style="float:right !important;" class="flat" unchecked />')
        $('#checking6').append('<input type="checkbox" id="idcheck1" style="float:right !important;" class="flat" unchecked />')

    }

}


function GetCampEntidades() {
    $.post(
        '/Configuracion/GetCampEntidades',
        {},
        (response) => {
            response.forEach(element => {
                $('#campEnt').append(
                    ' <option value="' + element.intIdEntid + '">' + element.strNomEntid + '</option>'
                );

            });
        }
    );
}



/**---------------------------------------------------------- */
/**Layout */
/*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
$(document).ready(function () {
    //se unen segmentos 06/08/2021

    //Segmento #1
    //-----------------------------------------------------------------------------------------------------
    $('.collapse-link').on('click', function () {
        var $BOX_PANEL = $(this).closest('.x_panel'),
            $ICON = $(this).find('i'),
            $BOX_CONTENT = $BOX_PANEL.find('#oculto');
        // fix for some div with hardcoded fix class
        if ($BOX_PANEL.attr('style')) {
            $BOX_CONTENT.slideToggle(200, function () {
                $BOX_PANEL.removeAttr('style');
            });
        } else {
            $BOX_CONTENT.slideToggle(200);
            $BOX_PANEL.css('height', 'auto');
        }
        $ICON.toggleClass('fa-chevron-up fa-chevron-down');
    });

    //Segmento #2
    //-----------------------------------------------------------------------------------------------------
    const { intIdMenu, contenedorIdInicial, formatoFecha, rangeDateInicial } = configMiFichaInicial()
    if ($(`#${contenedorIdInicial}`).length) {
        var today = new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate());
        $('#FechaNac').datetimepicker({
            maxDate: today,
            viewMode: 'days',
            format: formatoFecha
        })
    }

    //Carga Información del Mant. Empleado
    //--------------
    Inicio_MantEmpleado();
});

$(function () {
    $('#datetimepicker3').datetimepicker({
        format: 'LT'
    });
});









////////////////////////////////////////////////////////////////////
//// VALIDACION DE CARACTERES DE CAMPOS 
////////////////////////////////////////////////////////////////////
//function validarControlesAlfanumerico(evt) {

//    //onkeypress = "validarControlesAlfanumerico(event)"
//    var theEvent = evt || window.event;

//    // Handle paste
//    if (theEvent.type === 'paste') {
//        key = event.clipboardData.getData('text/plain');
//    } else {
//        // Handle key press
//        var key = theEvent.keyCode || theEvent.which;
//        key = String.fromCharCode(key);
//    }
//    var regex = /[0-9]|[a-z]|[A-Z]|\_|\-/; //Numeros, Letras ---> a-z,A-Z, _ , -
//    //var regex = /[0-9]/; //Numeros, Letras ---> a-z,A-Z, _ , -
//    if (!regex.test(key)) {
//        theEvent.returnValue = false;
//        if (theEvent.preventDefault) theEvent.preventDefault();
//    }
//}


////////////////////////////////////////////////////////////////////
//// VALIDACION DE CARACTERES DE CAMPOS 
////////////////////////////////////////////////////////////////////
//function validarControlesAlfanumerico_ConEspacios(evt) {

//    //onkeypress = "validarControlesAlfanumerico(event)"
//    var theEvent = evt || window.event;

//    // Handle paste
//    if (theEvent.type === 'paste') {
//       
//        key = event.clipboardData.getData('text/plain');
//    } else {
//  
//        // Handle key press
//        var key = theEvent.keyCode || theEvent.which;
//        key = String.fromCharCode(key);
//    }
//    var regex = /[0-9]|[a-z]|[A-Z]|\_|\-/; //Numeros, Letras ---> a-z,A-Z, _ , -
//    //var regex = /[0-9]/; //Numeros, Letras ---> a-z,A-Z, _ , -

//    //PREVENIR ESPACIOS EN VACIOS CON BARRA ESPACIADORA
//    if (!regex.test(key)) {
//    
//        //theEvent.returnValue = false;
//        //if (theEvent.preventDefault) theEvent.preventDefault();
//    }

//}














































/*
 | ----------------------------------------------------------------------------------------
 | A partir de esta línea se debería estar copiando código desde el SITE.JS lunes.22.01.21
 | ----------------------------------------------------------------------------------------
 | 1.- Mantenimiento Servicios(del sisfood)
 | 2.- Mantenimiento Toma de Consumos(del sisfood)
 | 3.- Mantenimiento Regla de Negocio(del sisfood)(se le reubicó en otra parte)
codigoPensionista
HGM ServicioSisfood: 35578

*/


/******************************************************************************************
Maximo de Caracteres   VALIDACIONESHGM
//POST AADIDO PARA VALIDAR LOS DOS CAMPOS INPUT HGM 29.10.2021
$.post(
    '/Organizacion/ListarCaracteresMax',
    { strMaestro: 'TGJERARQORG' },//NOMBRE DE LA TABLA EN LA BD

    //{ strMaestro: 'TGUNIDORG' },
    (response) => {
  
        response.forEach(element => {

            if (element.strColumnName == 'strCoJerOrg') {

                $("#txt-cod-JO").attr('maxlength', element.intMaxLength);
                //$('.Valcod').children("input").attr('maxlength', element.intMaxLength);

            }
            if (element.strColumnName == 'strNomJerOrg') {

                $("#txt-desc-JO").attr('maxlength', element.intMaxLength);
                //$('.Valdes').children("input").attr('maxlength', element.intMaxLength);
            }

        });

    });

********************************************************************************************/





























